{
  "problem_id": "count-substrings-that-satisfy-k-constraint-ii",
  "problem_title": "",
  "difficulty": "Hard",
  "status": "unsolved",
  "best_solution": "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_more_than_k_zeros_and_more_than_k_ones(l, r):\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            return total - at_most_k_zeros - at_most_k_ones + count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n        \n        def count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r):\n            count = 0\n            zero_count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                one_count += 1 if s[right] == '1' else 0\n                while zero_count > k or one_count > k:\n                    if s[left] == '0':\n                        zero_count -= 1\n                    else:\n                        one_count -= 1\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_and_ones = count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            answer.append(at_most_k_zeros + at_most_k_ones - at_most_k_zeros_and_ones)\n        return answer",
  "passed_solutions": [
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_more_than_k_zeros_and_more_than_k_ones(l, r):\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            return total - at_most_k_zeros - at_most_k_ones + count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n        \n        def count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r):\n            count = 0\n            zero_count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                one_count += 1 if s[right] == '1' else 0\n                while zero_count > k or one_count > k:\n                    if s[left] == '0':\n                        zero_count -= 1\n                    else:\n                        one_count -= 1\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_and_ones = count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            answer.append(at_most_k_zeros + at_most_k_ones - at_most_k_zeros_and_ones)\n        return answer",
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def total_substrings(l, r):\n            length = r - l + 1\n            return (length * (length + 1)) // 2\n        \n        def count_substrings_with_more_than_k_zeros_and_more_than_k_ones(l, r):\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_or_ones = at_most_k_zeros + at_most_k_ones - count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            return total - at_most_k_zeros_or_ones\n        \n        def count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r):\n            count = 0\n            zero_count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                one_count += 1 if s[right] == '1' else 0\n                while zero_count > k or one_count > k:\n                    if s[left] == '0':\n                        zero_count -= 1\n                    else:\n                        one_count -= 1\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_and_ones = count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            # Using inclusion-exclusion principle\n            at_least_one_condition = at_most_k_zeros + at_most_k_ones - at_most_k_zeros_and_ones\n            answer.append(at_least_one_condition)\n        \n        return answer"
  ],
  "all_solutions": [
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def total_substrings(l, r):\n            length = r - l + 1\n            return (length * (length + 1)) // 2\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            # Using inclusion-exclusion principle to avoid double-counting substrings that satisfy both conditions\n            both = total - (total - at_most_k_zeros) - (total - at_most_k_ones) + (total - at_most_k_zeros - at_most_k_ones + total)\n            answer.append(both)\n        \n        return answer",
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_more_than_k_zeros_and_more_than_k_ones(l, r):\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            return total - at_most_k_zeros - at_most_k_ones + count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n        \n        def count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r):\n            count = 0\n            zero_count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                one_count += 1 if s[right] == '1' else 0\n                while zero_count > k or one_count > k:\n                    if s[left] == '0':\n                        zero_count -= 1\n                    else:\n                        one_count -= 1\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = (r - l + 1) * (r - l + 2) // 2\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_and_ones = count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            answer.append(at_most_k_zeros + at_most_k_ones - at_most_k_zeros_and_ones)\n        return answer",
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_more_than_k_zeros(l, r):\n            zero_count = prefix_zeros[r+1] - prefix_zeros[l]\n            count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_more_than_k_ones(l, r):\n            one_count = prefix_ones[r+1] - prefix_ones[l]\n            count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def total_substrings(l, r):\n            length = r - l + 1\n            return (length * (length + 1)) // 2\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = total_substrings(l, r)\n            more_than_k_zeros = count_substrings_with_more_than_k_zeros(l, r)\n            more_than_k_ones = count_substrings_with_more_than_k_ones(l, r)\n            both_more = 0  # Substrings with more than k zeros and more than k ones\n            \n            # Calculate substrings with more than k zeros and more than k ones\n            zero_exceed = prefix_zeros[r+1] - prefix_zeros[l] - k\n            one_exceed = prefix_ones[r+1] - prefix_ones[l] - k\n            if zero_exceed > 0 and one_exceed > 0:\n                both_more = max(0, (r - l + 1 - zero_exceed - one_exceed + 1))\n            \n            invalid = more_than_k_zeros + more_than_k_ones - both_more\n            answer.append(total - invalid)\n        \n        return answer",
    "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def total_substrings(l, r):\n            length = r - l + 1\n            return (length * (length + 1)) // 2\n        \n        def count_substrings_with_more_than_k_zeros_and_more_than_k_ones(l, r):\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_or_ones = at_most_k_zeros + at_most_k_ones - count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            return total - at_most_k_zeros_or_ones\n        \n        def count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r):\n            count = 0\n            zero_count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                one_count += 1 if s[right] == '1' else 0\n                while zero_count > k or one_count > k:\n                    if s[left] == '0':\n                        zero_count -= 1\n                    else:\n                        one_count -= 1\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            at_most_k_zeros_and_ones = count_substrings_with_at_most_k_zeros_and_at_most_k_ones(l, r)\n            # Using inclusion-exclusion principle\n            at_least_one_condition = at_most_k_zeros + at_most_k_ones - at_most_k_zeros_and_ones\n            answer.append(at_least_one_condition)\n        \n        return answer"
  ],
  "total_candidates": 4,
  "nodes_explored": 4,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_zeros[i+1] = prefix_zeros[i] + (1 if s[i] == '0' else 0)\n            prefix_ones[i+1] = prefix_ones[i] + (1 if s[i] == '1' else 0)\n        \n        def count_substrings_with_at_most_k_zeros(l, r):\n            count = 0\n            zero_count = 0\n            left = l\n            for right in range(l, r+1):\n                zero_count += 1 if s[right] == '0' else 0\n                while zero_count > k:\n                    zero_count -= 1 if s[left] == '0' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def count_substrings_with_at_most_k_ones(l, r):\n            count = 0\n            one_count = 0\n            left = l\n            for right in range(l, r+1):\n                one_count += 1 if s[right] == '1' else 0\n                while one_count > k:\n                    one_count -= 1 if s[left] == '1' else 0\n                    left += 1\n                count += (right - left + 1)\n            return count\n        \n        def total_substrings(l, r):\n            length = r - l + 1\n            return (length * (length + 1)) // 2\n        \n        answer = []\n        for query in queries:\n            l, r = query\n            total = total_substrings(l, r)\n            at_most_k_zeros = count_substrings_with_at_most_k_zeros(l, r)\n            at_most_k_ones = count_substrings_with_at_most_k_ones(l, r)\n            # Using inclusion-exclusion principle to avoid double-counting substrings that satisfy both conditions\n            both = total - (total - at_most_k_zeros) - (total - at_most_k_ones) + (total - at_most_k_zeros - at_most_k_ones + total)\n            answer.append(both)\n        \n        return answer",
      "solution_hash": "bc4181098ebe70a2fae797a9f1f12a6b55e4c8d03a91db881971c893179bd342",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpi6l7s07_.py\", line 211, in <module>\n    check(Solution().countKConstraintSubstrings)\n  File \"/scratch/local/22242033/tmpi6l7s07_.py\", line 135, in check\n    assert candidate(s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]) == [15, 9, 3]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpi6l7s07_.py` failed. (See above for error)\n",
        "execution_time": 13.228134870529175,
        "failed_tests": [
          {
            "input": "s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]",
            "expected": "[15, 9, 3]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpi6l7s07_.py\", line 211, in <module>\n    check(Solution().countKConstraintSubstrings)\n  File \"/scratch/local/22242033/tmpi6l7s07_.py\", line 135, in check\n    assert candidate(s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]) == [15, 9, 3]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpi6l7s07_.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_2",
        "1_3"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 4,
    "candidates_generated": 4,
    "tests_passed": 2,
    "tests_failed": 2,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.228134870529175,
      13.233277797698975,
      13.233971118927002,
      13.23400592803955
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 4,
      "unique_ratio": 1.0,
      "similarity_score": 0.921573349010555,
      "solution_lengths": {
        "min": 1982,
        "max": 3100,
        "avg": 2558.75
      },
      "algorithm_approaches": {
        "sliding_window": 4
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 4
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 6,
            "max": 8,
            "avg": 7.0,
            "variance": 1.0
          },
          "if_count": {
            "min": 6,
            "max": 9,
            "avg": 7.75,
            "variance": 1.6875
          },
          "else_count": {
            "min": 6,
            "max": 9,
            "avg": 7.5,
            "variance": 2.25
          },
          "return_count": {
            "min": 4,
            "max": 6,
            "avg": 4.75,
            "variance": 0.6875
          },
          "assignment_count": {
            "min": 32,
            "max": 50,
            "avg": 41.25,
            "variance": 55.6875
          },
          "class_method_count": {
            "min": 4,
            "max": 6,
            "avg": 4.75,
            "variance": 0.6875
          },
          "line_count": {
            "min": 51,
            "max": 76,
            "avg": 63.25,
            "variance": 90.6875
          },
          "char_count": {
            "min": 1982,
            "max": 3100,
            "avg": 2558.75,
            "variance": 184050.6875
          },
          "max_indent": {
            "min": 20,
            "max": 24,
            "avg": 22.0,
            "variance": 4.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 4
        },
        "avg_complexity_metrics": {
          "avg_line_count": 63.25,
          "avg_loop_count": 7.0,
          "avg_condition_count": 15.25,
          "avg_method_count": 4.75,
          "avg_assignment_count": 41.25,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.25
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]": 2
      },
      "first_failing_tests": {
        "s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]": 2
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 1,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->unknown": 2,
        "assertion_failure->index_error": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 1,
        "avg_depth": 0.75,
        "solutions_per_depth": {
          "0": 1,
          "1": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.6,
        "pass@3": 1.0,
        "pass@5": 1.0
      },
      "solutions_evaluated": 5,
      "passing_solution_depths": {
        "min": 1,
        "max": 1,
        "avg": 1.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.5,
        "branch_success_rate": 0.5,
        "test_success_rate": 0.5
      },
      "test_results": {
        "total": 4,
        "passed": 2,
        "failed": 2,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 1,
        "total_improvements": 2,
        "recovery_rate": 2.0
      },
      "top_errors": [
        [
          "assertion_failure",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "s = \"010101\",k = 1,queries = [[0, 5], [1, 4], [2, 3]]",
          2
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 431.303692817688,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.6,
      "pass@3": 1.0,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: string index out of range",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ]
      ]
    },
    "solutions_evaluated": 5,
    "test_cases": 1
  }
}