{
  "problem_id": "count-almost-equal-pairs-ii",
  "problem_title": "",
  "difficulty": "Hard",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Function to get the frequency tuple of digits in a number\n        def get_freq_tuple(num):\n            digits = str(num)\n            return tuple(sorted(digits))\n        \n        # Group numbers by their frequency tuple\n        freq_groups = defaultdict(int)\n        for num in nums:\n            freq_tuple = get_freq_tuple(num)\n            freq_groups[freq_tuple] += 1\n        \n        # Calculate the number of pairs in each group\n        total_pairs = 0\n        for count in freq_groups.values():\n            if count >= 2:\n                total_pairs += (count * (count - 1)) // 2\n        \n        return total_pairs"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Function to get the frequency tuple of digits in a number\n        def get_freq_tuple(num):\n            digits = str(num)\n            return tuple(sorted(digits))\n        \n        # Group numbers by their frequency tuple\n        freq_groups = defaultdict(int)\n        for num in nums:\n            freq_tuple = get_freq_tuple(num)\n            freq_groups[freq_tuple] += 1\n        \n        # Calculate the number of pairs in each group\n        total_pairs = 0\n        for count in freq_groups.values():\n            if count >= 2:\n                total_pairs += (count * (count - 1)) // 2\n        \n        return total_pairs",
      "solution_hash": "856a43d084ee651e476b196e2ec4c5fedef0c92d371c62f73783898c16c49c9e",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpr6_z2o1k.py\", line 243, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/22242033/tmpr6_z2o1k.py\", line 111, in check\n    assert candidate(nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]) == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpr6_z2o1k.py` failed. (See above for error)\n",
        "execution_time": 13.239262819290161,
        "failed_tests": [
          {
            "input": "nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]",
            "expected": "4",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpr6_z2o1k.py\", line 243, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/22242033/tmpr6_z2o1k.py\", line 111, in check\n    assert candidate(nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]) == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpr6_z2o1k.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 0,
    "tests_failed": 1,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.239262819290161
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 757,
        "max": 757,
        "avg": 757.0
      },
      "algorithm_approaches": {
        "hash_table": 1
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 1
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 0,
            "max": 0,
            "avg": 0.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 7,
            "max": 7,
            "avg": 7.0,
            "variance": 0.0
          },
          "class_method_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 23,
            "max": 23,
            "avg": 23.0,
            "variance": 0.0
          },
          "char_count": {
            "min": 757,
            "max": 757,
            "avg": 757.0,
            "variance": 0.0
          },
          "max_indent": {
            "min": 16,
            "max": 16,
            "avg": 16.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 23.0,
          "avg_loop_count": 2.0,
          "avg_condition_count": 1.0,
          "avg_method_count": 2.0,
          "avg_assignment_count": 7.0,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 1.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]": 1
      },
      "first_failing_tests": {
        "nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 0,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 1,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0,
        "test_success_rate": 0.0
      },
      "test_results": {
        "total": 1,
        "passed": 0,
        "failed": 1,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 1,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "assertion_failure",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [123456, 654321, 12345, 54321, 1234, 4321, 123, 321, 12, 21, 1]",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1095.848616361618,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}