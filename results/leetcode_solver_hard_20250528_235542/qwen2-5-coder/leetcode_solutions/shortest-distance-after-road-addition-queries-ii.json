{
  "problem_id": "shortest-distance-after-road-addition-queries-ii",
  "problem_title": "",
  "difficulty": "Hard",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path calculation\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path considering only the new edge\n            pq = [(dist[u] + 1, v)]\n            seen = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in seen:\n                    continue\n                seen.add(node)\n                if d < dist[node]:\n                    dist[node] = d\n                    for neighbor, weight in graph[node]:\n                        if neighbor not in seen:\n                            heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Recalculate shortest paths after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from node 0\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update distances only for nodes affected by the new edge\n            pq = [(dist[u] + 1, v)]\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from node 0\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from node 0\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Use a set to keep track of visited nodes\n            visited = set()\n            # Priority queue to process nodes with updated distances\n            pq = [(dist[u] + 1, v)]\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from node 0\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Use a set to track visited nodes\n            visited = set()\n            pq = [(dist[u] + 1, v)]\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path only for nodes affected by the new edge\n            pq = [(dist[u] + 1, v)]\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute the shortest path from 0 to n-1\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Use a priority queue to update distances from u onwards\n            pq = [(dist[u] + 1, v)]\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Re-run Dijkstra's algorithm after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        import heapq\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heapq.heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heapq.heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Initialize distances with the default path lengths\n        dist = [inf] * n\n        dist[0] = 0\n        pq = [(0, 0)]  # (distance, node)\n        \n        # Perform initial Dijkstra's algorithm to set up the base shortest paths\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        \n        result = []\n        for u, v in queries:\n            # Add the new edge\n            graph[u].append((v, 1))\n            \n            # Update the shortest paths considering the new edge\n            pq = [(dist[u], u)]\n            visited = set()\n            while pq:\n                d, u = heappop(pq)\n                if u in visited:\n                    continue\n                visited.add(u)\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        forward_graph = defaultdict(list)\n        reverse_graph = defaultdict(list)\n        for i in range(n - 1):\n            forward_graph[i].append((i + 1, 1))\n            reverse_graph[i + 1].append((i, 1))\n        \n        # Initialize distances with the default path lengths\n        dist = [inf] * n\n        dist[0] = 0\n        \n        # Perform initial Dijkstra's algorithm to set up the base shortest paths\n        pq = [(0, 0)]  # (distance, node)\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in forward_graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        \n        result = []\n        for u, v in queries:\n            # Add the new edge to both forward and reverse graphs\n            forward_graph[u].append((v, 1))\n            reverse_graph[v].append((u, 1))\n            \n            # Relax distances from the new edge's destination backwards\n            pq = [(dist[v], v)]\n            visited = set()\n            while pq:\n                d, u = heappop(pq)\n                if u in visited:\n                    continue\n                visited.add(u)\n                for prev, w in reverse_graph[u]:\n                    if dist[prev] > dist[u] + w:\n                        dist[prev] = dist[u] + w\n                        heappush(pq, (dist[prev], prev))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Initialize distances with the default path lengths\n        dist = [inf] * n\n        dist[0] = 0\n        pq = [(0, 0)]  # (distance, node)\n        \n        # Perform initial Dijkstra's algorithm to set up the base shortest paths\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        \n        result = []\n        for u, v in queries:\n            # Add the new edge\n            graph[u].append((v, 1))\n            \n            # Use a set to keep track of nodes whose distances need to be updated\n            to_update = {u}\n            updated_distances = {u: dist[u]}\n            \n            while to_update:\n                current = to_update.pop()\n                for neighbor, weight in graph[current]:\n                    if dist[current] + weight < dist[neighbor]:\n                        dist[neighbor] = dist[current] + weight\n                        updated_distances[neighbor] = dist[neighbor]\n                        to_update.add(neighbor)\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the forward and reverse graphs\n        forward_graph = defaultdict(list)\n        reverse_graph = defaultdict(list)\n        for i in range(n - 1):\n            forward_graph[i].append((i + 1, 1))\n            reverse_graph[i + 1].append((i, 1))\n        \n        # Initialize distances with the default path lengths\n        dist = [inf] * n\n        dist[0] = 0\n        \n        # Perform initial Dijkstra's algorithm to set up the base shortest paths\n        pq = [(0, 0)]  # (distance, node)\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in forward_graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        \n        result = []\n        for u, v in queries:\n            # Add the new edge to both forward and reverse graphs\n            forward_graph[u].append((v, 1))\n            reverse_graph[v].append((u, 1))\n            \n            # Update the shortest paths considering the new edge\n            # Use a priority queue to update the shortest paths from the end towards the start\n            pq = [(dist[v], v)]\n            updated_dist = dist[:]\n            while pq:\n                d, u = heappop(pq)\n                if d > updated_dist[u]:\n                    continue\n                for v, w in reverse_graph[u]:\n                    if updated_dist[u] + w < updated_dist[v]:\n                        updated_dist[v] = updated_dist[u] + w\n                        heappush(pq, (updated_dist[v], v))\n            \n            # Update the main distance array with the new shortest paths\n            dist = updated_dist\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path calculation\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Relax the path through the new edge\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                # Update distances for nodes reachable from v\n                pq = [(dist[v], v)]\n                while pq:\n                    d, u = heappop(pq)\n                    if d > dist[u]:\n                        continue\n                    for v, w in graph[u]:\n                        if dist[u] + w < dist[v]:\n                            dist[v] = dist[u] + w\n                            heappush(pq, (dist[v], v))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        forward_graph = defaultdict(list)\n        reverse_graph = defaultdict(list)\n        for i in range(n - 1):\n            forward_graph[i].append((i + 1, 1))\n            reverse_graph[i + 1].append((i, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra(graph, start, dist):\n            pq = [(0, start)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n        \n        # Initial shortest path calculation\n        dist = [inf] * n\n        dist[0] = 0\n        dijkstra(forward_graph, 0, dist)\n        \n        result = []\n        for u, v in queries:\n            # Add the new edge to both graphs\n            forward_graph[u].append((v, 1))\n            reverse_graph[v].append((u, 1))\n            \n            # Perform backward Dijkstra's from v to update affected paths\n            temp_dist = dist[:]\n            dijkstra(reverse_graph, v, temp_dist)\n            \n            # Update the main distance array with the new shortest paths\n            for i in range(n):\n                dist[i] = min(dist[i], temp_dist[i])\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Initialize the distance array with infinity\n        dist = [inf] * n\n        dist[0] = 0\n        \n        # Priority queue for Dijkstra's algorithm\n        pq = [(0, 0)]  # (distance, node)\n        \n        # Process the initial graph\n        while pq:\n            d, u = heappop(pq)\n            if d > dist[u]:\n                continue\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n        \n        result = []\n        for u, v in queries:\n            # Add the new road\n            graph[u].append((v, 1))\n            \n            # Relax the edges starting from u\n            pq = [(dist[u], u)]\n            visited = set()\n            while pq:\n                d, u = heappop(pq)\n                if u in visited:\n                    continue\n                visited.add(u)\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the segment tree\n        seg_tree = [inf] * (4 * n)\n        \n        # Function to build the segment tree\n        def build(node, start, end):\n            if start == end:\n                seg_tree[node] = 0 if start == 0 else inf\n            else:\n                mid = (start + end) // 2\n                build(2 * node, start, mid)\n                build(2 * node + 1, mid + 1, end)\n                seg_tree[node] = min(seg_tree[2 * node], seg_tree[2 * node + 1])\n        \n        # Function to update the segment tree\n        def update(node, start, end, idx, val):\n            if start == end:\n                seg_tree[node] = val\n            else:\n                mid = (start + end) // 2\n                if start <= idx <= mid:\n                    update(2 * node, start, mid, idx, val)\n                else:\n                    update(2 * node + 1, mid + 1, end, idx, val)\n                seg_tree[node] = min(seg_tree[2 * node], seg_tree[2 * node + 1])\n        \n        # Function to query the segment tree\n        def query(node, start, end, l, r):\n            if r < start or end < l:\n                return inf\n            if l <= start and end <= r:\n                return seg_tree[node]\n            mid = (start + end) // 2\n            left_query = query(2 * node, start, mid, l, r)\n            right_query = query(2 * node + 1, mid + 1, end, l, r)\n            return min(left_query, right_query)\n        \n        # Build the initial segment tree\n        build(1, 0, n - 1)\n        \n        result = []\n        for u, v in queries:\n            # Update the segment tree for the new road\n            current_min = query(1, 0, n - 1, u + 1, v - 1)\n            new_distance = query(1, 0, n - 1, 0, u) + 1\n            update(1, 0, n - 1, v, min(new_distance, current_min + 1))\n            \n            # Query the shortest path from 0 to n-1\n            result.append(query(1, 0, n - 1, 0, n - 1))\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm and return the shortest distance from 0 to n-1\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            # Add the new road\n            graph[u].append((v, 1))\n            \n            # Recalculate the shortest path from 0 to n-1\n            shortest_path = dijkstra()\n            result.append(shortest_path)\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Step 1: Preprocess the shortest paths for the initial graph\n        dist = [inf] * n\n        dist[0] = 0\n        for i in range(n - 1):\n            dist[i + 1] = dist[i] + 1\n        \n        # Step 2: Process each query and update the shortest paths\n        result = []\n        for u, v in queries:\n            # Update the shortest path for nodes affected by the new road\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                # Propagate the change to subsequent nodes\n                for i in range(v + 1, n):\n                    if dist[i] > dist[i - 1] + 1:\n                        dist[i] = dist[i - 1] + 1\n                    else:\n                        break\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            result.append(dijkstra())  # Find the shortest path after adding the new road\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update the shortest paths affected by the new road\n            pq = [(dist[u] + 1, v)]  # (new distance, node)\n            visited = set()\n            \n            while pq:\n                d, u = heappop(pq)\n                if u in visited or d >= dist[u]:\n                    continue\n                visited.add(u)\n                dist[u] = d\n                if u == n - 1:\n                    break\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        heappush(pq, (dist[u] + w, v))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recompute shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update the shortest path from u to n-1\n            pq = [(dist[u] + 1, v)]  # (new distance, node)\n            visited = set()\n            \n            while pq:\n                d, node = heappop(pq)\n                if node in visited:\n                    continue\n                visited.add(node)\n                \n                if d < dist[node]:\n                    dist[node] = d\n                    if node == n - 1:\n                        break\n                    \n                    for neighbor, weight in graph[node]:\n                        if neighbor not in visited:\n                            heappush(pq, (d + weight, neighbor))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recompute shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the reverse graph\n        reverse_graph = defaultdict(list)\n        for i in range(n - 1):\n            reverse_graph[i + 1].append(i)\n        \n        # Initialize the shortest distances from each node to n-1\n        dist = [inf] * n\n        dist[n - 1] = 0\n        \n        # Perform a reverse BFS to calculate initial shortest distances\n        queue = deque([n - 1])\n        while queue:\n            u = queue.popleft()\n            for v in reverse_graph[u]:\n                if dist[u] + 1 < dist[v]:\n                    dist[v] = dist[u] + 1\n                    queue.append(v)\n        \n        result = []\n        for u, v in queries:\n            # Add the new road to the reverse graph\n            reverse_graph[v].append(u)\n            \n            # Update the shortest path from u to n-1\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                queue = deque([v])\n                while queue:\n                    u = queue.popleft()\n                    for v in reverse_graph[u]:\n                        if dist[u] + 1 < dist[v]:\n                            dist[v] = dist[u] + 1\n                            queue.append(v)\n            \n            result.append(dist[0] if dist[0] != inf else -1)\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update distances from u onwards\n            pq = [(dist[u], u)]\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recompute shortest paths from 0\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist\n        \n        # Initial shortest distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update distances from u onwards\n            pq = [(dist[u], u)]\n            visited = set()\n            while pq:\n                d, u = heappop(pq)\n                if u in visited:\n                    continue\n                visited.add(u)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            result.append(dist[n - 1])\n        \n        return result"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        # Process each query and compute the shortest path after each addition\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
      "solution_hash": "9250294676337d72354d743ed11fb79232d648cb0f33784988f04d94414f2bcb",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp7gwizpli.py` failed. (See above for error)\n",
        "execution_time": 14.431356430053711,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp7gwizpli.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        import heapq\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heapq.heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heapq.heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
      "solution_hash": "994ed4a61f5c4df3d1243d88f0fb56e4757ee49e1b1d64c6e796695119864f3a",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmppuxukrmv.py\", line 155, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmppuxukrmv.py\", line 115, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmppuxukrmv.py` failed. (See above for error)\n",
        "execution_time": 13.374201536178589,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmppuxukrmv.py\", line 155, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmppuxukrmv.py\", line 115, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmppuxukrmv.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            \n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            \n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            result.append(dijkstra())  # Find the shortest path after adding the new road\n        \n        return result",
      "solution_hash": "9250294676337d72354d743ed11fb79232d648cb0f33784988f04d94414f2bcb",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp7gwizpli.py` failed. (See above for error)\n",
        "execution_time": 14.431356430053711,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/22242033/tmp7gwizpli.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp7gwizpli.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 39,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      14.431356430053711,
      13.795886039733887,
      14.029927253723145,
      14.029927253723145,
      14.029927253723145,
      13.661307096481323,
      14.029927253723145,
      13.947318315505981,
      13.947318315505981,
      13.661307096481323,
      14.160551071166992,
      13.661307096481323,
      14.029927253723145,
      13.374201536178589,
      13.504328966140747,
      13.614538192749023,
      13.62964940071106,
      13.69631552696228,
      13.664612293243408,
      13.304299592971802,
      13.304299592971802,
      13.308858394622803,
      13.504328966140747,
      13.407320261001587,
      13.261462688446045,
      13.438219785690308,
      14.431356430053711,
      13.49826169013977,
      14.029927253723145,
      14.029927253723145,
      14.029927253723145,
      13.761959075927734,
      14.029927253723145,
      14.691749095916748,
      14.029927253723145,
      13.486368179321289,
      14.029927253723145,
      14.029927253723145,
      13.483087301254272
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 22,
      "unique_ratio": 0.5641025641025641,
      "similarity_score": 0.9221716924171484,
      "solution_lengths": {
        "min": 905,
        "max": 2063,
        "avg": 1363.3076923076924
      },
      "algorithm_approaches": {
        "breadth_first_search": 1,
        "binary_search": 1,
        "hash_table": 36,
        "simulation": 1
      },
      "feature_diversity": 0.8461538461538461,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 39
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 39
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.3076923076923077,
            "count": 12
          },
          "uses_heap": {
            "true_ratio": 0.9230769230769231,
            "count": 36
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.02564102564102564,
            "count": 1
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.02564102564102564,
            "count": 1
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.02564102564102564,
            "count": 1
          },
          "nested_loops": {
            "true_ratio": 0.9743589743589743,
            "count": 38
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 6,
            "avg": 4.794871794871795,
            "variance": 1.3938198553583165
          },
          "if_count": {
            "min": 2,
            "max": 6,
            "avg": 3.230769230769231,
            "variance": 2.0236686390532537
          },
          "else_count": {
            "min": 0,
            "max": 4,
            "avg": 0.15384615384615385,
            "variance": 0.4378698224852074
          },
          "return_count": {
            "min": 1,
            "max": 4,
            "avg": 1.8461538461538463,
            "variance": 0.28402366863905304
          },
          "assignment_count": {
            "min": 6,
            "max": 20,
            "avg": 10.282051282051283,
            "variance": 8.766600920447074
          },
          "class_method_count": {
            "min": 1,
            "max": 4,
            "avg": 1.8717948717948718,
            "variance": 0.2656147271531884
          },
          "line_count": {
            "min": 24,
            "max": 55,
            "avg": 39.23076923076923,
            "variance": 69.56213017751482
          },
          "char_count": {
            "min": 905,
            "max": 2063,
            "avg": 1363.3076923076924,
            "variance": 99180.21301775146
          },
          "max_indent": {
            "min": 20,
            "max": 28,
            "avg": 24.307692307692307,
            "variance": 1.9566074950690335
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 39
        },
        "avg_complexity_metrics": {
          "avg_line_count": 39.23076923076923,
          "avg_loop_count": 4.794871794871795,
          "avg_condition_count": 3.3846153846153846,
          "avg_method_count": 1.8717948717948718,
          "avg_assignment_count": 10.282051282051283,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]": 33,
        "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]": 6
      },
      "first_failing_tests": {
        "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]": 33,
        "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]": 6
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 12,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 36
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.025000000000000022,
        "pass@3": 0.07499999999999996,
        "pass@5": 0.125,
        "pass@10": 0.25
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0,
        "test_success_rate": 0.0
      },
      "test_results": {
        "total": 39,
        "passed": 0,
        "failed": 39,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "assertion_failure",
          12
        ]
      ],
      "hardest_test_cases": [
        [
          "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
          33
        ],
        [
          "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]",
          6
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1620.7023243904114,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.025000000000000022,
      "pass@3": 0.07499999999999996,
      "pass@5": 0.125,
      "pass@10": 0.25
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}