{
  "problem_id": "find-the-count-of-monotonic-pairs-i",
  "problem_title": "",
  "difficulty": "Hard",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and arr2[i] = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            k = nums[0] - j\n            if k >= 0:\n                dp[0][j][k] = 1\n        \n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    for prev_j in range(j + 1):\n                        for prev_k in range(k, max_val + 1):\n                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prev_j][prev_k]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                result = (result + dp[n - 1][j][k]) % MOD\n        \n        return result",
  "passed_solutions": [
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and arr2[i] = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            k = nums[0] - j\n            if k >= 0:\n                dp[0][j][k] = 1\n        \n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    for prev_j in range(j + 1):\n                        for prev_k in range(k, max_val + 1):\n                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prev_j][prev_k]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                result = (result + dp[n - 1][j][k]) % MOD\n        \n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 2)\n            for j in range(max_val + 1):\n                prefix_sum[j + 1] = (prefix_sum[j] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                dp[i][j] = prefix_sum[nums[i] - j + 1]\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and arr2[i] = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j][nums[0] - j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                for k in range(nums[i] - j + 1):\n                    if j > 0:\n                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - 1][k]) % MOD\n                    if k < max_val:\n                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k + 1]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(nums[-1] + 1):\n            result = (result + dp[n - 1][j][nums[-1] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp1[i][j] means the number of ways to have arr1[i] = j\n        dp1 = [[0] * (max_val + 1) for _ in range(n)]\n        # dp2[i][j] means the number of ways to have arr2[i] = j\n        dp2 = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp1[0][j] = 1\n            dp2[0][nums[0] - j] = 1\n        \n        # Fill the dp tables\n        for i in range(1, n):\n            prefix_sum1 = 0\n            prefix_sum2 = 0\n            for j in range(max_val + 1):\n                prefix_sum1 = (prefix_sum1 + dp1[i - 1][j]) % MOD\n                dp1[i][j] = prefix_sum1 if j <= nums[i] else 0\n                \n                prefix_sum2 = (prefix_sum2 + dp2[i - 1][j]) % MOD\n                dp2[i][nums[i] - j] = prefix_sum2 if nums[i] - j >= 0 else 0\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(nums[-1] + 1):\n            result = (result + dp1[n - 1][j] * dp2[n - 1][nums[-1] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp1[i][j] means the number of ways to have arr1[i] = j\n        dp1 = [[0] * (max_val + 1) for _ in range(n)]\n        # dp2[i][j] means the number of ways to have arr2[i] = j\n        dp2 = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp1[0][j] = 1\n            dp2[0][nums[0] - j] = 1\n        \n        # Fill the dp tables\n        for i in range(1, n):\n            prefix_sum1 = 0\n            prefix_sum2 = 0\n            for j in range(max_val + 1):\n                prefix_sum1 = (prefix_sum1 + dp1[i - 1][j]) % MOD\n                dp1[i][j] = prefix_sum1 if j <= nums[i] else 0\n                \n                prefix_sum2 = (prefix_sum2 + dp2[i - 1][j]) % MOD\n                dp2[i][nums[i] - j] = prefix_sum2 if nums[i] - j >= 0 else 0\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(nums[-1] + 1):\n            result = (result + dp1[n - 1][j] * dp2[n - 1][nums[-1] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp_inc[i][j] means the number of ways to have arr1[i] = j and arr1 is non-decreasing up to i\n        dp_inc = [[0] * (max_val + 1) for _ in range(n)]\n        # dp_dec[i][j] means the number of ways to have arr2[i] = j and arr2 is non-increasing up to i\n        dp_dec = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp_inc[0][j] = 1\n            dp_dec[0][j] = 1\n        \n        # Fill the dp_inc table\n        for i in range(1, n):\n            prefix_sum = 0\n            for j in range(max_val + 1):\n                prefix_sum = (prefix_sum + dp_inc[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp_inc[i][j] = prefix_sum\n        \n        # Fill the dp_dec table\n        for i in range(1, n):\n            suffix_sum = 0\n            for j in range(max_val, -1, -1):\n                suffix_sum = (suffix_sum + dp_dec[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp_dec[i][j] = suffix_sum\n        \n        # Calculate the result by summing up all valid configurations\n        result = 0\n        for j in range(max_val + 1):\n            if j <= nums[-1]:\n                result = (result + dp_inc[n - 1][j] * dp_dec[n - 1][nums[-1] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 2)\n            for j in range(max_val + 1):\n                prefix_sum[j + 1] = (prefix_sum[j] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                dp[i][j] = (prefix_sum[j + 1] - prefix_sum[max(0, nums[i] - j)] + MOD) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][nums[i]]\n                else:\n                    dp[i][j] = (dp[i][j - 1] + dp[i - 1][nums[i] - j]) % MOD\n                if nums[i] - j < 0:\n                    break\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j and arr2[i] = nums[i] - j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            # Prefix sum to help calculate the number of valid ways efficiently\n            prefix_sum = [0] * (max_val + 2)\n            for j in range(max_val + 1):\n                prefix_sum[j + 1] = (prefix_sum[j] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                # Ensure arr1 is non-decreasing and arr2 is non-increasing\n                dp[i][j] = (prefix_sum[j + 1] - prefix_sum[max(0, nums[i] - j)] + MOD) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                # arr1[i] = j, arr2[i] = nums[i] - j\n                # Ensure arr1 is non-decreasing and arr2 is non-increasing\n                if j >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n                if j - 1 >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MOD\n                if nums[i] - j >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][nums[i] - j]) % MOD\n                if nums[i] - j - 1 >= 0:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][nums[i] - j - 1] + MOD) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and arr2[i] = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j][nums[0] - j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                for k in range(nums[i] - j + 1):\n                    for prev_j in range(j + 1):\n                        for prev_k in range(k, max_val + 1):\n                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prev_j][prev_k]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                result = (result + dp[n - 1][j][k]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp1[i][j] means the number of ways to have arr1[i] = j and arr1 is non-decreasing up to i\n        dp1 = [[0] * (max_val + 1) for _ in range(n)]\n        # dp2[i][j] means the number of ways to have arr2[i] = j and arr2 is non-increasing up to i\n        dp2 = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp1[0][j] = 1\n            dp2[0][nums[0] - j] = 1\n        \n        # Fill the dp1 table\n        for i in range(1, n):\n            prefix_sum = 0\n            for j in range(max_val + 1):\n                prefix_sum = (prefix_sum + dp1[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp1[i][j] = prefix_sum\n        \n        # Fill the dp2 table\n        for i in range(1, n):\n            suffix_sum = 0\n            for j in range(max_val, -1, -1):\n                suffix_sum = (suffix_sum + dp2[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp2[i][nums[i] - j] = suffix_sum\n        \n        # Calculate the result by summing up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            result = (result + dp1[n - 1][j] * dp2[n - 1][nums[n - 1] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            prefix_sum = 0\n            for j in range(max_val + 1):\n                if j > nums[i]:\n                    break\n                prefix_sum = (prefix_sum + dp[i - 1][j]) % MOD\n                k = nums[i] - j\n                if k >= 0:\n                    dp[i][j] = prefix_sum\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # Prefix sum array to store the number of ways to form non-decreasing sequences\n        prefix_sum = [[0] * (max_val + 1) for _ in range(n)]\n        # Suffix sum array to store the number of ways to form non-increasing sequences\n        suffix_sum = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element for prefix_sum\n        for j in range(nums[0] + 1):\n            prefix_sum[0][j] = 1\n        \n        # Initialize the last element for suffix_sum\n        for j in range(nums[-1] + 1):\n            suffix_sum[-1][j] = 1\n        \n        # Fill the prefix_sum array\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                prefix_sum[i][j] = prefix_sum[i - 1][j]\n                if j > 0:\n                    prefix_sum[i][j] = (prefix_sum[i][j] + prefix_sum[i][j - 1]) % MOD\n        \n        # Fill the suffix_sum array\n        for i in range(n - 2, -1, -1):\n            for j in range(nums[i] + 1):\n                suffix_sum[i][j] = suffix_sum[i + 1][j]\n                if j < max_val:\n                    suffix_sum[i][j] = (suffix_sum[i][j] + suffix_sum[i][j + 1]) % MOD\n        \n        # Calculate the result\n        result = 0\n        for i in range(n):\n            for j in range(nums[i] + 1):\n                result = (result + prefix_sum[i][j] * suffix_sum[i][nums[i] - j]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 1)\n            for j in range(max_val + 1):\n                prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    dp[i][j] = prefix_sum[k]\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and max(arr2[0..i]) = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            dp[0][j][nums[0] - j] = 1\n        \n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                for k in range(nums[i] - j + 1):\n                    # arr1[i] = j, arr2[i] = nums[i] - j\n                    # Ensure arr1[i] >= arr1[i-1] and arr2[i] <= arr2[i-1]\n                    for prev_j in range(j + 1):\n                        for prev_k in range(k, max_val + 1):\n                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prev_j][prev_k]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                result = (result + dp[n - 1][j][k]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp_inc[i][j] means the number of ways to have arr1[0..i] ending with j and being non-decreasing\n        dp_inc = [[0] * (max_val + 1) for _ in range(n)]\n        # dp_dec[i][j] means the number of ways to have arr2[0..i] ending with j and being non-increasing\n        dp_dec = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row for both dp_inc and dp_dec\n        for j in range(nums[0] + 1):\n            dp_inc[0][j] = 1\n            dp_dec[0][nums[0] - j] = 1\n        \n        # Fill dp_inc\n        for i in range(1, n):\n            prefix_sum = 0\n            for j in range(max_val + 1):\n                prefix_sum = (prefix_sum + dp_inc[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp_inc[i][j] = prefix_sum\n        \n        # Fill dp_dec\n        for i in range(1, n):\n            suffix_sum = 0\n            for j in range(max_val, -1, -1):\n                suffix_sum = (suffix_sum + dp_dec[i - 1][j]) % MOD\n                if j <= nums[i]:\n                    dp_dec[i][nums[i] - j] = suffix_sum\n        \n        # Calculate the result by combining dp_inc and dp_dec\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                if j + k == nums[-1]:\n                    result = (result + dp_inc[n - 1][j] * dp_dec[n - 1][k]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j for the first i+1 elements\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                # arr1[i] = j, arr2[i] = nums[i] - j\n                # Ensure arr1[i] >= arr1[i-1] and arr2[i] <= arr2[i-1]\n                for prev_j in range(j + 1):\n                    dp[i][j] = (dp[i][j] + dp[i - 1][prev_j]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp1[i][j] means the number of ways to have arr1[0..i] ending with j\n        dp1 = [[0] * (max_val + 1) for _ in range(n)]\n        # dp2[i][j] means the number of ways to have arr2[i..n-1] starting with j\n        dp2 = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row for dp1\n        for j in range(nums[0] + 1):\n            dp1[0][j] = 1\n        \n        # Fill dp1\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                dp1[i][j] = (dp1[i][j] + dp1[i - 1][j]) % MOD\n                if j > 0:\n                    dp1[i][j] = (dp1[i][j] + dp1[i - 1][j - 1]) % MOD\n        \n        # Initialize the last row for dp2\n        for j in range(nums[-1] + 1):\n            dp2[n - 1][j] = 1\n        \n        # Fill dp2\n        for i in range(n - 2, -1, -1):\n            for j in range(nums[i] + 1):\n                dp2[i][j] = (dp2[i][j] + dp2[i + 1][j]) % MOD\n                if j < max_val:\n                    dp2[i][j] = (dp2[i][j] + dp2[i + 1][j + 1]) % MOD\n        \n        # Calculate the result\n        result = 0\n        for i in range(n):\n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                result = (result + dp1[i][j] * dp2[i][k]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j][k] means the number of ways to have arr1[i] = j and arr2[i] = k\n        dp = [[[0] * (max_val + 1) for _ in range(max_val + 1)] for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            k = nums[0] - j\n            if k >= 0:\n                dp[0][j][k] = 1\n        \n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    for prev_j in range(j + 1):\n                        for prev_k in range(k, max_val + 1):\n                            dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prev_j][prev_k]) % MOD\n        \n        # Sum up all valid configurations for the last element\n        result = 0\n        for j in range(max_val + 1):\n            for k in range(max_val + 1):\n                result = (result + dp[n - 1][j][k]) % MOD\n        \n        return result",
    "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 1)\n            for j in range(max_val + 1):\n                prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    dp[i][j] = prefix_sum[k]\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result"
  ],
  "total_candidates": 20,
  "nodes_explored": 20,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 2)\n            for j in range(max_val + 1):\n                prefix_sum[j + 1] = (prefix_sum[j] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                dp[i][j] = prefix_sum[nums[i] - j + 1]\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
      "solution_hash": "7a624e7e81064a38ad00f31a6345cb851c54bf932b2854cd473d24b9a9e871a5",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp0ghmqqky.py\", line 218, in <module>\n    check(Solution().countOfPairs)\n  File \"/scratch/local/22242033/tmp0ghmqqky.py\", line 109, in check\n    assert candidate(nums = [50, 1, 50, 1, 50]) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp0ghmqqky.py` failed. (See above for error)\n",
        "execution_time": 13.475565671920776,
        "failed_tests": [
          {
            "input": "nums = [50, 1, 50, 1, 50]",
            "expected": "0",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmp0ghmqqky.py\", line 218, in <module>\n    check(Solution().countOfPairs)\n  File \"/scratch/local/22242033/tmp0ghmqqky.py\", line 109, in check\n    assert candidate(nums = [50, 1, 50, 1, 50]) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmp0ghmqqky.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        max_val = max(nums)\n        \n        # dp[i][j] means the number of ways to have arr1[i] = j\n        dp = [[0] * (max_val + 1) for _ in range(n)]\n        \n        # Initialize the first row\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        for i in range(1, n):\n            prefix_sum = [0] * (max_val + 1)\n            for j in range(max_val + 1):\n                prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n            \n            for j in range(nums[i] + 1):\n                k = nums[i] - j\n                if k >= 0:\n                    dp[i][j] = prefix_sum[k]\n        \n        # Sum up all valid configurations for the last element\n        result = sum(dp[n - 1]) % MOD\n        return result",
      "solution_hash": "7147ec30aa47f7e53218ca23a540a207ce6feba17893b588b09d66fbf3f6988f",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpwkuikbl2.py\", line 219, in <module>\n    check(Solution().countOfPairs)\n  File \"/scratch/local/22242033/tmpwkuikbl2.py\", line 110, in check\n    assert candidate(nums = [50, 1, 50, 1, 50]) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpwkuikbl2.py` failed. (See above for error)\n",
        "execution_time": 13.50925874710083,
        "failed_tests": [
          {
            "input": "nums = [50, 1, 50, 1, 50]",
            "expected": "0",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242033/tmpwkuikbl2.py\", line 219, in <module>\n    check(Solution().countOfPairs)\n  File \"/scratch/local/22242033/tmpwkuikbl2.py\", line 110, in check\n    assert candidate(nums = [50, 1, 50, 1, 50]) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242033/tmpwkuikbl2.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_19"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 20,
    "candidates_generated": 20,
    "tests_passed": 1,
    "tests_failed": 19,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.475565671920776,
      13.509613275527954,
      13.50548267364502,
      13.50548267364502,
      13.49619174003601,
      13.47844648361206,
      13.490129470825195,
      13.47844648361206,
      13.519387006759644,
      13.707064867019653,
      13.510830163955688,
      13.511470317840576,
      13.508804559707642,
      13.50925874710083,
      13.707064867019653,
      13.49956727027893,
      13.510723352432251,
      13.516022682189941,
      15.984584093093872,
      13.50925874710083
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 16,
      "unique_ratio": 0.8,
      "similarity_score": 0.8884282759377258,
      "solution_lengths": {
        "min": 844,
        "max": 1546,
        "avg": 1123.4
      },
      "algorithm_approaches": {
        "dynamic_programming": 13,
        "other": 7
      },
      "feature_diversity": 0.9,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 20
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.65,
            "count": 13
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 20
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 4,
            "max": 10,
            "avg": 6.75,
            "variance": 4.8875
          },
          "if_count": {
            "min": 0,
            "max": 4,
            "avg": 1.5,
            "variance": 1.35
          },
          "else_count": {
            "min": 0,
            "max": 2,
            "avg": 0.25,
            "variance": 0.3875
          },
          "return_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 7,
            "max": 18,
            "avg": 12.05,
            "variance": 13.047500000000003
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 23,
            "max": 41,
            "avg": 30.7,
            "variance": 32.31
          },
          "char_count": {
            "min": 844,
            "max": 1546,
            "avg": 1123.4,
            "variance": 59588.93999999999
          },
          "max_indent": {
            "min": 16,
            "max": 28,
            "avg": 20.4,
            "variance": 14.24
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 20
        },
        "avg_complexity_metrics": {
          "avg_line_count": 30.7,
          "avg_loop_count": 6.75,
          "avg_condition_count": 1.75,
          "avg_method_count": 1.0,
          "avg_assignment_count": 12.05,
          "avg_max_loop_nesting": 1.2
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [50, 1, 50, 1, 50]": 17,
        "nums = [3, 3, 3, 3, 3, 3]": 2
      },
      "first_failing_tests": {
        "nums = [50, 1, 50, 1, 50]": 17,
        "nums = [3, 3, 3, 3, 3, 3]": 2
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 1
        },
        "2": {
          "attempts": 12,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 6,
          "improvements": 1
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 17,
        "assertion_failure->unknown": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5,
        "solutions_per_depth": {
          "0": 2,
          "1": 6,
          "2": 12
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 1,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.09523809523809534,
        "pass@3": 0.27142857142857135,
        "pass@5": 0.4285714285714286,
        "pass@10": 0.7380952380952381
      },
      "solutions_evaluated": 21,
      "passing_solution_depths": {
        "min": 1,
        "max": 1,
        "avg": 1.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.05,
        "branch_success_rate": 0.05,
        "test_success_rate": 0.05
      },
      "test_results": {
        "total": 20,
        "passed": 1,
        "failed": 19,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 6,
        "total_improvements": 1,
        "recovery_rate": 0.16666666666666666
      },
      "top_errors": [
        [
          "assertion_failure",
          6
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [50, 1, 50, 1, 50]",
          17
        ],
        [
          "nums = [3, 3, 3, 3, 3, 3]",
          2
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1048.3101732730865,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.09523809523809534,
      "pass@3": 0.27142857142857135,
      "pass@5": 0.4285714285714286,
      "pass@10": 0.7380952380952381
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 20
          }
        ]
      ]
    },
    "solutions_evaluated": 21,
    "test_cases": 1
  }
}