{
  "problem_id": "maximize-score-of-numbers-in-ranges",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        # Helper function to check if a given min_diff is achievable\n        def is_possible(min_diff):\n            prev = -float('inf')\n            for s in start:\n                # The earliest we can pick in this interval is s\n                # The latest we can pick is s + d\n                # We need to pick a number >= prev + min_diff\n                # So, the target is max(s, prev + min_diff)\n                target = max(s, prev + min_diff)\n                if target > s + d:\n                    return False\n                prev = target\n            return True\n        \n        # Binary search the possible min_diff\n        left = 0\n        right = start[-1] - start[0] + d\n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
  "passed_solutions": [
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        # Helper function to check if a given min_diff is achievable\n        def is_possible(min_diff):\n            prev = -float('inf')\n            for s in start:\n                # The earliest we can pick in this interval is s\n                # The latest we can pick is s + d\n                # We need to pick a number >= prev + min_diff\n                # So, the target is max(s, prev + min_diff)\n                target = max(s, prev + min_diff)\n                if target > s + d:\n                    return False\n                prev = target\n            return True\n        \n        # Binary search the possible min_diff\n        left = 0\n        right = start[-1] - start[0] + d\n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        left = 0\n        right = start[-1] + d - start[0]\n        \n        def is_possible(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                lower = start[i]\n                upper = start[i] + d\n                if lower >= prev + min_diff:\n                    prev = lower\n                elif upper >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        def can_place(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                left = start[i]\n                right = start[i] + d\n                if left >= prev + min_diff:\n                    prev = left\n                elif right >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        left = 0\n        right = start[-1] + d - start[0]\n        result = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if can_place(mid):\n                result = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result"
  ],
  "all_solutions": [
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        # Helper function to check if a given min_diff is achievable\n        def is_possible(min_diff):\n            prev = -float('inf')\n            for s in start:\n                # The earliest we can pick in this interval is s\n                # The latest we can pick is s + d\n                # We need to pick a number >= prev + min_diff\n                # So, the target is max(s, prev + min_diff)\n                target = max(s, prev + min_diff)\n                if target > s + d:\n                    return False\n                prev = target\n            return True\n        \n        # Binary search the possible min_diff\n        left = 0\n        right = start[-1] - start[0] + d\n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        left = 0\n        right = start[-1] + d - start[0]\n        \n        def is_possible(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                lower = start[i]\n                upper = start[i] + d\n                if lower >= prev + min_diff:\n                    prev = lower\n                elif upper >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        def can_place(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                left = start[i]\n                right = start[i] + d\n                if left >= prev + min_diff:\n                    prev = left\n                elif right >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        left = 0\n        right = start[-1] + d - start[0]\n        result = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if can_place(mid):\n                result = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        # Helper function to check if a given min_diff is achievable\n        def is_possible(min_diff):\n            prev = -float('inf')\n            for s in start:\n                # The earliest we can pick in this interval is s\n                # The latest we can pick is s + d\n                # We need to pick a number >= prev + min_diff\n                # So, the target is max(s, prev + min_diff)\n                target = max(s, prev + min_diff)\n                if target > s + d:\n                    return False\n                prev = target\n            return True\n        \n        # Binary search the possible min_diff\n        left = 0\n        right = start[-1] - start[0] + d\n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
      "solution_hash": "b0a580b36229859b36b34f2f3bfc4783a4dffdb31dd3d5f94adacffd566a507c",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06822490692138672
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        left = 0\n        right = start[-1] + d - start[0]\n        \n        def is_possible(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                lower = start[i]\n                upper = start[i] + d\n                if lower >= prev + min_diff:\n                    prev = lower\n                elif upper >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if is_possible(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
      "solution_hash": "e21b687367979f527454dba67d32725f268637f066353141969fe9facaf510b3",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07259202003479004
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        \n        def can_place(min_diff):\n            prev = start[0]\n            for i in range(1, n):\n                left = start[i]\n                right = start[i] + d\n                if left >= prev + min_diff:\n                    prev = left\n                elif right >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n            return True\n        \n        left = 0\n        right = start[-1] + d - start[0]\n        result = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if can_place(mid):\n                result = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result",
      "solution_hash": "0c228c96ca312da6502c4f771bb7562da25832545460c1e14a3ae532682589ef",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07182717323303223
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 108.65493369102478,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}