{
  "problem_id": "k-th-nearest-obstacle-queries",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        obstacles = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            obstacles.append(dist)\n            obstacles.sort()\n            if len(obstacles) < k:\n                res.append(-1)\n            else:\n                res.append(obstacles[k-1])\n        return res",
  "passed_solutions": [
    "class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                import heapq\n                min_heap = []\n                result = []\n                for query in queries:\n                    x, y = query\n                    distance = abs(x) + abs(y)\n                    heapq.heappush(min_heap, distance)\n                    if len(min_heap) < k:\n                        result.append(-1)\n                    else:\n                        result.append(nsmallest(k, min_heap)[-1])\n                return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        res = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            if len(heap) < k:\n                heapq.heappush(heap, -dist)\n                if len(heap) < k:\n                    res.append(-1)\n                else:\n                    res.append(-heap[0])\n            else:\n                if dist < -heap[0]:\n                    heapq.heappushpop(heap, -dist)\n                    res.append(-heap[0])\n                else:\n                    res.append(-heap[0])\n        return res",
    "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        obstacles = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            obstacles.append(dist)\n            obstacles.sort()\n            if len(obstacles) < k:\n                res.append(-1)\n            else:\n                res.append(obstacles[k-1])\n        return res",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        results = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, -dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                results.append(-1)\n            else:\n                results.append(-heap[0])\n        return results"
  ],
  "all_solutions": [
    "class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                import heapq\n                min_heap = []\n                result = []\n                for query in queries:\n                    x, y = query\n                    distance = abs(x) + abs(y)\n                    heapq.heappush(min_heap, distance)\n                    if len(min_heap) < k:\n                        result.append(-1)\n                    else:\n                        result.append(nsmallest(k, min_heap)[-1])\n                return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                res.append(-1)\n            else:\n                res.append(heap[0])\n        return res",
    "import heapq\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                obstacles = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    obstacles.append(dist)\n                    if len(obstacles) < k:\n                        res.append(-1)\n                    else:\n                        heap = obstacles.copy()\n                        heapq.heapify(heap)\n                        while len(heap) > k:\n                            heapq.heappop(heap)\n                        res.append(heap[0])\n                return res",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        res = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            if len(heap) < k:\n                heapq.heappush(heap, -dist)\n                if len(heap) < k:\n                    res.append(-1)\n                else:\n                    res.append(-heap[0])\n            else:\n                if dist < -heap[0]:\n                    heapq.heappushpop(heap, -dist)\n                    res.append(-heap[0])\n                else:\n                    res.append(-heap[0])\n        return res",
    "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    if len(heap) < k:\n                        heapq.heappush(heap, -dist)\n                        if len(heap) < k:\n                            res.append(-1)\n                        else:\n                            res.append(-heap[0])\n                    else:\n                        if dist < -heap[0]:\n                            heapq.heappop(heap)\n                            heapq.heappush(heap, -dist)\n                        res.append(-heap[0])\n                return res",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        obstacles = set()\n        count = 0\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            if (x, y) not in obstacles:\n                obstacles.add((x, y))\n                count += 1\n                if len(heap) < k:\n                    heapq.heappush(heap, -dist)\n                else:\n                    if dist < -heap[0]:\n                        heapq.heappushpop(heap, -dist)\n            if count < k:\n                res.append(-1)\n            else:\n                res.append(-heap[0])\n        return res",
    "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(heap, dist)\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        res.append(heap[0])\n                return res",
    "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                obstacle_count = 0  # Unique identifier for each obstacle\n\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    # Push the negative distance to create a max-heap effect\n                    heapq.heappush(heap, (-dist, obstacle_count))\n                    obstacle_count += 1\n\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        # Negate again to get the original distance\n                        res.append(-heap[0][0])\n\n                return res",
    "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(heap, dist)\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        res.append(heap[0])\n                return res",
    "import heapq\nfrom typing import List\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                res.append(-1)\n            else:\n                res.append(heap[0])\n        return res",
    "import heapq\n\nclass Solution:\n\ndef resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n\nheap = []\n\nres = []\n\nfor query in queries:\n\nx, y = query\n\ndist = abs(x) + abs(y)\n\nheapq.heappush(heap, dist)\n\nif len(heap) > k:\n\nheapq.heappop(heap)\n\nif len(heap) < k:\n\nres.append(-1)\n\nelse:\n\nres.append(heap[0])\n\nreturn res",
    "from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                distances = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    # Insert the distance into the sorted list\n                    distances.append(dist)\n                    distances.sort()\n                    if len(distances) < k:\n                        res.append(-1)\n                    else:\n                        res.append(distances[k-1])\n                return res",
    "import heapq\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                obstacles = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(obstacles, dist)\n                    if len(obstacles) < k:\n                        res.append(-1)\n                    else:\n                        # Get the k-th smallest element\n                        temp = sorted(obstacles[:k])\n                        res.append(temp[k-1])\n                return res",
    "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        obstacles = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            obstacles.append(dist)\n            obstacles.sort()\n            if len(obstacles) < k:\n                res.append(-1)\n            else:\n                res.append(obstacles[k-1])\n        return res",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        results = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, -dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                results.append(-1)\n            else:\n                results.append(-heap[0])\n        return results"
  ],
  "total_candidates": 15,
  "nodes_explored": 15,
  "tree_depth": 2,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                import heapq\n                min_heap = []\n                result = []\n                for query in queries:\n                    x, y = query\n                    distance = abs(x) + abs(y)\n                    heapq.heappush(min_heap, distance)\n                    if len(min_heap) < k:\n                        result.append(-1)\n                    else:\n                        result.append(nsmallest(k, min_heap)[-1])\n                return result",
      "solution_hash": "ec9f846c2ef9124155a800a9de9c459ee4655cd4d0c29f64a88250fcde414df2",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06931209564208984
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                res.append(-1)\n            else:\n                res.append(heap[0])\n        return res",
      "solution_hash": "cf0995f53e2414a077b7e1c2f117aa2fbe540b66e5a0aeb1d0f0bbe0ab7f6915",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpzmnsdql_.py\", line 190, in <module>\n    check(Solution().resultsArray)\n  File \"/scratch/local/21419949/tmpzmnsdql_.py\", line 101, in check\n    assert candidate(queries = [[5, 5], [4, 4], [3, 3]],k = 1) == [10, 8, 6]\nAssertionError\n",
        "execution_time": 0.07245182991027832
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_2",
          "solution": "import heapq\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                obstacles = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    obstacles.append(dist)\n                    if len(obstacles) < k:\n                        res.append(-1)\n                    else:\n                        heap = obstacles.copy()\n                        heapq.heapify(heap)\n                        while len(heap) > k:\n                            heapq.heappop(heap)\n                        res.append(heap[0])\n                return res",
          "solution_hash": "e5de10bd0e1f02983ca9ff5140e5505859c90c0b62ecc5addda20c9f95e29127",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419949/tmpqsucp6xf.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.054453134536743164
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_3",
              "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        res = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            if len(heap) < k:\n                heapq.heappush(heap, -dist)\n                if len(heap) < k:\n                    res.append(-1)\n                else:\n                    res.append(-heap[0])\n            else:\n                if dist < -heap[0]:\n                    heapq.heappushpop(heap, -dist)\n                    res.append(-heap[0])\n                else:\n                    res.append(-heap[0])\n        return res",
              "solution_hash": "80d31e502ae9a97d1fff10d8fb38c94c82c1fb549ef31e7a792a6c1d1b3d607b",
              "test_result": {
                "status": "pass",
                "execution_time": 0.06931018829345703
              },
              "depth": 2,
              "parent_id": "1_2",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_4",
              "solution": "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    if len(heap) < k:\n                        heapq.heappush(heap, -dist)\n                        if len(heap) < k:\n                            res.append(-1)\n                        else:\n                            res.append(-heap[0])\n                    else:\n                        if dist < -heap[0]:\n                            heapq.heappop(heap)\n                            heapq.heappush(heap, -dist)\n                        res.append(-heap[0])\n                return res",
              "solution_hash": "ec1ec13278d416f54d997b4e702d18c9fb431f59f7193c90d256905db2cd0c69",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmppq74e3rw.py\", line 82\n    from typing import List\nIndentationError: unexpected indent\n",
                "execution_time": 0.057161808013916016
              },
              "depth": 2,
              "parent_id": "1_2",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_5",
              "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        obstacles = set()\n        count = 0\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            if (x, y) not in obstacles:\n                obstacles.add((x, y))\n                count += 1\n                if len(heap) < k:\n                    heapq.heappush(heap, -dist)\n                else:\n                    if dist < -heap[0]:\n                        heapq.heappushpop(heap, -dist)\n            if count < k:\n                res.append(-1)\n            else:\n                res.append(-heap[0])\n        return res",
              "solution_hash": "bb5ddf5d0dba900a56f7e661656ca77c3e748eea7e9acb7ac395caf33944309f",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpbz95vcs7.py\", line 197, in <module>\n    check(Solution().resultsArray)\n  File \"/scratch/local/21419949/tmpbz95vcs7.py\", line 164, in check\n    assert candidate(queries = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],k = 5) == [-1, -1, -1, -1, 0]\nAssertionError\n",
                "execution_time": 0.06660890579223633
              },
              "depth": 2,
              "parent_id": "1_2",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_6",
          "solution": "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(heap, dist)\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        res.append(heap[0])\n                return res",
          "solution_hash": "01127a726fc1ab87cc16c79af19bcbe4fb6f947e7f72833b46af55a3280f0a39",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419949/tmp9camau20.py\", line 82\n    from typing import List\nIndentationError: unexpected indent\n",
            "execution_time": 0.05295252799987793
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_7",
              "solution": "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                obstacle_count = 0  # Unique identifier for each obstacle\n\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    # Push the negative distance to create a max-heap effect\n                    heapq.heappush(heap, (-dist, obstacle_count))\n                    obstacle_count += 1\n\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        # Negate again to get the original distance\n                        res.append(-heap[0][0])\n\n                return res",
              "solution_hash": "8bd8c29781c6137e60156f4db0a8c2ab615362f094a86f3270c564bab19076d6",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmp1sp62uzu.py\", line 82\n    from typing import List\nIndentationError: unexpected indent\n",
                "execution_time": 0.054755449295043945
              },
              "depth": 2,
              "parent_id": "1_6",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_8",
              "solution": "import heapq\n        from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                heap = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(heap, dist)\n                    if len(heap) > k:\n                        heapq.heappop(heap)\n                    if len(heap) < k:\n                        res.append(-1)\n                    else:\n                        res.append(heap[0])\n                return res",
              "solution_hash": "01127a726fc1ab87cc16c79af19bcbe4fb6f947e7f72833b46af55a3280f0a39",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmp9camau20.py\", line 82\n    from typing import List\nIndentationError: unexpected indent\n",
                "execution_time": 0.05295252799987793
              },
              "depth": 2,
              "parent_id": "1_6",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_9",
              "solution": "import heapq\nfrom typing import List\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                res.append(-1)\n            else:\n                res.append(heap[0])\n        return res",
              "solution_hash": "01127a726fc1ab87cc16c79af19bcbe4fb6f947e7f72833b46af55a3280f0a39",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmp9camau20.py\", line 82\n    from typing import List\nIndentationError: unexpected indent\n",
                "execution_time": 0.05295252799987793
              },
              "depth": 2,
              "parent_id": "1_6",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_10",
          "solution": "import heapq\n\nclass Solution:\n\ndef resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n\nheap = []\n\nres = []\n\nfor query in queries:\n\nx, y = query\n\ndist = abs(x) + abs(y)\n\nheapq.heappush(heap, dist)\n\nif len(heap) > k:\n\nheapq.heappop(heap)\n\nif len(heap) < k:\n\nres.append(-1)\n\nelse:\n\nres.append(heap[0])\n\nreturn res",
          "solution_hash": "cf0995f53e2414a077b7e1c2f117aa2fbe540b66e5a0aeb1d0f0bbe0ab7f6915",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419949/tmpg11xftyo.py\", line 85\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n    ^\nIndentationError: expected an indented block\n",
            "execution_time": 0.052579402923583984
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_11",
              "solution": "from typing import List\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                distances = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    # Insert the distance into the sorted list\n                    distances.append(dist)\n                    distances.sort()\n                    if len(distances) < k:\n                        res.append(-1)\n                    else:\n                        res.append(distances[k-1])\n                return res",
              "solution_hash": "70fa315568091ebfd3a76fb5cd70e25edc951b12264d91cb38d91ee38c63af18",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmpo0ailt0n.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.053792715072631836
              },
              "depth": 2,
              "parent_id": "1_10",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_12",
              "solution": "import heapq\n\n        class Solution:\n            def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n                obstacles = []\n                res = []\n                for query in queries:\n                    x, y = query\n                    dist = abs(x) + abs(y)\n                    heapq.heappush(obstacles, dist)\n                    if len(obstacles) < k:\n                        res.append(-1)\n                    else:\n                        # Get the k-th smallest element\n                        temp = sorted(obstacles[:k])\n                        res.append(temp[k-1])\n                return res",
              "solution_hash": "4b9c6b5801e5f2140f11d810c0ce91a94ff6b914450e96b4028bf2480462dc62",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419949/tmp1t_finm3.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05254983901977539
              },
              "depth": 2,
              "parent_id": "1_10",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_13",
              "solution": "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        obstacles = []\n        res = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            obstacles.append(dist)\n            obstacles.sort()\n            if len(obstacles) < k:\n                res.append(-1)\n            else:\n                res.append(obstacles[k-1])\n        return res",
              "solution_hash": "3e102879043836b8c65c54d0cb7b6f80980afce8d4bccbb85ac6ea46c92b3119",
              "test_result": {
                "status": "pass",
                "execution_time": 0.06652116775512695
              },
              "depth": 2,
              "parent_id": "1_10",
              "children": [],
              "passed": true
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        results = []\n        heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(heap, -dist)\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                results.append(-1)\n            else:\n                results.append(-heap[0])\n        return results",
      "solution_hash": "f89152d5433852116fae99f3c18e2583b081b2775a040160cef42222522c92b8",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07200098037719727
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 15,
    "candidates_generated": 15,
    "tests_passed": 4,
    "tests_failed": 11,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 600.5586624145508,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.3125,
      "pass@3": 0.7053571428571428,
      "pass@5": 0.8942307692307692,
      "pass@10": 0.9986263736263736
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 99)",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: expected an indented block (<string>, line 101)",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 99)",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 15
          }
        ]
      ]
    },
    "solutions_evaluated": 16,
    "test_cases": 1
  }
}