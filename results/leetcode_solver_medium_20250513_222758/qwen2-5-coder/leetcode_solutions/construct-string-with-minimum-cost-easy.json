{
  "problem_id": "construct-string-with-minimum-cost-easy",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: no cost to create an empty string\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
  "passed_solutions": [
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: no cost to create an empty string\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                if i >= len(word) and target[i - len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i - len(word)] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1"
  ],
  "all_solutions": [
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: no cost to create an empty string\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                if i >= len(word) and target[i - len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i - len(word)] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: no cost to create an empty string\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
      "solution_hash": "d08cae0ef718bf18607a644b8d7557c6753c1ed3c4b547a437667aa8beffada3",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06992745399475098
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                m = len(word)\n                if i >= m and target[i - m:i] == word:\n                    dp[i] = min(dp[i], dp[i - m] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
      "solution_hash": "d08cae0ef718bf18607a644b8d7557c6753c1ed3c4b547a437667aa8beffada3",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0725700855255127
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [inf] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0\n        \n        for i in range(1, n + 1):\n            for j, word in enumerate(words):\n                if i >= len(word) and target[i - len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i - len(word)] + costs[j])\n        \n        return dp[n] if dp[n] != inf else -1",
      "solution_hash": "3828e72ee16e1913a2f8eb6e6ac528a3f193e231cbc53620e3b1739093215eca",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07430005073547363
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 46.95595741271973,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}