{
  "problem_id": "shortest-distance-after-road-addition-queries-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
  "passed_solutions": [
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, current_distance)\n            visited = set([0])\n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, current_distance)\n            visited = set([0])\n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
      "solution_hash": "6fb0a00af19feaf072f7e8fac2dd75badab742f40583dcb131031266772bed6d",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07207322120666504
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the initial roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, distance)\n            visited = [False] * n\n            visited[0] = True\n            \n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
      "solution_hash": "6fb0a00af19feaf072f7e8fac2dd75badab742f40583dcb131031266772bed6d",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07384586334228516
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from collections import defaultdict, deque\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        \n        def bfs():\n            queue = deque([(0, 0)])  # (current_city, current_distance)\n            visited = set([0])\n            while queue:\n                city, dist = queue.popleft()\n                if city == n - 1:\n                    return dist\n                for neighbor in graph[city]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, dist + 1))\n            return inf  # If no path found\n        \n        result = []\n        for u, v in queries:\n            graph[u].append(v)\n            result.append(bfs())\n        \n        return result",
      "solution_hash": "fac9d8c7272aa2be9ff8008e2c3713470ba871253e857dd908b7fcf370a8e44c",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07504916191101074
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 117.03175616264343,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}