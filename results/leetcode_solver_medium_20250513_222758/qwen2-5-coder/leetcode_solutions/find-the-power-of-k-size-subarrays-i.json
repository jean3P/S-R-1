{
  "problem_id": "find-the-power-of-k-size-subarrays-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_and_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_and_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
  "passed_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_and_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_and_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results"
  ],
  "all_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_and_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_and_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_and_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_and_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
      "solution_hash": "9d6e47f1c89946d4b79ddb1865d5ae01ea1d63d27f5fea82868d3c5bb6906627",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07065129280090332
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
      "solution_hash": "64b9e7ec99f50ea4762484c836a077060180c80e05701fd37a98ee8837485564",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07477068901062012
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        def is_consecutive_sorted(subarray):\n            return all(subarray[i] + 1 == subarray[i + 1] for i in range(len(subarray) - 1))\n        \n        results = []\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i + k]\n            if is_consecutive_sorted(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results",
      "solution_hash": "64b9e7ec99f50ea4762484c836a077060180c80e05701fd37a98ee8837485564",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07549357414245605
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 39.2987105846405,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}