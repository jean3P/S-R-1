{
  "problem_id": "reach-end-of-array-with-max-score",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_score = [0] * n\n        max_score[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                max_score[j] = max(max_score[j], max_score[i] + (j - i) * nums[i])\n        \n        return max_score[-1]",
  "passed_solutions": [
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_score = [0] * n\n        max_score[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                max_score[j] = max(max_score[j], max_score[i] + (j - i) * nums[i])\n        \n        return max_score[-1]",
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        \n        for i in range(n - 2, -1, -1):\n            max_score = 0\n            for j in range(i + 1, n):\n                score = (j - i) * nums[i] + dp[j]\n                max_score = max(max_score, score)\n            dp[i] = max_score\n        \n        return dp[0]",
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n        \n        return dp[-1]"
  ],
  "all_solutions": [
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_score = [0] * n\n        max_score[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                max_score[j] = max(max_score[j], max_score[i] + (j - i) * nums[i])\n        \n        return max_score[-1]",
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        \n        for i in range(n - 2, -1, -1):\n            max_score = 0\n            for j in range(i + 1, n):\n                score = (j - i) * nums[i] + dp[j]\n                max_score = max(max_score, score)\n            dp[i] = max_score\n        \n        return dp[0]",
    "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n        \n        return dp[-1]"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_score = [0] * n\n        max_score[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                max_score[j] = max(max_score[j], max_score[i] + (j - i) * nums[i])\n        \n        return max_score[-1]",
      "solution_hash": "94f730561ad8d968a474b0d73f06a0c22300e05bc5166249f183b03119fc1359",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0667276382446289
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        \n        for i in range(n - 2, -1, -1):\n            max_score = 0\n            for j in range(i + 1, n):\n                score = (j - i) * nums[i] + dp[j]\n                max_score = max(max_score, score)\n            dp[i] = max_score\n        \n        return dp[0]",
      "solution_hash": "66374986acdad8aa874d4e72ad28c8f073aea8ff0eb8d0e49354f15c7148f9bb",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06985306739807129
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def findMaximumScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])\n        \n        return dp[-1]",
      "solution_hash": "df25b2760f51333804a716536b414c08200ba24d32c939a786a8378734341627",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07056736946105957
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 34.27871751785278,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}