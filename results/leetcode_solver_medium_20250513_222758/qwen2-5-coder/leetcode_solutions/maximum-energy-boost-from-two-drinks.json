{
  "problem_id": "maximum-energy-boost-from-two-drinks",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # dpA[i]: max energy boost ending at hour i drinking from A\n        # dpB[i]: max energy boost ending at hour i drinking from B\n        dpA = [0] * n\n        dpB = [0] * n\n        \n        dpA[0] = energyDrinkA[0]\n        dpB[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dpA[i] = max(dpA[i-1] + energyDrinkA[i], dpB[i-2] + energyDrinkA[i] if i >= 2 else 0)\n            dpB[i] = max(dpB[i-1] + energyDrinkB[i], dpA[i-2] + energyDrinkB[i] if i >= 2 else 0)\n        \n        return max(dpA[-1], dpB[-1])",
  "passed_solutions": [
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # dpA[i]: max energy boost ending at hour i drinking from A\n        # dpB[i]: max energy boost ending at hour i drinking from B\n        dpA = [0] * n\n        dpB = [0] * n\n        \n        dpA[0] = energyDrinkA[0]\n        dpB[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dpA[i] = max(dpA[i-1] + energyDrinkA[i], dpB[i-2] + energyDrinkA[i] if i >= 2 else 0)\n            dpB[i] = max(dpB[i-1] + energyDrinkB[i], dpA[i-2] + energyDrinkB[i] if i >= 2 else 0)\n        \n        return max(dpA[-1], dpB[-1])",
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # Initialize DP arrays\n        dp_A = [0] * n  # Max energy boost ending with drink A\n        dp_B = [0] * n  # Max energy boost ending with drink B\n        \n        # Base case\n        dp_A[0] = energyDrinkA[0]\n        dp_B[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose drink A at hour i\n            dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i] if i > 1 else 0)\n            # If we choose drink B at hour i\n            dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i] if i > 1 else 0)\n        \n        # The result is the maximum energy boost we can achieve by the end of the last hour\n        return max(dp_A[-1], dp_B[-1])",
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        # dp[i][0] means max energy boost up to hour i if we drank A at hour i\n        # dp[i][1] means max energy boost up to hour i if we drank B at hour i\n        dp = [[0, 0] for _ in range(n)]\n        \n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], dp[i-1][1])  # Drink A now, either continue A or switch from B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], dp[i-1][0])  # Drink B now, either continue B or switch from A\n        \n        return max(dp[n-1][0], dp[n-1][1])"
  ],
  "all_solutions": [
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # dpA[i]: max energy boost ending at hour i drinking from A\n        # dpB[i]: max energy boost ending at hour i drinking from B\n        dpA = [0] * n\n        dpB = [0] * n\n        \n        dpA[0] = energyDrinkA[0]\n        dpB[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dpA[i] = max(dpA[i-1] + energyDrinkA[i], dpB[i-2] + energyDrinkA[i] if i >= 2 else 0)\n            dpB[i] = max(dpB[i-1] + energyDrinkB[i], dpA[i-2] + energyDrinkB[i] if i >= 2 else 0)\n        \n        return max(dpA[-1], dpB[-1])",
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # Initialize DP arrays\n        dp_A = [0] * n  # Max energy boost ending with drink A\n        dp_B = [0] * n  # Max energy boost ending with drink B\n        \n        # Base case\n        dp_A[0] = energyDrinkA[0]\n        dp_B[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose drink A at hour i\n            dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i] if i > 1 else 0)\n            # If we choose drink B at hour i\n            dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i] if i > 1 else 0)\n        \n        # The result is the maximum energy boost we can achieve by the end of the last hour\n        return max(dp_A[-1], dp_B[-1])",
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        # dp[i][0] means max energy boost up to hour i if we drank A at hour i\n        # dp[i][1] means max energy boost up to hour i if we drank B at hour i\n        dp = [[0, 0] for _ in range(n)]\n        \n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], dp[i-1][1])  # Drink A now, either continue A or switch from B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], dp[i-1][0])  # Drink B now, either continue B or switch from A\n        \n        return max(dp[n-1][0], dp[n-1][1])"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # dpA[i]: max energy boost ending at hour i drinking from A\n        # dpB[i]: max energy boost ending at hour i drinking from B\n        dpA = [0] * n\n        dpB = [0] * n\n        \n        dpA[0] = energyDrinkA[0]\n        dpB[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dpA[i] = max(dpA[i-1] + energyDrinkA[i], dpB[i-2] + energyDrinkA[i] if i >= 2 else 0)\n            dpB[i] = max(dpB[i-1] + energyDrinkB[i], dpA[i-2] + energyDrinkB[i] if i >= 2 else 0)\n        \n        return max(dpA[-1], dpB[-1])",
      "solution_hash": "6f7c2332828116f30ab33a4589aed72c851e0de6a9e8a289523629dd1f62743b",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06910824775695801
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        \n        # Initialize DP arrays\n        dp_A = [0] * n  # Max energy boost ending with drink A\n        dp_B = [0] * n  # Max energy boost ending with drink B\n        \n        # Base case\n        dp_A[0] = energyDrinkA[0]\n        dp_B[0] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose drink A at hour i\n            dp_A[i] = max(dp_A[i-1] + energyDrinkA[i], dp_B[i-2] + energyDrinkA[i] if i > 1 else 0)\n            # If we choose drink B at hour i\n            dp_B[i] = max(dp_B[i-1] + energyDrinkB[i], dp_A[i-2] + energyDrinkB[i] if i > 1 else 0)\n        \n        # The result is the maximum energy boost we can achieve by the end of the last hour\n        return max(dp_A[-1], dp_B[-1])",
      "solution_hash": "3111969e92349144efe8c94233f9a62e0418952a104512e6e13829b8597e6efc",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07157230377197266
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        # dp[i][0] means max energy boost up to hour i if we drank A at hour i\n        # dp[i][1] means max energy boost up to hour i if we drank B at hour i\n        dp = [[0, 0] for _ in range(n)]\n        \n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], dp[i-1][1])  # Drink A now, either continue A or switch from B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], dp[i-1][0])  # Drink B now, either continue B or switch from A\n        \n        return max(dp[n-1][0], dp[n-1][1])",
      "solution_hash": "46b022bd1370cc17b54f5467582136b13d2e311be3bde04c4a75af98a03eec6e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07210469245910645
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 58.76378631591797,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}