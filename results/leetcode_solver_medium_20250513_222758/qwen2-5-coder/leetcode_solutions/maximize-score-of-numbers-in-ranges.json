{
  "problem_id": "maximize-score-of-numbers-in-ranges",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                # Try to pick the smallest number in the current interval that is at least min_diff away from the previous number\n                if s >= prev + min_diff:\n                    prev = s\n                elif s + d >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n                count += 1\n                if count == len(start):\n                    return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
  "passed_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                # Try to pick the smallest number in the current interval that is at least min_diff away from the previous number\n                if s >= prev + min_diff:\n                    prev = s\n                elif s + d >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n                count += 1\n                if count == len(start):\n                    return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score"
  ],
  "all_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s - prev >= min_diff:\n                    prev = s\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                # Try to pick the smallest number in the current interval that is at least min_diff away from the previous number\n                if s >= prev + min_diff:\n                    prev = s\n                elif s + d >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n                count += 1\n                if count == len(start):\n                    return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n                if prev > s + d:\n                    return False\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
    "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(prev + min_diff, s)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score"
  ],
  "total_candidates": 12,
  "nodes_explored": 12,
  "tree_depth": 2,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
      "solution_hash": "a4c1f11591a715b85debf506477c699a28a80131ea47403d793be92ffb4c9987",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06769204139709473
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieveMinDiff(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s + d >= prev + min_diff:\n                    prev = max(prev + min_diff, s)\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieveMinDiff(mid):\n                best = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        return best",
      "solution_hash": "a4c1f11591a715b85debf506477c699a28a80131ea47403d793be92ffb4c9987",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07053446769714355
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                if s - prev >= min_diff:\n                    prev = s\n                    count += 1\n                    if count == len(start):\n                        return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
      "solution_hash": "ddbcf4a737f4b75dd5e8ea632757649d2af5dd1f30e2f7f629db5035baa9af78",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpryfjumy8.py\", line 221, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpryfjumy8.py\", line 110, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
        "execution_time": 0.06901073455810547
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_3",
          "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            count = 1\n            for s in start[1:]:\n                # Try to pick the smallest number in the current interval that is at least min_diff away from the previous number\n                if s >= prev + min_diff:\n                    prev = s\n                elif s + d >= prev + min_diff:\n                    prev = prev + min_diff\n                else:\n                    return False\n                count += 1\n                if count == len(start):\n                    return True\n            return False\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
          "solution_hash": "eacf5aa4e73538d0907ced5c554b3bbf9c1f462aaaa559282ced73d1367d6744",
          "test_result": {
            "status": "pass",
            "execution_time": 0.06761741638183594
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [],
          "passed": true
        },
        {
          "node_id": "1_4",
          "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
          "solution_hash": "78f83e754096f3aee595e68c81752cf951b5d029aaa1d70a5a11ee80e8fe17d8",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
            "execution_time": 0.06853961944580078
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_5",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "799cfbb76933915c8d4cc817f2b8e8643b7d08e33d9855083f316b795a2ef38b",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
                "execution_time": 0.06702160835266113
              },
              "depth": 2,
              "parent_id": "1_4",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_6",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "799cfbb76933915c8d4cc817f2b8e8643b7d08e33d9855083f316b795a2ef38b",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
                "execution_time": 0.06702160835266113
              },
              "depth": 2,
              "parent_id": "1_4",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_7",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "78f83e754096f3aee595e68c81752cf951b5d029aaa1d70a5a11ee80e8fe17d8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
                "execution_time": 0.06853961944580078
              },
              "depth": 2,
              "parent_id": "1_4",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_8",
          "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = min(s + d, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
          "solution_hash": "78f83e754096f3aee595e68c81752cf951b5d029aaa1d70a5a11ee80e8fe17d8",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpgyl_fdb3.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
            "execution_time": 0.06853961944580078
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_9",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n                if prev > s + d:\n                    return False\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "8a118e8fcd4b61d7e939e91b237ce54d1b9b5ff0363bc80d4a4c7b7a78d08613",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpe6xmu5yp.py\", line 224, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpe6xmu5yp.py\", line 114, in check\n    assert candidate(start = [1, 10, 20, 30],d = 9) == 12\nAssertionError\n",
                "execution_time": 0.06640267372131348
              },
              "depth": 2,
              "parent_id": "1_8",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_10",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(s, prev + min_diff)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "799cfbb76933915c8d4cc817f2b8e8643b7d08e33d9855083f316b795a2ef38b",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmp9hcabb4w.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
                "execution_time": 0.06702160835266113
              },
              "depth": 2,
              "parent_id": "1_8",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_11",
              "solution": "from typing import List\n\nclass Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for s in start[1:]:\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                if s > prev + min_diff:\n                    return False\n                # Choose the largest possible number in the current interval that is still valid\n                prev = max(prev + min_diff, s)\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
              "solution_hash": "d15d9b017436e449df71266a2f11f823a566a6530d686f800b18296d8d072842",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419949/tmpfh0_5w_r.py\", line 222, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/21419949/tmpfh0_5w_r.py\", line 111, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n",
                "execution_time": 0.06564474105834961
              },
              "depth": 2,
              "parent_id": "1_8",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 12,
    "candidates_generated": 12,
    "tests_passed": 3,
    "tests_failed": 9,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 225.80561780929565,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.3076923076923077,
      "pass@3": 0.7062937062937064,
      "pass@5": 0.9020979020979021,
      "pass@10": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 12
          }
        ]
      ]
    },
    "solutions_evaluated": 13,
    "test_cases": 1
  }
}