{
  "problem_id": "hash-divided-string",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        for i in range(0, n, k):\n            substring = s[i:i+k]\n            total = sum(ord(c) - ord('a') for c in substring)\n            hashed_char = chr((total % 26) + ord('a'))\n            result.append(hashed_char)\n        return ''.join(result)",
  "passed_solutions": [
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        for i in range(0, n, k):\n            substring = s[i:i+k]\n            total = sum(ord(c) - ord('a') for c in substring)\n            hashed_char = chr((total % 26) + ord('a'))\n            result.append(hashed_char)\n        return ''.join(result)",
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)",
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)"
  ],
  "all_solutions": [
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        for i in range(0, n, k):\n            substring = s[i:i+k]\n            total = sum(ord(c) - ord('a') for c in substring)\n            hashed_char = chr((total % 26) + ord('a'))\n            result.append(hashed_char)\n        return ''.join(result)",
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)",
    "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        for i in range(0, n, k):\n            substring = s[i:i+k]\n            total = sum(ord(c) - ord('a') for c in substring)\n            hashed_char = chr((total % 26) + ord('a'))\n            result.append(hashed_char)\n        return ''.join(result)",
      "solution_hash": "685b9d761ec22a93ffcb6d451409960494a0e6deb89a09ddd8de7caa9ffdece6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06469178199768066
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)",
      "solution_hash": "9b2d2774cf1607a59cbd58c70ca0b44f82e4cc9e5d5c4955c7467706dbbb3a9e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06789016723632812
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        result = []\n        n = len(s)\n        num_substrings = n // k\n        for i in range(num_substrings):\n            substring = s[i*k : (i+1)*k]\n            total = 0\n            for char in substring:\n                total += ord(char) - ord('a')\n            hashed_char = total % 26\n            result.append(chr(hashed_char + ord('a')))\n        return ''.join(result)",
      "solution_hash": "9b2d2774cf1607a59cbd58c70ca0b44f82e4cc9e5d5c4955c7467706dbbb3a9e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06844806671142578
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 46.52812600135803,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}