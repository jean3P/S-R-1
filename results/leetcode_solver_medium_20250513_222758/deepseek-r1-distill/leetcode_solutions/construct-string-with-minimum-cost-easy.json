{
  "problem_id": "construct-string-with-minimum-cost-easy",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position\n            \n            # Try all possible words\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
  "passed_solutions": [
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position\n            \n            # Try all possible words\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                if i + word_len > n:\n                    continue\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position, skip\n            \n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long to fit\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1"
  ],
  "all_solutions": [
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position\n            \n            # Try all possible words\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                if i + word_len > n:\n                    continue\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position, skip\n            \n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long to fit\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position\n            \n            # Try all possible words\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
      "solution_hash": "8b703898bd0afed5a25804c3b0b44aa4be7f4f47eb722579ebc93dfe6b108275",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06891155242919922
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                if i + word_len > n:\n                    continue\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
      "solution_hash": "8b703898bd0afed5a25804c3b0b44aa4be7f4f47eb722579ebc93dfe6b108275",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07184791564941406
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: empty string has cost 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # can't reach this position, skip\n            \n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                word_len = len(word)\n                \n                # Check if the word matches the target starting at position i\n                if i + word_len > n:\n                    continue  # word is too long to fit\n                if target[i:i+word_len] == word:\n                    if dp[i] + cost < dp[i + word_len]:\n                        dp[i + word_len] = dp[i] + cost\n        \n        return dp[n] if dp[n] != float('inf') else -1",
      "solution_hash": "8b703898bd0afed5a25804c3b0b44aa4be7f4f47eb722579ebc93dfe6b108275",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0723123550415039
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 53.553415060043335,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}