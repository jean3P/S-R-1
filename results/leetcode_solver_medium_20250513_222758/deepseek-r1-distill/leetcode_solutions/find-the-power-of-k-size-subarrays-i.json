{
  "problem_id": "find-the-power-of-k-size-subarrays-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] - sub[j-1] != 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
  "passed_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] - sub[j-1] != 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] - sub[j-1] != 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result",
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] - sub[j-1] != 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
      "solution_hash": "85d9ab7e024180740cf2aa7a7f9cf4d630ba3d9d951326cf7dee5298cf3a8dc5",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07069802284240723
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result",
      "solution_hash": "0456b83b6e611584ec58ef7612a0e52c05e8ab9ae12d3a92b99d26ce39cb4b4e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07467985153198242
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(max(sub))\n            else:\n                result.append(-1)\n        return result",
      "solution_hash": "0456b83b6e611584ec58ef7612a0e52c05e8ab9ae12d3a92b99d26ce39cb4b4e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0741722583770752
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 40.07688927650452,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}