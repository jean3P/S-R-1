{
  "problem_id": "report-spam-message",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
  "passed_solutions": [
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False"
  ],
  "all_solutions": [
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
    "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
      "solution_hash": "0ce069ab01df6ece9a1e5f0725fcadc8e2c4c9705fd5c21400b36bb6111180d6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06771993637084961
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
      "solution_hash": "0ce069ab01df6ece9a1e5f0725fcadc8e2c4c9705fd5c21400b36bb6111180d6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07143497467041016
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        banned = set(bannedWords)\n        count = 0\n        for word in message:\n            if word in banned:\n                count += 1\n                if count >= 2:\n                    return True\n        return False",
      "solution_hash": "0ce069ab01df6ece9a1e5f0725fcadc8e2c4c9705fd5c21400b36bb6111180d6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0717775821685791
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 35.754286766052246,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}