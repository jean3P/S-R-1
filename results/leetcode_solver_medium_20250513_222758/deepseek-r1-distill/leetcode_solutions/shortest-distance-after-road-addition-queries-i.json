{
  "problem_id": "shortest-distance-after-road-addition-queries-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # Compute the shortest path using BFS\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result",
  "passed_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # Compute the shortest path using BFS\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            visited = [False] * n\n            queue = deque()\n            queue.append((0, 0))\n            visited[0] = True\n            found = False\n            while queue:\n                current, dist = queue.popleft()\n                if current == n-1:\n                    result.append(dist)\n                    found = True\n                    break\n                for neighbor in adj[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            if not found:\n                result.append(-1)  # Should not happen as per problem constraints\n        return result",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                if current == n-1:\n                    break\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result"
  ],
  "all_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # Compute the shortest path using BFS\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            visited = [False] * n\n            queue = deque()\n            queue.append((0, 0))\n            visited[0] = True\n            found = False\n            while queue:\n                current, dist = queue.popleft()\n                if current == n-1:\n                    result.append(dist)\n                    found = True\n                    break\n                for neighbor in adj[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            if not found:\n                result.append(-1)  # Should not happen as per problem constraints\n        return result",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                if current == n-1:\n                    break\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # Compute the shortest path using BFS\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result",
      "solution_hash": "90a7e06869bbf24736c46dcceafd0fd0a50b9880a38bd6d3a52ded53886b552f",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07328605651855469
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            visited = [False] * n\n            queue = deque()\n            queue.append((0, 0))\n            visited[0] = True\n            found = False\n            while queue:\n                current, dist = queue.popleft()\n                if current == n-1:\n                    result.append(dist)\n                    found = True\n                    break\n                for neighbor in adj[current]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        queue.append((neighbor, dist + 1))\n            if not found:\n                result.append(-1)  # Should not happen as per problem constraints\n        return result",
      "solution_hash": "a4ec96f22bb00eaf318f78bfb1e00e07b13cfdf6eb003e27370392938e5793f1",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07443785667419434
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the adjacency list with the initial roads\n        adj = [[] for _ in range(n)]\n        for i in range(n-1):\n            adj[i].append(i+1)\n        \n        result = []\n        for u, v in queries:\n            adj[u].append(v)\n            # BFS to find the shortest path from 0 to n-1\n            dist = [float('inf')] * n\n            dist[0] = 0\n            q = deque([0])\n            while q:\n                current = q.popleft()\n                if current == n-1:\n                    break\n                for neighbor in adj[current]:\n                    if dist[neighbor] > dist[current] + 1:\n                        dist[neighbor] = dist[current] + 1\n                        q.append(neighbor)\n            result.append(dist[n-1])\n        \n        return result",
      "solution_hash": "7c054afc27d48fde523ee0b9a2fe3447d9ebfed7797fdb84a63efe676e83e5a6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07418489456176758
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 135.4539773464203,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}