{
  "problem_id": "k-th-nearest-obstacle-queries",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
  "passed_solutions": [
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result"
  ],
  "all_solutions": [
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
    "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
      "solution_hash": "3e21aedabf8f493b197773aa1c2e6e3afbd0cb5700f5633f1bc190e96584ae0a",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06864333152770996
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
      "solution_hash": "3e21aedabf8f493b197773aa1c2e6e3afbd0cb5700f5633f1bc190e96584ae0a",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07197904586791992
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "import heapq\n\nclass Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n        for x, y in queries:\n            distance = abs(x) + abs(y)\n            heapq.heappush(heap, -distance)  # Using max-heap by pushing negatives\n            if len(heap) > k:\n                heapq.heappop(heap)\n            if len(heap) < k:\n                result.append(-1)\n            else:\n                result.append(-heap[0])\n        return result",
      "solution_hash": "3e21aedabf8f493b197773aa1c2e6e3afbd0cb5700f5633f1bc190e96584ae0a",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07188653945922852
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 47.190428733825684,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}