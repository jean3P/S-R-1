2025-05-22 04:51:04,623 [INFO] root (run_leetcode_solver.py:178): Logging initialized at results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/logs/leetcode_solver_20250522_045104.log
2025-05-22 04:51:04,623 [INFO] root (run_leetcode_solver.py:210): Set PYTORCH_CUDA_ALLOC_CONF for better memory management
2025-05-22 04:51:04,623 [INFO] root (run_leetcode_solver.py:229): Enabled code_eval metrics from HuggingFace
2025-05-22 04:51:05,217 [INFO] root (run_leetcode_solver.py:237): CUDA available: True
2025-05-22 04:51:05,217 [INFO] root (run_leetcode_solver.py:238): CUDA version: 12.4
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:241): GPU 0: NVIDIA H100 NVL
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:242):   Memory: 93.00 GB
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:243):   CUDA Capability: 9.0
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:241): GPU 1: NVIDIA H100 NVL
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:242):   Memory: 93.00 GB
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:243):   CUDA Capability: 9.0
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:241): GPU 2: NVIDIA H100 NVL
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:242):   Memory: 93.00 GB
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:243):   CUDA Capability: 9.0
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:241): GPU 3: NVIDIA H100 NVL
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:242):   Memory: 93.00 GB
2025-05-22 04:51:05,261 [INFO] root (run_leetcode_solver.py:243):   CUDA Capability: 9.0
2025-05-22 04:51:05,641 [INFO] datasets (config.py:54): PyTorch version 2.5.1 available.
2025-05-22 04:51:05,813 [INFO] root (run_leetcode_solver.py:270): Using datasets library version 3.5.1
2025-05-22 04:51:08,681 [INFO] root (run_leetcode_solver.py:285): Using evaluate library version 0.4.3
2025-05-22 04:51:08,681 [INFO] src.data.leetcode_dataloader (leetcode_dataloader.py:102): Loading test dataset from repository file: /storage/homefs/jp22b083/SSI/S-R-1/data/repositories/LeetCodeDataset/data/LeetCodeDataset-v0.3.1-test.jsonl.gz
2025-05-22 04:51:08,681 [INFO] src.data.leetcode_dataloader (leetcode_dataloader.py:109): Using UBELIX cluster path: /storage/homefs/jp22b083/SSI/S-R-1/data/repositories/LeetCodeDataset/data/LeetCodeDataset-v0.3.1-test.jsonl.gz
2025-05-22 04:51:08,687 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657444743776 on /storage/homefs/jp22b083/.cache/huggingface/datasets/_storage_homefs_jp22b083_.cache_huggingface_datasets_generator_default-b40e8a9bd24735aa_0.0.0.lock
2025-05-22 04:51:08,688 [DEBUG] filelock (_api.py:334): Lock 140657444743776 acquired on /storage/homefs/jp22b083/.cache/huggingface/datasets/_storage_homefs_jp22b083_.cache_huggingface_datasets_generator_default-b40e8a9bd24735aa_0.0.0.lock
2025-05-22 04:51:08,688 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657444743776 on /storage/homefs/jp22b083/.cache/huggingface/datasets/_storage_homefs_jp22b083_.cache_huggingface_datasets_generator_default-b40e8a9bd24735aa_0.0.0.lock
2025-05-22 04:51:08,688 [DEBUG] filelock (_api.py:367): Lock 140657444743776 released on /storage/homefs/jp22b083/.cache/huggingface/datasets/_storage_homefs_jp22b083_.cache_huggingface_datasets_generator_default-b40e8a9bd24735aa_0.0.0.lock
2025-05-22 04:51:08,702 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657444336928 on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0_builder.lock
2025-05-22 04:51:08,703 [DEBUG] filelock (_api.py:334): Lock 140657444336928 acquired on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0_builder.lock
2025-05-22 04:51:08,704 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete/generator-train-00000-00000-of-NNNNN.arrow
2025-05-22 04:51:08,740 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657443162672 on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete_info.lock
2025-05-22 04:51:08,740 [DEBUG] filelock (_api.py:334): Lock 140657443162672 acquired on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete_info.lock
2025-05-22 04:51:08,740 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete/dataset_info.json
2025-05-22 04:51:08,741 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657443162672 on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete_info.lock
2025-05-22 04:51:08,741 [DEBUG] filelock (_api.py:367): Lock 140657443162672 released on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0.incomplete_info.lock
2025-05-22 04:51:08,741 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657444336928 on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0_builder.lock
2025-05-22 04:51:08,741 [DEBUG] filelock (_api.py:367): Lock 140657444336928 released on /storage/homefs/jp22b083/.cache/huggingface/datasets/generator/default-b40e8a9bd24735aa/0.0.0_builder.lock
2025-05-22 04:51:08,744 [INFO] src.data.leetcode_dataloader (leetcode_dataloader.py:161): Loaded 100 problems from the test dataset
2025-05-22 04:51:08,767 [INFO] root (run_leetcode_solver.py:337): Processing 20 problems by ID: ['shortest-distance-after-road-addition-queries-i', 'number-of-subsequences-with-odd-sum', 'count-the-number-of-good-nodes', 'construct-string-with-minimum-cost-easy', 'find-the-power-of-k-size-subarrays-i', 'find-the-power-of-k-size-subarrays-ii', 'maximum-energy-boost-from-two-drinks', 'count-almost-equal-pairs-i', 'hash-divided-string', 'k-th-nearest-obstacle-queries', 'maximize-score-of-numbers-in-ranges', 'reach-end-of-array-with-max-score', 'sum-of-consecutive-subarrays', 'find-a-safe-walk-through-a-grid', 'maximum-multiplication-score', 'minimum-number-of-valid-strings-to-form-target-i', 'report-spam-message', 'minimum-number-of-seconds-to-make-mountain-height-zero', 'count-substrings-that-can-be-rearranged-to-contain-a-string-i', 'maximize-the-total-height-of-unique-towers']
2025-05-22 04:51:08,767 [INFO] root (run_leetcode_solver.py:338): Processing 0 problems by index: []
2025-05-22 04:51:10,856 [INFO] src.utils.leetcode_test_runner (leetcode_test_runner.py:51): Loaded 180 pre-installed packages
2025-05-22 04:51:10,856 [INFO] src.utils.leetcode_test_runner (leetcode_test_runner.py:36): Using persistent conda environment: env_leet_code_issues
2025-05-22 04:51:10,856 [INFO] src.utils.leetcode_test_runner (leetcode_test_runner.py:239): Initialized LeetCode environment manager for testing
2025-05-22 04:51:10,856 [WARNING] src.evaluation.code_evaluator (code_evaluator.py:40): Setting HF_ALLOW_CODE_EVAL=1. This permits execution of untrusted model-generated code. Make sure this is running in a sandbox environment.
2025-05-22 04:51:10,858 [DEBUG] urllib3.connectionpool (connectionpool.py:1049): Starting new HTTPS connection (1): s3.amazonaws.com:443
2025-05-22 04:51:11,185 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://s3.amazonaws.com:443 "HEAD /datasets.huggingface.co/datasets/metrics/evaluate-metric/code_eval/evaluate-metric/code_eval.py HTTP/1.1" 404 0
2025-05-22 04:51:11,187 [DEBUG] urllib3.connectionpool (connectionpool.py:1049): Starting new HTTPS connection (1): huggingface.co:443
2025-05-22 04:51:11,320 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /spaces/evaluate-metric/code_eval/resolve/v0.4.3/code_eval.py HTTP/1.1" 404 0
2025-05-22 04:51:11,321 [DEBUG] urllib3.connectionpool (connectionpool.py:1049): Starting new HTTPS connection (1): huggingface.co:443
2025-05-22 04:51:11,436 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /spaces/evaluate-metric/code_eval/resolve/main/code_eval.py HTTP/1.1" 200 0
2025-05-22 04:51:11,488 [DEBUG] urllib3.connectionpool (connectionpool.py:1049): Starting new HTTPS connection (1): huggingface.co:443
2025-05-22 04:51:11,607 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /spaces/evaluate-metric/code_eval/resolve/main/execute.py HTTP/1.1" 200 0
2025-05-22 04:51:11,609 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657444338416 on /storage/homefs/jp22b083/.cache/huggingface/modules/evaluate_modules/metrics/evaluate-metric--code_eval.lock
2025-05-22 04:51:11,609 [DEBUG] filelock (_api.py:334): Lock 140657444338416 acquired on /storage/homefs/jp22b083/.cache/huggingface/modules/evaluate_modules/metrics/evaluate-metric--code_eval.lock
2025-05-22 04:51:11,609 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657444338416 on /storage/homefs/jp22b083/.cache/huggingface/modules/evaluate_modules/metrics/evaluate-metric--code_eval.lock
2025-05-22 04:51:11,609 [DEBUG] filelock (_api.py:367): Lock 140657444338416 released on /storage/homefs/jp22b083/.cache/huggingface/modules/evaluate_modules/metrics/evaluate-metric--code_eval.lock
2025-05-22 04:51:12,888 [INFO] src.evaluation.code_evaluator (code_evaluator.py:50): Successfully loaded code_eval metric
2025-05-22 04:51:12,888 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:65): Initialized code evaluator with HuggingFace code_eval
2025-05-22 04:51:12,888 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:69): Initialized LeetCodeSolutionPipeline with model deepseek-r1-distill
2025-05-22 04:51:12,888 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:70): Tree parameters: initial_k=3, branch_factor=3, max_depth=3
2025-05-22 04:51:12,888 [INFO] root (run_leetcode_solver.py:348): Processing problem ID shortest-distance-after-road-addition-queries-i with model deepseek-r1-distill
2025-05-22 04:51:12,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem shortest-distance-after-road-addition-queries-i
2025-05-22 04:51:12,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 04:51:12,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:76): Initializing model: deepseek-r1-distill
2025-05-22 04:51:13,078 [INFO] src.models (__init__.py:23): Creating model: deepseek-r1-distill
2025-05-22 04:51:13,175 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=0.00GB, allocated=0.00GB
2025-05-22 04:51:13,176 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=0.00GB, allocated=0.00GB
2025-05-22 04:51:13,176 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=0.00GB, allocated=0.00GB
2025-05-22 04:51:13,176 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=0.00GB, allocated=0.00GB
2025-05-22 04:51:13,177 [DEBUG] urllib3.connectionpool (connectionpool.py:1049): Starting new HTTPS connection (1): huggingface.co:443
2025-05-22 04:51:13,300 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /deepseek-ai/DeepSeek-R1-Distill-Qwen-32B/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-22 04:51:13,577 [INFO] src.models.base_model (base_model.py:152): Using memory offloading: {0: '91GiB', 1: '91GiB', 2: '91GiB', 3: '91GiB', 'cpu': '32GiB'}
2025-05-22 04:51:13,692 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /deepseek-ai/DeepSeek-R1-Distill-Qwen-32B/resolve/main/config.json HTTP/1.1" 200 0
2025-05-22 04:52:14,826 [DEBUG] urllib3.connectionpool (connectionpool.py:544): https://huggingface.co:443 "HEAD /deepseek-ai/DeepSeek-R1-Distill-Qwen-32B/resolve/main/generation_config.json HTTP/1.1" 200 0
2025-05-22 04:52:14,973 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.18GB, allocated=14.17GB
2025-05-22 04:52:14,973 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.35GB, allocated=16.35GB
2025-05-22 04:52:14,973 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.35GB, allocated=16.35GB
2025-05-22 04:52:14,974 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.18GB, allocated=14.17GB
2025-05-22 04:52:14,974 [INFO] src.models.deepseek_r1_model (deepseek_r1_model.py:16): Initialized DeepSeek R1 model with repo_id: deepseek-ai/DeepSeek-R1-Distill-Qwen-32B
2025-05-22 04:52:15,156 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.18GB, allocated=14.17GB
2025-05-22 04:52:15,157 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.35GB, allocated=16.35GB
2025-05-22 04:52:15,157 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.35GB, allocated=16.35GB
2025-05-22 04:52:15,157 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.18GB, allocated=14.17GB
2025-05-22 04:52:34,549 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:34,549 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:34,550 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:34,550 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:34,550 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (925 chars)
2025-05-22 04:52:34,733 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:34,734 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:34,734 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:34,734 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:51,122 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:51,122 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:51,123 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:51,123 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:51,123 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (744 chars)
2025-05-22 04:52:51,307 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:52:51,307 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:51,307 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:52:51,307 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:10,660 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:10,660 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:10,660 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:10,661 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:10,661 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (980 chars)
2025-05-22 04:53:10,661 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import deque

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        # Initialize the adjacency list with the initial roads
        adj = [[] for _ in range(n)]
        for i in range(n-1):
            adj[i].append(i+1)
        
        result = []
        for u, v in queries:
            adj[u].append(v)
            # Perform BFS to find the shortest path from 0 to n-1
            dist = [float('inf')] * n
            dist[0] = 0
            q = deque([0])
            while q:
                current = q.popleft()
                if current == n-1:
                    break
                for neighbor in adj[current]:
                    if dist[neighbor] > dist[current] + 1:
                        dist[neighbor] = dist[current] + 1
                        q.append(neighbor)
            result.append(dist[n-1])
        return result
2025-05-22 04:53:10,661 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(n = 7,queries = [[0, 5], [1, 6], [2, 4]]) == [2, 2, 2]
    assert candidate(n = 8,queries = [[1, 5], [2, 6], [3, 7], [0, 4], [0, 6], [0, 7]]) == [4, 4, 4, 4, 2, 1]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 3]]) == [4, 3, 3]
    assert candidate(n = 8,queries = [[0, 6], [1, 7], [2, 5], [3, 4]]) == [2, 2, 2, 2]
    assert candidate(n = 7,queries = [[1, 5], [2, 6], [3, 5]]) == [3, 3, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 4], [0, 3]]) == [4, 4, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 1], [3, 4]]) == [4, 3, 3, 3]
    assert candidate(n = 5,queries = [[2, 4], [0, 2], [0, 4]]) == [3, 2, 1]
    assert candidate(n = 4,queries = [[0, 3], [0, 2]]) == [1, 1]
    assert candidate(n = 7,queries = [[1, 4], [2, 6], [3, 5], [0, 3], [0, 5]]) == [4, 3, 3, 3, 2]
    assert candidate(n = 50,queries = [[0, 49], [0, 48], [1, 47], [2, 46], [3, 45], [4, 44], [5, 43], [6, 42], [7, 41], [8, 40], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 25], [0, 30], [0, 35], [0, 40], [0, 45], [5, 15], [5, 20], [5, 25], [5, 30], [5, 35], [5, 40], [5, 45], [10, 20], [10, 25], [10, 30], [10, 35], [10, 40], [10, 45], [15, 25], [15, 30], [15, 35], [15, 40], [15, 45], [20, 30], [20, 35], [20, 40], [20, 45], [25, 35], [25, 40], [25, 45], [30, 40], [30, 45], [35, 45]]) == [25, 20, 15, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 45,queries = [[0, 18], [5, 28], [10, 34], [15, 39], [20, 41], [25, 43], [30, 44], [35, 42], [1, 19], [6, 30], [11, 35], [16, 40], [21, 42], [26, 36], [31, 37]]) == [27, 22, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 15,queries = [[0, 10], [1, 8], [2, 12], [3, 7], [4, 9], [5, 11], [6, 13], [7, 14]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 12,queries = [[0, 5], [0, 11], [1, 10], [2, 8], [3, 9], [4, 7], [5, 6]]) == [7, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [0, 10], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [0, 7], [2, 5], [1, 4]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [1, 4], [2, 6], [3, 7], [8, 9]]) == [5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [0, 47], [2, 45], [4, 43], [6, 41], [8, 39], [10, 38], [12, 37], [14, 36], [16, 35], [18, 34], [20, 33], [22, 32], [24, 31], [26, 30], [28, 29]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 15], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15]]) == [10, 6, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2]
    assert candidate(n = 12,queries = [[0, 11], [0, 6], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [40, 9], [41, 8], [42, 7], [43, 6], [44, 5], [45, 4], [46, 3], [47, 2], [48, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 10], [0, 15], [0, 20], [5, 25], [5, 29], [10, 19], [10, 24], [15, 23], [15, 28], [20, 22], [20, 27], [25, 26]]) == [20, 15, 10, 10, 6, 6, 6, 6, 3, 3, 3, 3]
    assert candidate(n = 100,queries = [[0, 99], [0, 98], [1, 97], [2, 96], [3, 95], [4, 94], [5, 93], [6, 92], [7, 91], [8, 90], [9, 89], [10, 88], [11, 87], [12, 86], [13, 85], [14, 84], [15, 83], [16, 82], [17, 81], [18, 80], [19, 79], [20, 78], [21, 77], [22, 76], [23, 75], [24, 74], [25, 73], [26, 72], [27, 71], [28, 70], [29, 69], [30, 68], [31, 67], [32, 66], [33, 65], [34, 64], [35, 63], [36, 62], [37, 61], [38, 60], [39, 59], [40, 58], [41, 57], [42, 56], [43, 55], [44, 54], [45, 53], [46, 52], [47, 51], [48, 50]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 20], [1, 21], [2, 22], [3, 23], [4, 24], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 25], [11, 26], [12, 27], [13, 28], [14, 29], [15, 28], [16, 29], [0, 15], [2, 21], [4, 23], [6, 25], [8, 27]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 13], [6, 14], [0, 9], [2, 11], [4, 12]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [0, 12], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [0, 17], [2, 15], [4, 13], [6, 11], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 12,queries = [[0, 6], [2, 8], [3, 9], [5, 10], [7, 11], [1, 5]]) == [6, 6, 6, 6, 3, 3]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 15], [5, 25], [10, 30], [15, 35], [20, 37], [25, 38], [30, 39], [1, 16], [6, 26], [11, 31], [16, 36], [21, 32], [26, 33]]) == [25, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 7], [2, 9], [3, 6], [0, 5], [4, 8]]) == [3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 14], [1, 10], [2, 8], [3, 9], [4, 11], [5, 12], [6, 13]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 15], [1, 16]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5]
    assert candidate(n = 12,queries = [[0, 2], [0, 4], [0, 6], [0, 8], [0, 10], [1, 3], [1, 5], [1, 7], [1, 9], [1, 11]]) == [10, 8, 6, 4, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 15,queries = [[0, 7], [1, 9], [2, 11], [3, 10], [4, 12], [5, 13], [6, 14]]) == [8, 7, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 5], [1, 7], [3, 8], [2, 6], [0, 9]]) == [5, 4, 4, 4, 1]
    assert candidate(n = 15,queries = [[0, 14], [0, 7], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 25], [1, 26], [2, 27], [3, 28], [4, 29], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [0, 7], [2, 9]]) == [5, 5, 5, 5, 5, 3, 3]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 30,queries = [[0, 12], [5, 18], [10, 22], [15, 24], [20, 28], [25, 29], [1, 13], [6, 19], [11, 23], [16, 25]]) == [18, 17, 17, 10, 10, 7, 7, 7, 7, 7]
    assert candidate(n = 10,queries = [[0, 4], [0, 5], [0, 8], [0, 6], [1, 3], [2, 7], [3, 9], [4, 8]]) == [6, 5, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [0, 5], [1, 8], [2, 4], [3, 7]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 10], [0, 15], [0, 20], [0, 25], [0, 30], [5, 15], [5, 20], [5, 25], [5, 30], [10, 20], [10, 25], [10, 30], [15, 25], [15, 30], [20, 30]]) == [30, 25, 20, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 40,queries = [[0, 35], [1, 36], [2, 37], [3, 38], [4, 39], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 30], [11, 31], [12, 32], [13, 33], [14, 34], [15, 20], [16, 21], [17, 22], [18, 23], [19, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 45], [1, 46], [2, 47], [3, 48], [4, 49], [5, 35], [6, 36], [7, 37], [8, 38], [9, 39], [10, 40], [11, 41], [12, 42], [13, 43], [14, 44], [15, 30], [16, 31], [17, 32], [18, 33], [19, 34], [20, 25], [21, 26], [22, 27], [23, 28], [24, 29]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 12], [2, 13], [3, 11], [4, 9], [5, 10], [6, 8], [7, 10], [8, 13], [9, 14]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [5, 9], [2, 6], [1, 8], [3, 7]]) == [5, 2, 2, 2, 2]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 9], [2, 11], [4, 13], [6, 15], [8, 17]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2]
    assert candidate(n = 25,queries = [[0, 24], [0, 23], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 4], [1, 8], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [0, 13], [1, 14]]) == [11, 8, 7, 7, 4, 4, 4, 2, 2]
    assert candidate(n = 20,queries = [[0, 15], [5, 18], [10, 19], [1, 12], [3, 17], [7, 16], [9, 14], [2, 13]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 2], [1, 3], [2, 9], [3, 5], [4, 8], [5, 7], [6, 9], [7, 8]]) == [8, 8, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [0, 27], [2, 25], [4, 23], [6, 21], [8, 19], [10, 18], [12, 17], [14, 16]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 15], [1, 8], [2, 10], [3, 12], [4, 14], [5, 16], [6, 18], [7, 20], [8, 22], [9, 24], [10, 17], [11, 19], [12, 21], [13, 23]]) == [10, 10, 10, 10, 10, 10, 10, 10, 5, 4, 4, 4, 4, 4]
    assert candidate(n = 18,queries = [[0, 17], [0, 9], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 35,queries = [[0, 13], [5, 20], [10, 24], [15, 28], [20, 32], [25, 34], [30, 33], [1, 14], [6, 21], [11, 25], [16, 29], [21, 31]]) == [22, 20, 20, 10, 9, 9, 8, 8, 8, 8, 8, 8]
    assert candidate(n = 15,queries = [[0, 14], [0, 13], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 10], [5, 20], [10, 22], [15, 23], [20, 24], [2, 12], [7, 17], [12, 21]]) == [15, 10, 4, 4, 4, 4, 4, 4]
    assert candidate(n = 20,queries = [[0, 19], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 13], [6, 14], [7, 12], [8, 11], [9, 10]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 18], [11, 19], [12, 20], [13, 21], [14, 22], [0, 8], [2, 16], [4, 18], [6, 20], [8, 22]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 50,queries = [[0, 20], [5, 30], [10, 36], [15, 40], [20, 44], [25, 47], [30, 48], [35, 49], [40, 46], [1, 21], [6, 31], [11, 37], [16, 41], [21, 43], [26, 38], [31, 39], [36, 45]]) == [30, 25, 24, 24, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 25,queries = [[0, 24], [0, 13], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 5], [2, 8], [3, 7], [4, 6], [5, 15], [6, 12], [7, 18], [8, 16], [9, 19]]) == [10, 10, 10, 10, 10, 7, 7, 6, 6, 5]

2025-05-22 04:53:10,661 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().shortestDistanceAfterQueries
2025-05-22 04:53:10,661 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 04:53:10,661 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(n = 7,queries = [[0, 5], [1, 6], [2, 4]]) == [2, 2, 2]
    assert candidate(n = 8,queries = [[1, 5], [2, 6], [3, 7], [0, 4], [0, 6], [0, 7]]) == [4, 4, 4, 4, 2, 1]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 3]]) == [4, 3, 3]
    assert candidate(n = 8,queries = [[0, 6], [1, 7], [2, 5], [3, 4]]) == [2, 2, 2, 2]
    assert candidate(n = 7,queries = [[1, 5], [2, 6], [3, 5]]) == [3, 3, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 4], [0, 3]]) == [4, 4, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 1], [3, 4]]) == [4, 3, 3, 3]
    assert candidate(n = 5,queries = [[2, 4], [0, 2], [0, 4]]) == [3, 2, 1]
    assert candidate(n = 4,queries = [[0, 3], [0, 2]]) == [1, 1]
    assert candidate(n = 7,queries = [[1, 4], [2, 6], [3, 5], [0, 3], [0, 5]]) == [4, 3, 3, 3, 2]
    assert candidate(n = 50,queries = [[0, 49], [0, 48], [1, 47], [2, 46], [3, 45], [4, 44], [5, 43], [6, 42], [7, 41], [8, 40], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 25], [0, 30], [0, 35], [0, 40], [0, 45], [5, 15], [5, 20], [5, 25], [5, 30], [5, 35], [5, 40], [5, 45], [10, 20], [10, 25], [10, 30], [10, 35], [10, 40], [10, 45], [15, 25], [15, 30], [15, 35], [15, 40], [15, 45], [20, 30], [20, 35], [20, 40], [20, 45], [25, 35], [25, 40], [25, 45], [30, 40], [30, 45], [35, 45]]) == [25, 20, 15, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 45,queries = [[0, 18], [5, 28], [10, 34], [15, 39], [20, 41], [25, 43], [30, 44], [35, 42], [1, 19], [6, 30], [11, 35], [16, 40], [21, 42], [26, 36], [31, 37]]) == [27, 22, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 15,queries = [[0, 10], [1, 8], [2, 12], [3, 7], [4, 9], [5, 11], [6, 13], [7, 14]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 12,queries = [[0, 5], [0, 11], [1, 10], [2, 8], [3, 9], [4, 7], [5, 6]]) == [7, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [0, 10], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [0, 7], [2, 5], [1, 4]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [1, 4], [2, 6], [3, 7], [8, 9]]) == [5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [0, 47], [2, 45], [4, 43], [6, 41], [8, 39], [10, 38], [12, 37], [14, 36], [16, 35], [18, 34], [20, 33], [22, 32], [24, 31], [26, 30], [28, 29]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 15], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15]]) == [10, 6, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2]
    assert candidate(n = 12,queries = [[0, 11], [0, 6], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [40, 9], [41, 8], [42, 7], [43, 6], [44, 5], [45, 4], [46, 3], [47, 2], [48, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 10], [0, 15], [0, 20], [5, 25], [5, 29], [10, 19], [10, 24], [15, 23], [15, 28], [20, 22], [20, 27], [25, 26]]) == [20, 15, 10, 10, 6, 6, 6, 6, 3, 3, 3, 3]
    assert candidate(n = 100,queries = [[0, 99], [0, 98], [1, 97], [2, 96], [3, 95], [4, 94], [5, 93], [6, 92], [7, 91], [8, 90], [9, 89], [10, 88], [11, 87], [12, 86], [13, 85], [14, 84], [15, 83], [16, 82], [17, 81], [18, 80], [19, 79], [20, 78], [21, 77], [22, 76], [23, 75], [24, 74], [25, 73], [26, 72], [27, 71], [28, 70], [29, 69], [30, 68], [31, 67], [32, 66], [33, 65], [34, 64], [35, 63], [36, 62], [37, 61], [38, 60], [39, 59], [40, 58], [41, 57], [42, 56], [43, 55], [44, 54], [45, 53], [46, 52], [47, 51], [48, 50]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 20], [1, 21], [2, 22], [3, 23], [4, 24], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 25], [11, 26], [12, 27], [13, 28], [14, 29], [15, 28], [16, 29], [0, 15], [2, 21], [4, 23], [6, 25], [8, 27]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 13], [6, 14], [0, 9], [2, 11], [4, 12]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [0, 12], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [0, 17], [2, 15], [4, 13], [6, 11], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 12,queries = [[0, 6], [2, 8], [3, 9], [5, 10], [7, 11], [1, 5]]) == [6, 6, 6, 6, 3, 3]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 15], [5, 25], [10, 30], [15, 35], [20, 37], [25, 38], [30, 39], [1, 16], [6, 26], [11, 31], [16, 36], [21, 32], [26, 33]]) == [25, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 7], [2, 9], [3, 6], [0, 5], [4, 8]]) == [3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 14], [1, 10], [2, 8], [3, 9], [4, 11], [5, 12], [6, 13]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 15], [1, 16]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5]
    assert candidate(n = 12,queries = [[0, 2], [0, 4], [0, 6], [0, 8], [0, 10], [1, 3], [1, 5], [1, 7], [1, 9], [1, 11]]) == [10, 8, 6, 4, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 15,queries = [[0, 7], [1, 9], [2, 11], [3, 10], [4, 12], [5, 13], [6, 14]]) == [8, 7, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 5], [1, 7], [3, 8], [2, 6], [0, 9]]) == [5, 4, 4, 4, 1]
    assert candidate(n = 15,queries = [[0, 14], [0, 7], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 25], [1, 26], [2, 27], [3, 28], [4, 29], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [0, 7], [2, 9]]) == [5, 5, 5, 5, 5, 3, 3]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 30,queries = [[0, 12], [5, 18], [10, 22], [15, 24], [20, 28], [25, 29], [1, 13], [6, 19], [11, 23], [16, 25]]) == [18, 17, 17, 10, 10, 7, 7, 7, 7, 7]
    assert candidate(n = 10,queries = [[0, 4], [0, 5], [0, 8], [0, 6], [1, 3], [2, 7], [3, 9], [4, 8]]) == [6, 5, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [0, 5], [1, 8], [2, 4], [3, 7]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 10], [0, 15], [0, 20], [0, 25], [0, 30], [5, 15], [5, 20], [5, 25], [5, 30], [10, 20], [10, 25], [10, 30], [15, 25], [15, 30], [20, 30]]) == [30, 25, 20, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 40,queries = [[0, 35], [1, 36], [2, 37], [3, 38], [4, 39], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 30], [11, 31], [12, 32], [13, 33], [14, 34], [15, 20], [16, 21], [17, 22], [18, 23], [19, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 45], [1, 46], [2, 47], [3, 48], [4, 49], [5, 35], [6, 36], [7, 37], [8, 38], [9, 39], [10, 40], [11, 41], [12, 42], [13, 43], [14, 44], [15, 30], [16, 31], [17, 32], [18, 33], [19, 34], [20, 25], [21, 26], [22, 27], [23, 28], [24, 29]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 12], [2, 13], [3, 11], [4, 9], [5, 10], [6, 8], [7, 10], [8, 13], [9, 14]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [5, 9], [2, 6], [1, 8], [3, 7]]) == [5, 2, 2, 2, 2]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 9], [2, 11], [4, 13], [6, 15], [8, 17]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2]
    assert candidate(n = 25,queries = [[0, 24], [0, 23], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 4], [1, 8], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [0, 13], [1, 14]]) == [11, 8, 7, 7, 4, 4, 4, 2, 2]
    assert candidate(n = 20,queries = [[0, 15], [5, 18], [10, 19], [1, 12], [3, 17], [7, 16], [9, 14], [2, 13]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 2], [1, 3], [2, 9], [3, 5], [4, 8], [5, 7], [6, 9], [7, 8]]) == [8, 8, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [0, 27], [2, 25], [4, 23], [6, 21], [8, 19], [10, 18], [12, 17], [14, 16]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 15], [1, 8], [2, 10], [3, 12], [4, 14], [5, 16], [6, 18], [7, 20], [8, 22], [9, 24], [10, 17], [11, 19], [12, 21], [13, 23]]) == [10, 10, 10, 10, 10, 10, 10, 10, 5, 4, 4, 4, 4, 4]
    assert candidate(n = 18,queries = [[0, 17], [0, 9], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 35,queries = [[0, 13], [5, 20], [10, 24], [15, 28], [20, 32], [25, 34], [30, 33], [1, 14], [6, 21], [11, 25], [16, 29], [21, 31]]) == [22, 20, 20, 10, 9, 9, 8, 8, 8, 8, 8, 8]
    assert candidate(n = 15,queries = [[0, 14], [0, 13], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 10], [5, 20], [10, 22], [15, 23], [20, 24], [2, 12], [7, 17], [12, 21]]) == [15, 10, 4, 4, 4, 4, 4, 4]
    assert candidate(n = 20,queries = [[0, 19], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 13], [6, 14], [7, 12], [8, 11], [9, 10]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 18], [11, 19], [12, 20], [13, 21], [14, 22], [0, 8], [2, 16], [4, 18], [6, 20], [8, 22]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 50,queries = [[0, 20], [5, 30], [10, 36], [15, 40], [20, 44], [25, 47], [30, 48], [35, 49], [40, 46], [1, 21], [6, 31], [11, 37], [16, 41], [21, 43], [26, 38], [31, 39], [36, 45]]) == [30, 25, 24, 24, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 25,queries = [[0, 24], [0, 13], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 5], [2, 8], [3, 7], [4, 6], [5, 15], [6, 12], [7, 18], [8, 16], [9, 19]]) == [10, 10, 10, 10, 10, 7, 7, 6, 6, 5]

2025-05-22 04:53:10,661 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().shortestDistanceAfterQueries
2025-05-22 04:53:10,661 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import deque

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        # Initialize the adjacency list with the initial roads
        adj = [[] for _ in range(n)]
        for i in range(n-1):
            adj[i].append(i+1)

        result = []
        for u, v in queries:
            adj[u].append(v)
            # Perform BFS to find the shortest path from 0 to n-1
            dist = [float('inf')] * n
            dist[0] = 0
            q = deque([0])
            while q:
                current = q.popleft()
                if current == n-1:
                    break
                for neighbor in adj[current]:
                    if dist[neighbor] > dist[current] + 1:
                        dist[neighbor] = dist[current] + 1
                        q.append(neighbor)
            result.append(dist[n-1])
        return result
2025-05-22 04:53:10,662 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import deque

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        # Initialize the adjacency list with the initial roads
        adj = [[] for _ in range(n)]
        for i in range(n-1):
            adj[i].append(i+1)

        result = []
        for u, v in queries:
            adj[u].append(v)
            # Perform BFS to find the shortest path from 0 to n-1
            dist = [float('inf')] * n
            dist[0] = 0
            q = deque([0])
            while q:
                current = q.popleft()
                if current == n-1:
                    break
                for neighbor in adj[current]:
                    if dist[neighbor] > dist[current] + 1:
                        dist[neighbor] = dist[current] + 1
                        q.append(neighbor)
            result.append(dist[n-1])
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(n = 7,queries = [[0, 5], [1, 6], [2, 4]]) == [2, 2, 2]
    assert candidate(n = 8,queries = [[1, 5], [2, 6], [3, 7], [0, 4], [0, 6], [0, 7]]) == [4, 4, 4, 4, 2, 1]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 3]]) == [4, 3, 3]
    assert candidate(n = 8,queries = [[0, 6], [1, 7], [2, 5], [3, 4]]) == [2, 2, 2, 2]
    assert candidate(n = 7,queries = [[1, 5], [2, 6], [3, 5]]) == [3, 3, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 4], [0, 3]]) == [4, 4, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 1], [3, 4]]) == [4, 3, 3, 3]
    assert candidate(n = 5,queries = [[2, 4], [0, 2], [0, 4]]) == [3, 2, 1]
    assert candidate(n = 4,queries = [[0, 3], [0, 2]]) == [1, 1]
    assert candidate(n = 7,queries = [[1, 4], [2, 6], [3, 5], [0, 3], [0, 5]]) == [4, 3, 3, 3, 2]
    assert candidate(n = 50,queries = [[0, 49], [0, 48], [1, 47], [2, 46], [3, 45], [4, 44], [5, 43], [6, 42], [7, 41], [8, 40], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 25], [0, 30], [0, 35], [0, 40], [0, 45], [5, 15], [5, 20], [5, 25], [5, 30], [5, 35], [5, 40], [5, 45], [10, 20], [10, 25], [10, 30], [10, 35], [10, 40], [10, 45], [15, 25], [15, 30], [15, 35], [15, 40], [15, 45], [20, 30], [20, 35], [20, 40], [20, 45], [25, 35], [25, 40], [25, 45], [30, 40], [30, 45], [35, 45]]) == [25, 20, 15, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 45,queries = [[0, 18], [5, 28], [10, 34], [15, 39], [20, 41], [25, 43], [30, 44], [35, 42], [1, 19], [6, 30], [11, 35], [16, 40], [21, 42], [26, 36], [31, 37]]) == [27, 22, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 15,queries = [[0, 10], [1, 8], [2, 12], [3, 7], [4, 9], [5, 11], [6, 13], [7, 14]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 12,queries = [[0, 5], [0, 11], [1, 10], [2, 8], [3, 9], [4, 7], [5, 6]]) == [7, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [0, 10], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [0, 7], [2, 5], [1, 4]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [1, 4], [2, 6], [3, 7], [8, 9]]) == [5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [0, 47], [2, 45], [4, 43], [6, 41], [8, 39], [10, 38], [12, 37], [14, 36], [16, 35], [18, 34], [20, 33], [22, 32], [24, 31], [26, 30], [28, 29]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 15], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15]]) == [10, 6, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2]
    assert candidate(n = 12,queries = [[0, 11], [0, 6], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [40, 9], [41, 8], [42, 7], [43, 6], [44, 5], [45, 4], [46, 3], [47, 2], [48, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 10], [0, 15], [0, 20], [5, 25], [5, 29], [10, 19], [10, 24], [15, 23], [15, 28], [20, 22], [20, 27], [25, 26]]) == [20, 15, 10, 10, 6, 6, 6, 6, 3, 3, 3, 3]
    assert candidate(n = 100,queries = [[0, 99], [0, 98], [1, 97], [2, 96], [3, 95], [4, 94], [5, 93], [6, 92], [7, 91], [8, 90], [9, 89], [10, 88], [11, 87], [12, 86], [13, 85], [14, 84], [15, 83], [16, 82], [17, 81], [18, 80], [19, 79], [20, 78], [21, 77], [22, 76], [23, 75], [24, 74], [25, 73], [26, 72], [27, 71], [28, 70], [29, 69], [30, 68], [31, 67], [32, 66], [33, 65], [34, 64], [35, 63], [36, 62], [37, 61], [38, 60], [39, 59], [40, 58], [41, 57], [42, 56], [43, 55], [44, 54], [45, 53], [46, 52], [47, 51], [48, 50]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 20], [1, 21], [2, 22], [3, 23], [4, 24], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 25], [11, 26], [12, 27], [13, 28], [14, 29], [15, 28], [16, 29], [0, 15], [2, 21], [4, 23], [6, 25], [8, 27]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 13], [6, 14], [0, 9], [2, 11], [4, 12]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [0, 12], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [0, 17], [2, 15], [4, 13], [6, 11], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 12,queries = [[0, 6], [2, 8], [3, 9], [5, 10], [7, 11], [1, 5]]) == [6, 6, 6, 6, 3, 3]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 15], [5, 25], [10, 30], [15, 35], [20, 37], [25, 38], [30, 39], [1, 16], [6, 26], [11, 31], [16, 36], [21, 32], [26, 33]]) == [25, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 7], [2, 9], [3, 6], [0, 5], [4, 8]]) == [3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 14], [1, 10], [2, 8], [3, 9], [4, 11], [5, 12], [6, 13]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 15], [1, 16]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5]
    assert candidate(n = 12,queries = [[0, 2], [0, 4], [0, 6], [0, 8], [0, 10], [1, 3], [1, 5], [1, 7], [1, 9], [1, 11]]) == [10, 8, 6, 4, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 15,queries = [[0, 7], [1, 9], [2, 11], [3, 10], [4, 12], [5, 13], [6, 14]]) == [8, 7, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 5], [1, 7], [3, 8], [2, 6], [0, 9]]) == [5, 4, 4, 4, 1]
    assert candidate(n = 15,queries = [[0, 14], [0, 7], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 25], [1, 26], [2, 27], [3, 28], [4, 29], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [0, 7], [2, 9]]) == [5, 5, 5, 5, 5, 3, 3]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 30,queries = [[0, 12], [5, 18], [10, 22], [15, 24], [20, 28], [25, 29], [1, 13], [6, 19], [11, 23], [16, 25]]) == [18, 17, 17, 10, 10, 7, 7, 7, 7, 7]
    assert candidate(n = 10,queries = [[0, 4], [0, 5], [0, 8], [0, 6], [1, 3], [2, 7], [3, 9], [4, 8]]) == [6, 5, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [0, 5], [1, 8], [2, 4], [3, 7]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 10], [0, 15], [0, 20], [0, 25], [0, 30], [5, 15], [5, 20], [5, 25], [5, 30], [10, 20], [10, 25], [10, 30], [15, 25], [15, 30], [20, 30]]) == [30, 25, 20, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 40,queries = [[0, 35], [1, 36], [2, 37], [3, 38], [4, 39], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 30], [11, 31], [12, 32], [13, 33], [14, 34], [15, 20], [16, 21], [17, 22], [18, 23], [19, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 45], [1, 46], [2, 47], [3, 48], [4, 49], [5, 35], [6, 36], [7, 37], [8, 38], [9, 39], [10, 40], [11, 41], [12, 42], [13, 43], [14, 44], [15, 30], [16, 31], [17, 32], [18, 33], [19, 34], [20, 25], [21, 26], [22, 27], [23, 28], [24, 29]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 12], [2, 13], [3, 11], [4, 9], [5, 10], [6, 8], [7, 10], [8, 13], [9, 14]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [5, 9], [2, 6], [1, 8], [3, 7]]) == [5, 2, 2, 2, 2]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 9], [2, 11], [4, 13], [6, 15], [8, 17]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2]
    assert candidate(n = 25,queries = [[0, 24], [0, 23], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 4], [1, 8], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [0, 13], [1, 14]]) == [11, 8, 7, 7, 4, 4, 4, 2, 2]
    assert candidate(n = 20,queries = [[0, 15], [5, 18], [10, 19], [1, 12], [3, 17], [7, 16], [9, 14], [2, 13]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 2], [1, 3], [2, 9], [3, 5], [4, 8], [5, 7], [6, 9], [7, 8]]) == [8, 8, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [0, 27], [2, 25], [4, 23], [6, 21], [8, 19], [10, 18], [12, 17], [14, 16]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 15], [1, 8], [2, 10], [3, 12], [4, 14], [5, 16], [6, 18], [7, 20], [8, 22], [9, 24], [10, 17], [11, 19], [12, 21], [13, 23]]) == [10, 10, 10, 10, 10, 10, 10, 10, 5, 4, 4, 4, 4, 4]
    assert candidate(n = 18,queries = [[0, 17], [0, 9], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 35,queries = [[0, 13], [5, 20], [10, 24], [15, 28], [20, 32], [25, 34], [30, 33], [1, 14], [6, 21], [11, 25], [16, 29], [21, 31]]) == [22, 20, 20, 10, 9, 9, 8, 8, 8, 8, 8, 8]
    assert candidate(n = 15,queries = [[0, 14], [0, 13], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 10], [5, 20], [10, 22], [15, 23], [20, 24], [2, 12], [7, 17], [12, 21]]) == [15, 10, 4, 4, 4, 4, 4, 4]
    assert candidate(n = 20,queries = [[0, 19], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 13], [6, 14], [7, 12], [8, 11], [9, 10]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 18], [11, 19], [12, 20], [13, 21], [14, 22], [0, 8], [2, 16], [4, 18], [6, 20], [8, 22]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 50,queries = [[0, 20], [5, 30], [10, 36], [15, 40], [20, 44], [25, 47], [30, 48], [35, 49], [40, 46], [1, 21], [6, 31], [11, 37], [16, 41], [21, 43], [26, 38], [31, 39], [36, 45]]) == [30, 25, 24, 24, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 25,queries = [[0, 24], [0, 13], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 5], [2, 8], [3, 7], [4, 6], [5, 15], [6, 12], [7, 18], [8, 16], [9, 19]]) == [10, 10, 10, 10, 10, 7, 7, 6, 6, 5]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().shortestDistanceAfterQueries)

2025-05-22 04:53:10,662 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import deque

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        # Initialize the adjacency list with the initial roads
        adj = [[] for _ in range(n)]
        for i in range(n-1):
            adj[i].append(i+1)

        result = []
        for u, v in queries:
            adj[u].append(v)
            # Perform BFS to find the shortest path from 0 to n-1
            dist = [float('inf')] * n
            dist[0] = 0
            q = deque([0])
            while q:
                current = q.popleft()
                if current == n-1:
                    break
                for neighbor in adj[current]:
                    if dist[neighbor] > dist[current] + 1:
                        dist[neighbor] = dist[current] + 1
                        q.append(neighbor)
            result.append(dist[n-1])
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(n = 7,queries = [[0, 5], [1, 6], [2, 4]]) == [2, 2, 2]
    assert candidate(n = 8,queries = [[1, 5], [2, 6], [3, 7], [0, 4], [0, 6], [0, 7]]) == [4, 4, 4, 4, 2, 1]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 3]]) == [4, 3, 3]
    assert candidate(n = 8,queries = [[0, 6], [1, 7], [2, 5], [3, 4]]) == [2, 2, 2, 2]
    assert candidate(n = 7,queries = [[1, 5], [2, 6], [3, 5]]) == [3, 3, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 4], [0, 3]]) == [4, 4, 3]
    assert candidate(n = 6,queries = [[1, 3], [2, 5], [0, 1], [3, 4]]) == [4, 3, 3, 3]
    assert candidate(n = 5,queries = [[2, 4], [0, 2], [0, 4]]) == [3, 2, 1]
    assert candidate(n = 4,queries = [[0, 3], [0, 2]]) == [1, 1]
    assert candidate(n = 7,queries = [[1, 4], [2, 6], [3, 5], [0, 3], [0, 5]]) == [4, 3, 3, 3, 2]
    assert candidate(n = 50,queries = [[0, 49], [0, 48], [1, 47], [2, 46], [3, 45], [4, 44], [5, 43], [6, 42], [7, 41], [8, 40], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 25], [0, 30], [0, 35], [0, 40], [0, 45], [5, 15], [5, 20], [5, 25], [5, 30], [5, 35], [5, 40], [5, 45], [10, 20], [10, 25], [10, 30], [10, 35], [10, 40], [10, 45], [15, 25], [15, 30], [15, 35], [15, 40], [15, 45], [20, 30], [20, 35], [20, 40], [20, 45], [25, 35], [25, 40], [25, 45], [30, 40], [30, 45], [35, 45]]) == [25, 20, 15, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 45,queries = [[0, 18], [5, 28], [10, 34], [15, 39], [20, 41], [25, 43], [30, 44], [35, 42], [1, 19], [6, 30], [11, 35], [16, 40], [21, 42], [26, 36], [31, 37]]) == [27, 22, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 15,queries = [[0, 10], [1, 8], [2, 12], [3, 7], [4, 9], [5, 11], [6, 13], [7, 14]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 12,queries = [[0, 5], [0, 11], [1, 10], [2, 8], [3, 9], [4, 7], [5, 6]]) == [7, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [0, 10], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [0, 7], [2, 5], [1, 4]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [1, 4], [2, 6], [3, 7], [8, 9]]) == [5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [0, 47], [2, 45], [4, 43], [6, 41], [8, 39], [10, 38], [12, 37], [14, 36], [16, 35], [18, 34], [20, 33], [22, 32], [24, 31], [26, 30], [28, 29]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 15], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15]]) == [10, 6, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2]
    assert candidate(n = 12,queries = [[0, 11], [0, 6], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 50,queries = [[0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [40, 9], [41, 8], [42, 7], [43, 6], [44, 5], [45, 4], [46, 3], [47, 2], [48, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 10], [0, 15], [0, 20], [5, 25], [5, 29], [10, 19], [10, 24], [15, 23], [15, 28], [20, 22], [20, 27], [25, 26]]) == [20, 15, 10, 10, 6, 6, 6, 6, 3, 3, 3, 3]
    assert candidate(n = 100,queries = [[0, 99], [0, 98], [1, 97], [2, 96], [3, 95], [4, 94], [5, 93], [6, 92], [7, 91], [8, 90], [9, 89], [10, 88], [11, 87], [12, 86], [13, 85], [14, 84], [15, 83], [16, 82], [17, 81], [18, 80], [19, 79], [20, 78], [21, 77], [22, 76], [23, 75], [24, 74], [25, 73], [26, 72], [27, 71], [28, 70], [29, 69], [30, 68], [31, 67], [32, 66], [33, 65], [34, 64], [35, 63], [36, 62], [37, 61], [38, 60], [39, 59], [40, 58], [41, 57], [42, 56], [43, 55], [44, 54], [45, 53], [46, 52], [47, 51], [48, 50]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 20], [1, 21], [2, 22], [3, 23], [4, 24], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 25], [11, 26], [12, 27], [13, 28], [14, 29], [15, 28], [16, 29], [0, 15], [2, 21], [4, 23], [6, 25], [8, 27]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 13], [6, 14], [0, 9], [2, 11], [4, 12]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [0, 12], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [0, 17], [2, 15], [4, 13], [6, 11], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 12,queries = [[0, 6], [2, 8], [3, 9], [5, 10], [7, 11], [1, 5]]) == [6, 6, 6, 6, 3, 3]
    assert candidate(n = 10,queries = [[0, 9], [1, 8], [2, 7], [3, 6], [4, 5]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 15], [5, 25], [10, 30], [15, 35], [20, 37], [25, 38], [30, 39], [1, 16], [6, 26], [11, 31], [16, 36], [21, 32], [26, 33]]) == [25, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 7], [2, 9], [3, 6], [0, 5], [4, 8]]) == [3, 3, 3, 3, 3]
    assert candidate(n = 15,queries = [[0, 14], [1, 10], [2, 8], [3, 9], [4, 11], [5, 12], [6, 13]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 15], [1, 16]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5]
    assert candidate(n = 12,queries = [[0, 2], [0, 4], [0, 6], [0, 8], [0, 10], [1, 3], [1, 5], [1, 7], [1, 9], [1, 11]]) == [10, 8, 6, 4, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 15,queries = [[0, 7], [1, 9], [2, 11], [3, 10], [4, 12], [5, 13], [6, 14]]) == [8, 7, 6, 6, 6, 6, 6]
    assert candidate(n = 10,queries = [[0, 5], [1, 7], [3, 8], [2, 6], [0, 9]]) == [5, 4, 4, 4, 1]
    assert candidate(n = 15,queries = [[0, 14], [0, 7], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 30,queries = [[0, 25], [1, 26], [2, 27], [3, 28], [4, 29], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [0, 7], [2, 9]]) == [5, 5, 5, 5, 5, 3, 3]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 30,queries = [[0, 12], [5, 18], [10, 22], [15, 24], [20, 28], [25, 29], [1, 13], [6, 19], [11, 23], [16, 25]]) == [18, 17, 17, 10, 10, 7, 7, 7, 7, 7]
    assert candidate(n = 10,queries = [[0, 4], [0, 5], [0, 8], [0, 6], [1, 3], [2, 7], [3, 9], [4, 8]]) == [6, 5, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8]]) == [1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 9], [0, 5], [1, 8], [2, 4], [3, 7]]) == [1, 1, 1, 1, 1]
    assert candidate(n = 40,queries = [[0, 10], [0, 15], [0, 20], [0, 25], [0, 30], [5, 15], [5, 20], [5, 25], [5, 30], [10, 20], [10, 25], [10, 30], [15, 25], [15, 30], [20, 30]]) == [30, 25, 20, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(n = 40,queries = [[0, 35], [1, 36], [2, 37], [3, 38], [4, 39], [5, 25], [6, 26], [7, 27], [8, 28], [9, 29], [10, 30], [11, 31], [12, 32], [13, 33], [14, 34], [15, 20], [16, 21], [17, 22], [18, 23], [19, 24]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 50,queries = [[0, 45], [1, 46], [2, 47], [3, 48], [4, 49], [5, 35], [6, 36], [7, 37], [8, 38], [9, 39], [10, 40], [11, 41], [12, 42], [13, 43], [14, 44], [15, 30], [16, 31], [17, 32], [18, 33], [19, 34], [20, 25], [21, 26], [22, 27], [23, 28], [24, 29]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 15,queries = [[0, 14], [1, 12], [2, 13], [3, 11], [4, 9], [5, 10], [6, 8], [7, 10], [8, 13], [9, 14]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 10,queries = [[0, 5], [5, 9], [2, 6], [1, 8], [3, 7]]) == [5, 2, 2, 2, 2]
    assert candidate(n = 20,queries = [[0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [0, 9], [2, 11], [4, 13], [6, 15], [8, 17]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2]
    assert candidate(n = 25,queries = [[0, 24], [0, 23], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 15,queries = [[0, 4], [1, 8], [2, 10], [3, 11], [4, 12], [5, 13], [6, 14], [0, 13], [1, 14]]) == [11, 8, 7, 7, 4, 4, 4, 2, 2]
    assert candidate(n = 20,queries = [[0, 15], [5, 18], [10, 19], [1, 12], [3, 17], [7, 16], [9, 14], [2, 13]]) == [5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 10,queries = [[0, 2], [1, 3], [2, 9], [3, 5], [4, 8], [5, 7], [6, 9], [7, 8]]) == [8, 8, 2, 2, 2, 2, 2, 2]
    assert candidate(n = 30,queries = [[0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [0, 27], [2, 25], [4, 23], [6, 21], [8, 19], [10, 18], [12, 17], [14, 16]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 15], [1, 8], [2, 10], [3, 12], [4, 14], [5, 16], [6, 18], [7, 20], [8, 22], [9, 24], [10, 17], [11, 19], [12, 21], [13, 23]]) == [10, 10, 10, 10, 10, 10, 10, 10, 5, 4, 4, 4, 4, 4]
    assert candidate(n = 18,queries = [[0, 17], [0, 9], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 35,queries = [[0, 13], [5, 20], [10, 24], [15, 28], [20, 32], [25, 34], [30, 33], [1, 14], [6, 21], [11, 25], [16, 29], [21, 31]]) == [22, 20, 20, 10, 9, 9, 8, 8, 8, 8, 8, 8]
    assert candidate(n = 15,queries = [[0, 14], [0, 13], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7]]) == [1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 25,queries = [[0, 10], [5, 20], [10, 22], [15, 23], [20, 24], [2, 12], [7, 17], [12, 21]]) == [15, 10, 4, 4, 4, 4, 4, 4]
    assert candidate(n = 20,queries = [[0, 19], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 13], [6, 14], [7, 12], [8, 11], [9, 10]]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    assert candidate(n = 25,queries = [[0, 15], [1, 16], [2, 17], [3, 18], [4, 19], [5, 20], [6, 21], [7, 22], [8, 23], [9, 24], [10, 18], [11, 19], [12, 20], [13, 21], [14, 22], [0, 8], [2, 16], [4, 18], [6, 20], [8, 22]]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 3]
    assert candidate(n = 50,queries = [[0, 20], [5, 30], [10, 36], [15, 40], [20, 44], [25, 47], [30, 48], [35, 49], [40, 46], [1, 21], [6, 31], [11, 37], [16, 41], [21, 43], [26, 38], [31, 39], [36, 45]]) == [30, 25, 24, 24, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]
    assert candidate(n = 25,queries = [[0, 24], [0, 13], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 12]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(n = 20,queries = [[0, 10], [1, 5], [2, 8], [3, 7], [4, 6], [5, 15], [6, 12], [7, 18], [8, 16], [9, 19]]) == [10, 10, 10, 10, 10, 7, 7, 6, 6, 5]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().shortestDistanceAfterQueries)

2025-05-22 04:53:24,528 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.865341901779175,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 04:53:24,528 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 04:53:24,528 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 04:53:24,529 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 04:53:24,529 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657428187840 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 04:53:24,529 [DEBUG] filelock (_api.py:334): Lock 140657428187840 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 04:53:24,530 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 04:53:24,716 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657428187840 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 04:53:24,716 [DEBUG] filelock (_api.py:367): Lock 140657428187840 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 04:53:24,716 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 04:53:24,716 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 04:53:27,878 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/shortest-distance-after-road-addition-queries-i.json
2025-05-22 04:53:27,878 [INFO] root (run_leetcode_solver.py:373): Processed problem shortest-distance-after-road-addition-queries-i in 134.89 seconds
2025-05-22 04:53:27,878 [INFO] root (run_leetcode_solver.py:348): Processing problem ID number-of-subsequences-with-odd-sum with model deepseek-r1-distill
2025-05-22 04:53:27,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem number-of-subsequences-with-odd-sum
2025-05-22 04:53:27,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 04:53:28,176 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:28,176 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:28,177 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:28,177 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:46,978 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:46,978 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:46,979 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:46,979 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:46,979 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (836 chars)
2025-05-22 04:53:47,162 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:53:47,162 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:47,163 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:53:47,163 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:02,771 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:02,772 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:02,772 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:02,772 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:02,772 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (558 chars)
2025-05-22 04:54:02,962 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:02,962 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:02,962 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:02,962 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:57,730 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:57,730 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:57,730 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:54:57,730 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:54:57,731 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (836 chars)
2025-05-22 04:54:57,731 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD
            total %= MOD
        
        return total % MOD

def comb(n, k, mod):
    if k > n:
        return 0
    numerator = 1
    for i in range(n, n - k, -1):
        numerator = numerator * i % mod
    denominator = 1
    for i in range(1, k + 1):
        denominator = denominator * i % mod
    return numerator * pow(denominator, mod - 2, mod) % mod
2025-05-22 04:54:57,731 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 04:54:57,731 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        total = 0
        for k in range(1, count_odd + 1, 2):
            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD
            total %= MOD

        return total % MOD

def comb(n, k, mod):
    if k > n:
        return 0
    numerator = 1
    for i in range(n, n - k, -1):
        numerator = numerator * i % mod
    denominator = 1
    for i in range(1, k + 1):
        denominator = denominator * i % mod
    return numerator * pow(denominator, mod - 2, mod) % mod
2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        total = 0
        for k in range(1, count_odd + 1, 2):
            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD
            total %= MOD

        return total % MOD

def comb(n, k, mod):
    if k > n:
        return 0
    numerator = 1
    for i in range(n, n - k, -1):
        numerator = numerator * i % mod
    denominator = 1
    for i in range(1, k + 1):
        denominator = denominator * i % mod
    return numerator * pow(denominator, mod - 2, mod) % mod

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 04:54:57,731 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        total = 0
        for k in range(1, count_odd + 1, 2):
            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD
            total %= MOD

        return total % MOD

def comb(n, k, mod):
    if k > n:
        return 0
    numerator = 1
    for i in range(n, n - k, -1):
        numerator = numerator * i % mod
    denominator = 1
    for i in range(1, k + 1):
        denominator = denominator * i % mod
    return numerator * pow(denominator, mod - 2, mod) % mod

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 04:55:11,616 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 208, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 116, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 98, in subsequenceCount\n    total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp198m0xmz.py` failed. (See above for error)\n",
  "execution_time": 13.88453197479248,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 208, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 116, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 98, in subsequenceCount\n    total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp198m0xmz.py` failed. (See above for error)"
}
2025-05-22 04:55:11,617 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 04:55:11,617 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 04:55:11,822 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:55:11,823 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:55:11,823 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:55:11,823 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:56:20,494 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:56:20,495 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:56:20,495 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:56:20,495 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:56:20,495 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1102 chars)
2025-05-22 04:56:20,680 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:56:20,680 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:56:20,680 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:56:20,680 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:57:24,664 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:57:24,664 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:57:24,664 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:57:24,665 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:57:24,665 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1046 chars)
2025-05-22 04:57:24,848 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:57:24,848 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:57:24,849 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:57:24,849 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:58:28,755 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:58:28,755 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:58:28,756 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:58:28,756 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:58:28,756 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (914 chars)
2025-05-22 04:58:28,756 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD
        
        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD
        
        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + pow(2, count_even, MOD) * c) % MOD
        
        return total % MOD
2025-05-22 04:58:28,756 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 04:58:28,756 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 04:58:28,756 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 04:58:28,756 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 04:58:28,756 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 04:58:28,756 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + pow(2, count_even, MOD) * c) % MOD

        return total % MOD
2025-05-22 04:58:28,757 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + pow(2, count_even, MOD) * c) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 04:58:28,757 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + pow(2, count_even, MOD) * c) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 04:58:43,056 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 213, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 121, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 103, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp0airu0xl.py` failed. (See above for error)\n",
  "execution_time": 14.29876708984375,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 213, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 121, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp0airu0xl.py\", line 103, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp0airu0xl.py` failed. (See above for error)"
}
2025-05-22 04:58:43,056 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 04:58:43,057 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 04:58:43,258 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:58:43,259 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:58:43,259 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:58:43,259 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:59:45,256 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:59:45,256 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:59:45,256 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:59:45,256 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:59:45,257 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1038 chars)
2025-05-22 04:59:45,438 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 04:59:45,438 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:59:45,438 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 04:59:45,438 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:00:40,297 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:00:40,298 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:00:40,298 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:00:40,298 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:00:40,298 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (639 chars)
2025-05-22 05:00:40,480 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:00:40,480 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:00:40,480 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:00:40,481 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:01:46,347 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:01:46,347 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:01:46,347 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:01:46,347 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:01:46,348 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1102 chars)
2025-05-22 05:01:46,348 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 73dadc0c
2025-05-22 05:01:46,348 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)
        
        # The total number of subsequences is ways_odd multiplied by 2^count_even
        total = (ways_odd * pow(2, count_even, MOD)) % MOD
        
        return total
2025-05-22 05:01:46,348 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:01:46,348 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:01:46,348 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:01:46,348 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:01:46,348 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:01:46,348 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # The total number of subsequences is ways_odd multiplied by 2^count_even
        total = (ways_odd * pow(2, count_even, MOD)) % MOD

        return total
2025-05-22 05:01:46,348 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # The total number of subsequences is ways_odd multiplied by 2^count_even
        total = (ways_odd * pow(2, count_even, MOD)) % MOD

        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:01:46,349 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # The total number of subsequences is ways_odd multiplied by 2^count_even
        total = (ways_odd * pow(2, count_even, MOD)) % MOD

        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:02:00,250 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 198, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 106, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 97, in subsequenceCount\n    ways_odd = pow(2, count_odd - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpcaaowsez.py` failed. (See above for error)\n",
  "execution_time": 13.90114450454712,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 198, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 106, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpcaaowsez.py\", line 97, in subsequenceCount\n    ways_odd = pow(2, count_odd - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpcaaowsez.py` failed. (See above for error)"
}
2025-05-22 05:02:00,251 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 73dadc0c
2025-05-22 05:02:00,251 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD
        
        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD
        
        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD
        
        return total % MOD
2025-05-22 05:02:00,251 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:02:00,251 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD

        return total % MOD
2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:02:00,251 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        def comb(n, k):
            if k < 0 or k > n:
                return 0
            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            c = comb(count_odd, k)
            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:02:14,226 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 212, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 120, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 102, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpev5kgmfj.py` failed. (See above for error)\n",
  "execution_time": 13.974385261535645,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 212, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 120, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpev5kgmfj.py\", line 102, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpev5kgmfj.py` failed. (See above for error)"
}
2025-05-22 05:02:14,226 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_5 at depth 2
2025-05-22 05:02:14,226 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_5
2025-05-22 05:02:14,430 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:02:14,430 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:02:14,430 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:02:14,430 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:03:29,519 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:03:29,519 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:03:29,519 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:03:29,520 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:03:29,520 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1499 chars)
2025-05-22 05:03:29,701 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:03:29,701 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:03:29,701 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:03:29,702 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:04:22,680 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:04:22,680 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:04:22,680 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:04:22,680 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:04:22,680 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (704 chars)
2025-05-22 05:04:22,862 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:04:22,862 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:04:22,862 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:04:22,863 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:05:24,399 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:05:24,399 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:05:24,399 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:05:24,399 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:05:24,400 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1046 chars)
2025-05-22 05:05:24,400 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Precompute powers of 2 modulo MOD
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD
        
        # Calculate the number of ways to choose an odd number of odd elements
        total = 0
        for k in range(1, count_odd + 1, 2):
            # Number of ways to choose k odd elements
            ways_odd = self.comb(count_odd, k)
            # Number of ways to choose any subset of even elements
            ways_even = pow2[count_even]
            total = (total + ways_odd * ways_even) % MOD
        
        return total % MOD
    
    def comb(self, n, k):
        if k < 0 or k > n:
            return 0
        # Precompute factorial and inverse factorial modulo MOD
        max_n = n
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD
        
        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD
        
        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD
2025-05-22 05:05:24,400 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:24,400 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Calculate the number of ways to choose an odd number of odd elements
        total = 0
        for k in range(1, count_odd + 1, 2):
            # Number of ways to choose k odd elements
            ways_odd = self.comb(count_odd, k)
            # Number of ways to choose any subset of even elements
            ways_even = pow2[count_even]
            total = (total + ways_odd * ways_even) % MOD

        return total % MOD

    def comb(self, n, k):
        if k < 0 or k > n:
            return 0
        # Precompute factorial and inverse factorial modulo MOD
        max_n = n
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD
2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Calculate the number of ways to choose an odd number of odd elements
        total = 0
        for k in range(1, count_odd + 1, 2):
            # Number of ways to choose k odd elements
            ways_odd = self.comb(count_odd, k)
            # Number of ways to choose any subset of even elements
            ways_even = pow2[count_even]
            total = (total + ways_odd * ways_even) % MOD

        return total % MOD

    def comb(self, n, k):
        if k < 0 or k > n:
            return 0
        # Precompute factorial and inverse factorial modulo MOD
        max_n = n
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:05:24,400 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Calculate the number of ways to choose an odd number of odd elements
        total = 0
        for k in range(1, count_odd + 1, 2):
            # Number of ways to choose k odd elements
            ways_odd = self.comb(count_odd, k)
            # Number of ways to choose any subset of even elements
            ways_even = pow2[count_even]
            total = (total + ways_odd * ways_even) % MOD

        return total % MOD

    def comb(self, n, k):
        if k < 0 or k > n:
            return 0
        # Precompute factorial and inverse factorial modulo MOD
        max_n = n
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:05:38,865 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 222, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 130, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 105, in subsequenceCount\n    ways_odd = self.comb(count_odd, k)\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 122, in comb\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpvfwzo405.py` failed. (See above for error)\n",
  "execution_time": 14.463778495788574,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 222, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 130, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 105, in subsequenceCount\n    ways_odd = self.comb(count_odd, k)\n  File \"/scratch/local/21926554/tmpvfwzo405.py\", line 122, in comb\n    inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpvfwzo405.py` failed. (See above for error)"
}
2025-05-22 05:05:38,865 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)
        
        # Calculate the number of ways to choose any number of even elements
        ways_even = pow(2, count_even, MOD)
        
        # Total number of valid subsequences
        total = (ways_odd * ways_even) % MOD
        return total
2025-05-22 05:05:38,865 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:38,865 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:38,865 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:05:38,865 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:38,865 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:38,865 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # Calculate the number of ways to choose any number of even elements
        ways_even = pow(2, count_even, MOD)

        # Total number of valid subsequences
        total = (ways_odd * ways_even) % MOD
        return total
2025-05-22 05:05:38,866 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # Calculate the number of ways to choose any number of even elements
        ways_even = pow(2, count_even, MOD)

        # Total number of valid subsequences
        total = (ways_odd * ways_even) % MOD
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:05:38,866 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = pow(2, count_odd - 1, MOD)

        # Calculate the number of ways to choose any number of even elements
        ways_even = pow(2, count_even, MOD)

        # Total number of valid subsequences
        total = (ways_odd * ways_even) % MOD
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:05:52,860 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 200, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 108, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 97, in subsequenceCount\n    ways_odd = pow(2, count_odd - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpx7ljltj8.py` failed. (See above for error)\n",
  "execution_time": 13.994100332260132,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 200, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 108, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpx7ljltj8.py\", line 97, in subsequenceCount\n    ways_odd = pow(2, count_odd - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpx7ljltj8.py` failed. (See above for error)"
}
2025-05-22 05:05:52,861 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 0e4b18e2
2025-05-22 05:05:52,861 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            # Calculate combination(count_odd, k) modulo MOD
            comb = 1
            for i in range(k):
                comb = comb * (count_odd - i) % MOD
                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD
            total = (total + pow2[count_even] * comb) % MOD
        
        return total % MOD
2025-05-22 05:05:52,861 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:52,861 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:52,861 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:05:52,861 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:05:52,861 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:05:52,861 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            # Calculate combination(count_odd, k) modulo MOD
            comb = 1
            for i in range(k):
                comb = comb * (count_odd - i) % MOD
                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD
2025-05-22 05:05:52,862 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            # Calculate combination(count_odd, k) modulo MOD
            comb = 1
            for i in range(k):
                comb = comb * (count_odd - i) % MOD
                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:05:52,862 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            # Calculate combination(count_odd, k) modulo MOD
            comb = 1
            for i in range(k):
                comb = comb * (count_odd - i) % MOD
                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:06:06,895 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 206, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 114, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 107, in subsequenceCount\n    comb = comb * pow(i + 1, MOD - 2, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpufh5sqx7.py` failed. (See above for error)\n",
  "execution_time": 14.032142877578735,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 206, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 114, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpufh5sqx7.py\", line 107, in subsequenceCount\n    comb = comb * pow(i + 1, MOD - 2, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpufh5sqx7.py` failed. (See above for error)"
}
2025-05-22 05:06:06,895 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_9 at depth 2
2025-05-22 05:06:06,895 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_9
2025-05-22 05:06:07,100 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:06:07,101 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:06:07,101 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:06:07,101 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:07:03,890 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:07:03,890 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:07:03,891 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:07:03,891 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:07:03,891 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (914 chars)
2025-05-22 05:07:04,077 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:07:04,077 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:07:04,078 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:07:04,078 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:08:13,976 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:08:13,976 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:08:13,976 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:08:13,977 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:08:13,977 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1211 chars)
2025-05-22 05:08:14,161 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:08:14,161 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:08:14,161 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:08:14,161 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:09:20,946 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:09:20,946 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:09:20,947 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:09:20,947 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:09:20,947 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1211 chars)
2025-05-22 05:09:20,947 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash bf2cf47c
2025-05-22 05:09:20,947 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD
        
        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD
        
        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD
        
        return total % MOD
2025-05-22 05:09:20,947 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:20,947 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:20,947 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:09:20,947 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:20,947 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:20,947 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD
2025-05-22 05:09:20,948 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:09:20,948 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_n = count_odd
        fact = [1] * (max_n + 1)
        for i in range(1, max_n + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_n + 1)
        inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)
        for i in range(max_n - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:09:34,859 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 214, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 122, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 108, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpnurw45cl.py` failed. (See above for error)\n",
  "execution_time": 13.910668134689331,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 214, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 122, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpnurw45cl.py\", line 108, in subsequenceCount\n    inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpnurw45cl.py` failed. (See above for error)"
}
2025-05-22 05:09:34,859 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
        
        if count_odd == 0:
            return 0
        
        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD
        
        # Precompute factorial and inverse factorial modulo MOD
        max_k = count_odd
        fact = [1] * (max_k + 1)
        for i in range(1, max_k + 1):
            fact[i] = fact[i-1] * i % MOD
        
        inv_fact = [1] * (max_k + 1)
        inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)
        for i in range(max_k - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD
        
        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD
        
        return total % MOD
2025-05-22 05:09:34,859 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:34,859 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_k = count_odd
        fact = [1] * (max_k + 1)
        for i in range(1, max_k + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_k + 1)
        inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)
        for i in range(max_k - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD
2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_k = count_odd
        fact = [1] * (max_k + 1)
        for i in range(1, max_k + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_k + 1)
        inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)
        for i in range(max_k - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:09:34,860 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list[int]) -> int:
        count_even = 0
        count_odd = 0
        for num in nums:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

        if count_odd == 0:
            return 0

        # Precompute powers of 2 modulo MOD up to count_even
        pow2 = [1] * (count_even + 1)
        for i in range(1, count_even + 1):
            pow2[i] = (pow2[i-1] * 2) % MOD

        # Precompute factorial and inverse factorial modulo MOD
        max_k = count_odd
        fact = [1] * (max_k + 1)
        for i in range(1, max_k + 1):
            fact[i] = fact[i-1] * i % MOD

        inv_fact = [1] * (max_k + 1)
        inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)
        for i in range(max_k - 1, -1, -1):
            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD

        total = 0
        for k in range(1, count_odd + 1, 2):
            comb = fact[count_odd] * inv_fact[k] % MOD
            comb = comb * inv_fact[count_odd - k] % MOD
            total = (total + pow2[count_even] * comb) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:09:48,768 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 214, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 122, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 108, in subsequenceCount\n    inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpo7wimn4e.py` failed. (See above for error)\n",
  "execution_time": 13.907644987106323,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 214, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 122, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpo7wimn4e.py\", line 108, in subsequenceCount\n    inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpo7wimn4e.py` failed. (See above for error)"
}
2025-05-22 05:09:48,769 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
        
        # Calculate the number of ways to choose an odd number of odd elements
        # This is (2^odd_count - 1) // 2
        if odd_count == 0:
            return 0
        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD
        
        return ways_odd
2025-05-22 05:09:48,769 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:48,769 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        # Calculate the number of ways to choose an odd number of odd elements
        # This is (2^odd_count - 1) // 2
        if odd_count == 0:
            return 0
        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD

        return ways_odd
2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        # Calculate the number of ways to choose an odd number of odd elements
        # This is (2^odd_count - 1) // 2
        if odd_count == 0:
            return 0
        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:09:48,769 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        # Calculate the number of ways to choose an odd number of odd elements
        # This is (2^odd_count - 1) // 2
        if odd_count == 0:
            return 0
        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:10:02,712 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpix_sti9n.py` failed. (See above for error)\n",
  "execution_time": 13.941633939743042,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpix_sti9n.py` failed. (See above for error)"
}
2025-05-22 05:10:02,712 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_1 at depth 1
2025-05-22 05:10:02,712 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_1
2025-05-22 05:10:02,915 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:10:02,915 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:02,915 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:02,916 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:10:48,468 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:10:48,468 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:48,468 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:48,468 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:10:48,469 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (526 chars)
2025-05-22 05:10:48,650 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:10:48,650 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:48,651 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:10:48,651 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:11:38,533 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:11:38,534 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:11:38,534 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:11:38,534 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:11:38,534 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (567 chars)
2025-05-22 05:11:38,716 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:11:38,716 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:11:38,717 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:11:38,717 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:12:27,239 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:12:27,240 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:12:27,240 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:12:27,240 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:12:27,240 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (534 chars)
2025-05-22 05:12:27,240 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
        
        if odd_count == 0:
            return 0
        
        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD
        
        return ways_odd
2025-05-22 05:12:27,240 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:12:27,241 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD

        return ways_odd
2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:12:27,241 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:12:41,566 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp838eu7va.py` failed. (See above for error)\n",
  "execution_time": 14.324050188064575,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp838eu7va.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp838eu7va.py` failed. (See above for error)"
}
2025-05-22 05:12:41,566 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_14 at depth 2
2025-05-22 05:12:41,566 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_14
2025-05-22 05:12:41,770 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:12:41,770 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:12:41,770 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:12:41,770 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:13:28,416 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:13:28,416 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:13:28,417 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:13:28,417 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:13:28,417 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (521 chars)
2025-05-22 05:13:28,600 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:13:28,600 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:13:28,600 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:13:28,600 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:13,586 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:13,586 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:13,586 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:13,587 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:13,587 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (516 chars)
2025-05-22 05:14:13,769 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:13,769 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:13,770 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:13,770 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:40,805 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:40,806 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:40,806 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:14:40,806 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:14:40,806 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (516 chars)
2025-05-22 05:14:40,806 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
        
        if odd_count == 0:
            return 0
        
        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD
        
        return ways_odd
2025-05-22 05:14:40,806 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:14:40,806 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD

        return ways_odd
2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:14:40,807 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: list) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:14:55,214 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpne_3wzu_.py` failed. (See above for error)\n",
  "execution_time": 14.406382322311401,
  "failed_tests": [
    {
      "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
      "expected": "1024",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpne_3wzu_.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpne_3wzu_.py` failed. (See above for error)"
}
2025-05-22 05:14:55,214 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
        
        if odd_count == 0:
            return 0
        
        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD
        
        return ways_odd
2025-05-22 05:14:55,214 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:14:55,215 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288

2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().subsequenceCount
2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD

        return ways_odd
2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:14:55,215 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
MOD = 10**9 + 7

class Solution:
    def subsequenceCount(self, nums: List[int]) -> int:
        even_count = 0
        odd_count = 0
        for num in nums:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

        if odd_count == 0:
            return 0

        # Calculate the number of ways to choose an odd number of odd elements
        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD

        return ways_odd

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024
    assert candidate(nums = [19, 20, 21, 22, 23, 24, 25]) == 64
    assert candidate(nums = [1, 1, 1]) == 4
    assert candidate(nums = [34, 35, 36, 37, 38, 39, 40, 41, 42]) == 256
    assert candidate(nums = [26, 27, 28, 29, 30, 31, 32, 33]) == 128
    assert candidate(nums = [2, 4, 6, 8, 10]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [7, 8, 9, 10, 11]) == 16
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [1, 2, 2]) == 4
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [2]) == 0
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11]) == 32
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0
    assert candidate(nums = [13, 14, 15, 16, 17, 18]) == 32
    assert candidate(nums = [1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [3, 5, 7, 9]) == 8
    assert candidate(nums = [3, 4, 5, 6]) == 8
    assert candidate(nums = [1, 3, 5, 7]) == 8
    assert candidate(nums = [43, 44, 45, 46, 47, 48, 49, 50, 51, 52]) == 512
    assert candidate(nums = [7, 11, 13]) == 4
    assert candidate(nums = [2, 4, 6, 8]) == 0
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 533524785
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 8192
    assert candidate(nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937]) == 512
    assert candidate(nums = [1000000001, 1000000001, 1000000001, 1000000001]) == 8
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 256
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]) == 949480669
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 524288
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 512
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 524288
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 562080146
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 536870912
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 536870912
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 536870912
    assert candidate(nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]) == 32768
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 988185646
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 512
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011]) == 16
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 512
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 16384
    assert candidate(nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 0
    assert candidate(nums = [1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013, 1000000014, 1000000015, 1000000016]) == 512
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 524288
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 371842544
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 512
    assert candidate(nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990]) == 512
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 16384
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]) == 536870912
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 524288
    assert candidate(nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 512
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 595845303
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 16777216
    assert candidate(nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 536870912
    assert candidate(nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]) == 16384
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 16384
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 536870912
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 16777216
    assert candidate(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 512
    assert candidate(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0
    assert candidate(nums = [1000000000, 999999999, 888888888, 777777777, 666666666]) == 16
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 536870912
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 524288
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 0
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2048
    assert candidate(nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131]) == 73741817
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 16384
    assert candidate(nums = [999999997, 999999998, 999999999, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006]) == 512
    assert candidate(nums = [239, 172, 144, 494, 689, 811, 192, 626, 265, 304, 385, 700, 549, 328, 945, 449, 492, 715, 394, 459]) == 524288


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().subsequenceCount)

2025-05-22 05:15:09,206 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.990980863571167,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:15:09,207 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_16 (depth 2)
2025-05-22 05:15:09,207 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 64ddc861
2025-05-22 05:15:09,207 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_17 (depth 2)
2025-05-22 05:15:09,207 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 2_16
2025-05-22 05:15:09,207 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 2_16), stopping early
2025-05-22 05:15:09,207 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:15:09,207 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 19 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:15:09,208 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657428114400 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:15:09,208 [DEBUG] filelock (_api.py:334): Lock 140657428114400 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:15:09,209 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:15:10,382 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657428114400 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:15:10,382 [DEBUG] filelock (_api.py:367): Lock 140657428114400 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:15:10,383 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:15:10,383 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:15:13,087 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/number-of-subsequences-with-odd-sum.json
2025-05-22 05:15:13,087 [INFO] root (run_leetcode_solver.py:373): Processed problem number-of-subsequences-with-odd-sum in 1305.10 seconds
2025-05-22 05:15:13,087 [INFO] root (run_leetcode_solver.py:348): Processing problem ID count-the-number-of-good-nodes with model deepseek-r1-distill
2025-05-22 05:15:13,201 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem count-the-number-of-good-nodes
2025-05-22 05:15:13,202 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:15:13,383 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:15:13,383 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:13,383 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:13,384 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:15:39,039 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:15:39,040 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:39,040 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:39,040 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:15:39,040 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1566 chars)
2025-05-22 05:15:39,222 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:15:39,223 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:39,223 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:15:39,223 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:02,762 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:02,762 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:02,762 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:02,762 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:02,763 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (1655 chars)
2025-05-22 05:16:02,944 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:02,944 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:02,944 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:02,944 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:22,158 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:22,159 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:22,159 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:22,159 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:22,159 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (1210 chars)
2025-05-22 05:16:22,159 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0
        
        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0
        
        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)
            
            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Get all children's subtree sizes
                sizes = [subtree_sizes[child] for child in children]
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)
        
        # Dictionary to store the size of each subtree
        subtree_sizes = {}
        
        # Start DFS from root (node 0)
        dfs(0, -1)
        
        return good_count
2025-05-22 05:16:22,159 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:16:22,159 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:16:22,159 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:16:22,159 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:16:22,160 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:16:22,160 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Get all children's subtree sizes
                sizes = [subtree_sizes[child] for child in children]
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Dictionary to store the size of each subtree
        subtree_sizes = {}

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count
2025-05-22 05:16:22,160 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Get all children's subtree sizes
                sizes = [subtree_sizes[child] for child in children]
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Dictionary to store the size of each subtree
        subtree_sizes = {}

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:16:22,160 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Get all children's subtree sizes
                sizes = [subtree_sizes[child] for child in children]
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Dictionary to store the size of each subtree
        subtree_sizes = {}

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:16:36,651 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 182, in <module>\n    check(Solution().countGoodNodes)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 132, in check\n    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 126, in countGoodNodes\n    dfs(0, -1)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 116, in dfs\n    sizes = [subtree_sizes[child] for child in children]\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 116, in <listcomp>\n    sizes = [subtree_sizes[child] for child in children]\nKeyError: 4\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp_jjfjihj.py` failed. (See above for error)\n",
  "execution_time": 14.49004077911377,
  "failed_tests": [
    {
      "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]",
      "expected": "6",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 182, in <module>\n    check(Solution().countGoodNodes)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 132, in check\n    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 126, in countGoodNodes\n    dfs(0, -1)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 107, in dfs\n    dfs(neighbor, node)\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 116, in dfs\n    sizes = [subtree_sizes[child] for child in children]\n  File \"/scratch/local/21926554/tmp_jjfjihj.py\", line 116, in <listcomp>\n    sizes = [subtree_sizes[child] for child in children]\nKeyError: 4\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp_jjfjihj.py` failed. (See above for error)"
}
2025-05-22 05:16:36,651 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 05:16:36,651 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 05:16:36,853 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:16:36,854 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:36,854 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:16:36,854 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:17:34,528 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:17:34,529 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:17:34,529 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:17:34,529 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:17:34,529 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1578 chars)
2025-05-22 05:17:34,711 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:17:34,711 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:17:34,711 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:17:34,711 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:18:32,377 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:18:32,378 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:18:32,378 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:18:32,378 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:18:32,378 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1597 chars)
2025-05-22 05:18:32,561 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:18:32,562 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:18:32,562 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:18:32,562 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:19:28,335 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:19:28,336 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:19:28,336 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:19:28,336 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:19:28,336 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1517 chars)
2025-05-22 05:19:28,336 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0
        
        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0
        
        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)
            
            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Collect sizes of all children's subtrees
                sizes = []
                for child in children:
                    sizes.append(dfs(child, node))
                # Check if all sizes are equal
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)
        
        # Start DFS from root (node 0)
        dfs(0, -1)
        
        return good_count
2025-05-22 05:19:28,336 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:19:28,336 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Collect sizes of all children's subtrees
                sizes = []
                for child in children:
                    sizes.append(dfs(child, node))
                # Check if all sizes are equal
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count
2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Collect sizes of all children's subtrees
                sizes = []
                for child in children:
                    sizes.append(dfs(child, node))
                # Check if all sizes are equal
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:19:28,337 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
                    dfs(neighbor, node)

            # Check if all children have the same subtree size
            if not children:
                # Leaf node is always good
                good_count += 1
                return 1
            else:
                # Collect sizes of all children's subtrees
                sizes = []
                for child in children:
                    sizes.append(dfs(child, node))
                # Check if all sizes are equal
                if all(s == sizes[0] for s in sizes):
                    good_count += 1
                # Return the size of the current subtree
                return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:19:42,134 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp0x2mesu1.py\", line 182, in <module>\n    check(Solution().countGoodNodes)\n  File \"/scratch/local/21926554/tmp0x2mesu1.py\", line 132, in check\n    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp0x2mesu1.py` failed. (See above for error)\n",
  "execution_time": 13.79555344581604,
  "failed_tests": [
    {
      "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]",
      "expected": "6",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp0x2mesu1.py\", line 182, in <module>\n    check(Solution().countGoodNodes)\n  File \"/scratch/local/21926554/tmp0x2mesu1.py\", line 132, in check\n    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp0x2mesu1.py` failed. (See above for error)"
}
2025-05-22 05:19:42,134 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 05:19:42,134 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 05:19:42,335 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:19:42,336 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:19:42,336 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:19:42,336 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:20:39,763 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:20:39,764 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:20:39,764 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:20:39,764 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:20:39,764 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1504 chars)
2025-05-22 05:20:39,946 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:20:39,946 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:20:39,947 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:20:39,947 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:21:40,843 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:21:40,844 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:21:40,844 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:21:40,844 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:21:40,844 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1561 chars)
2025-05-22 05:21:41,026 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:21:41,026 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:21:41,027 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:21:41,027 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:22:31,441 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:22:31,441 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:22:31,442 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:22:31,442 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:22:31,442 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1373 chars)
2025-05-22 05:22:31,442 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0
        
        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0
        
        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
            
            # If no children, it's a leaf node and is good
            if not children:
                good_count += 1
                return 1
            
            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)
            
            # Check if all sizes are equal
            if all(s == sizes[0] for s in sizes):
                good_count += 1
            
            # Return the size of the current subtree
            return 1 + sum(sizes)
        
        # Start DFS from root (node 0)
        dfs(0, -1)
        
        return good_count
2025-05-22 05:22:31,442 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:22:31,442 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:22:31,442 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:22:31,442 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:22:31,442 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:22:31,442 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # If no children, it's a leaf node and is good
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all sizes are equal
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count
2025-05-22 05:22:31,443 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # If no children, it's a leaf node and is good
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all sizes are equal
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:22:31,443 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        # To avoid revisiting the parent node, we'll track visited nodes
        visited = set()
        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            visited.add(node)
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # If no children, it's a leaf node and is good
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all sizes are equal
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:22:45,306 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.86227798461914,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:22:45,306 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_2 (depth 2)
2025-05-22 05:22:45,306 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 6e61fd64
2025-05-22 05:22:45,306 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_3 (depth 2)
2025-05-22 05:22:45,306 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0
        
        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        good_count = 0
        
        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)
            
            # Base case: leaf node
            if not children:
                good_count += 1
                return 1
            
            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)
            
            # Check if all children have the same subtree size
            if all(s == sizes[0] for s in sizes):
                good_count += 1
            
            # Return the size of the current subtree
            return 1 + sum(sizes)
        
        # Start DFS from root (node 0)
        dfs(0, -1)
        
        return good_count
2025-05-22 05:22:45,306 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:22:45,306 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:22:45,306 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:22:45,306 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20

2025-05-22 05:22:45,306 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countGoodNodes
2025-05-22 05:22:45,306 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # Base case: leaf node
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all children have the same subtree size
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count
2025-05-22 05:22:45,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # Base case: leaf node
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all children have the same subtree size
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:22:45,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countGoodNodes(self, edges: List[List[int]]) -> int:
        if not edges:
            return 0

        # Build the tree structure
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)

        good_count = 0

        # Post-order traversal to calculate subtree sizes and check conditions
        def dfs(node, parent):
            nonlocal good_count
            children = []
            for neighbor in tree[node]:
                if neighbor != parent:
                    children.append(neighbor)

            # Base case: leaf node
            if not children:
                good_count += 1
                return 1

            # Collect sizes of all children's subtrees
            sizes = []
            for child in children:
                size = dfs(child, node)
                sizes.append(size)

            # Check if all children have the same subtree size
            if all(s == sizes[0] for s in sizes):
                good_count += 1

            # Return the size of the current subtree
            return 1 + sum(sizes)

        # Start DFS from root (node 0)
        dfs(0, -1)

        return good_count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [1, 6], [2, 7], [3, 8]]) == 6
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [0, 5], [5, 6], [6, 7], [7, 8], [0, 9], [9, 10], [9, 12], [10, 11]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) == 7
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29]]) == 27
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [10, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [13, 36]]) == 33
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47]]) == 47
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]) == 31
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25], [12, 26], [12, 27], [13, 28], [13, 29], [14, 30], [14, 31], [15, 32], [15, 33], [16, 34], [16, 35], [17, 36], [17, 37]]) == 37
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [8, 22], [8, 23], [9, 24], [9, 25], [10, 26], [10, 27], [11, 28], [11, 29], [12, 30], [12, 31]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]) == 15
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27]]) == 26
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [4, 14], [5, 15], [5, 16], [6, 17], [6, 18], [7, 19], [7, 20], [8, 21], [8, 22], [9, 23], [9, 24]]) == 24
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54]]) == 53
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50], [25, 51], [25, 52], [26, 53], [26, 54], [27, 55], [27, 56], [28, 57], [28, 58], [29, 59], [29, 60], [30, 61], [30, 62], [31, 63], [31, 64], [32, 65], [32, 66], [33, 67], [33, 68], [34, 69], [34, 70], [35, 71], [35, 72], [36, 73], [36, 74], [37, 75], [37, 76], [38, 77], [38, 78], [39, 79], [39, 80], [40, 81], [40, 82], [41, 83], [41, 84], [42, 85], [42, 86], [43, 87], [43, 88], [44, 89], [44, 90], [45, 91], [45, 92], [46, 93], [46, 94], [47, 95], [47, 96], [48, 97], [48, 98], [49, 99], [49, 100]]) == 96
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [4, 12], [5, 13], [5, 14], [5, 15], [6, 16], [6, 17], [6, 18], [7, 19], [7, 20], [7, 21], [8, 22], [8, 23], [8, 24], [9, 25], [9, 26], [9, 27], [10, 28], [10, 29], [11, 30], [11, 31], [12, 32], [12, 33], [13, 34], [13, 35], [14, 36], [14, 37], [15, 38], [15, 39], [16, 40], [16, 41], [17, 42], [17, 43], [18, 44], [18, 45]]) == 45
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14], [1, 15], [15, 16], [15, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]) == 15
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 6], [1, 7], [2, 8], [2, 9], [3, 10], [3, 11], [4, 12], [4, 13], [5, 14], [5, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 32
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [8, 16], [8, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24]]) == 21
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13], [5, 14], [5, 15], [5, 16], [6, 17], [6, 18], [6, 19], [7, 20], [7, 21], [7, 22], [8, 23], [8, 24], [8, 25], [9, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [11, 34], [12, 35], [12, 36], [12, 37], [13, 38], [13, 39], [13, 40]]) == 41
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [1, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [4, 13], [5, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19]]) == 18
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [7, 18], [8, 19], [8, 20], [8, 21], [9, 22], [9, 23], [10, 24], [10, 25], [11, 26], [11, 27], [12, 28], [12, 29], [13, 30], [13, 31], [14, 32], [14, 33]]) == 30
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51]]) == 49
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17]]) == 16
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 9], [2, 10], [2, 11], [2, 12], [3, 13], [3, 14], [3, 15], [3, 16], [4, 17], [4, 18], [4, 19], [4, 20], [5, 21], [5, 22], [5, 23], [5, 24], [6, 25], [6, 26], [6, 27], [6, 28], [7, 29], [7, 30], [7, 31], [7, 32], [8, 33], [8, 34], [8, 35], [8, 36], [9, 37], [9, 38], [9, 39], [9, 40]]) == 39
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [9, 25], [10, 26], [10, 27], [10, 28], [11, 29], [11, 30], [11, 31]]) == 28
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [2, 7], [2, 8], [3, 9], [3, 10], [4, 11], [4, 12], [5, 13], [5, 14], [6, 15], [6, 16], [7, 17], [7, 18], [8, 19], [8, 20], [9, 21], [9, 22], [10, 23], [10, 24], [11, 25], [11, 26], [12, 27], [12, 28]]) == 29
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26]]) == 25
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]) == 23
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5], [5, 6], [6, 7], [7, 8], [6, 9], [9, 10], [10, 11], [10, 12], [9, 13], [13, 14], [13, 15], [8, 16], [16, 17], [16, 18], [16, 19]]) == 18
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]) == 48
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19]]) == 19
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]) == 40
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13]]) == 14
    assert candidate(edges = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [4, 6], [4, 7], [5, 8], [5, 9], [5, 10], [10, 11], [10, 12], [10, 13], [13, 14]]) == 12
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]) == 22
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5], [1, 6], [1, 7], [2, 8], [2, 9], [2, 10], [3, 11], [3, 12], [3, 13], [4, 14], [4, 15], [4, 16], [5, 17], [5, 18], [6, 19], [6, 20], [6, 21], [7, 22], [7, 23], [7, 24], [8, 25], [8, 26], [9, 27], [9, 28], [10, 29], [10, 30], [10, 31], [11, 32], [11, 33], [12, 34], [12, 35], [12, 36], [13, 37], [13, 38], [13, 39]]) == 36
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [5, 14], [6, 15], [6, 16], [6, 17], [7, 18], [7, 19], [8, 20], [8, 21], [8, 22], [9, 23], [9, 24], [10, 25], [10, 26], [10, 27], [11, 28], [11, 29], [11, 30], [12, 31], [12, 32], [13, 33], [13, 34], [14, 35], [14, 36], [14, 37], [15, 38], [15, 39]]) == 34
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17]]) == 17
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [6, 9], [6, 10], [7, 11], [7, 12], [8, 13], [8, 14]]) == 14
    assert candidate(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 6], [2, 7], [2, 8], [3, 9], [3, 10], [3, 11], [4, 12], [4, 13], [4, 14], [5, 15], [5, 16], [5, 17], [6, 18], [6, 19], [6, 20], [7, 21], [7, 22], [7, 23], [8, 24], [8, 25], [8, 26], [9, 27], [9, 28], [9, 29], [10, 30], [10, 31], [10, 32], [11, 33], [11, 34], [11, 35], [12, 36], [12, 37], [12, 38], [13, 39], [13, 40], [13, 41], [14, 42], [14, 43], [14, 44], [15, 45], [15, 46], [15, 47], [16, 48], [16, 49]]) == 47
    assert candidate(edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21], [10, 22], [10, 23], [11, 24], [11, 25]]) == 25
    assert candidate(edges = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [10, 18], [10, 19], [11, 20], [11, 21]]) == 20


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countGoodNodes)

2025-05-22 05:22:59,259 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.952200412750244,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:22:59,260 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_4 (depth 2)
2025-05-22 05:22:59,260 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 2_2
2025-05-22 05:22:59,260 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 2_2), stopping early
2025-05-22 05:22:59,260 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:22:59,260 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 6 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:22:59,261 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657434125504 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:22:59,261 [DEBUG] filelock (_api.py:334): Lock 140657434125504 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:22:59,261 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:22:59,708 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657434125504 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:22:59,709 [DEBUG] filelock (_api.py:367): Lock 140657434125504 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:22:59,709 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:22:59,709 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:23:03,026 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/count-the-number-of-good-nodes.json
2025-05-22 05:23:03,026 [INFO] root (run_leetcode_solver.py:373): Processed problem count-the-number-of-good-nodes in 469.83 seconds
2025-05-22 05:23:03,026 [INFO] root (run_leetcode_solver.py:348): Processing problem ID construct-string-with-minimum-cost-easy with model deepseek-r1-distill
2025-05-22 05:23:03,142 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem construct-string-with-minimum-cost-easy
2025-05-22 05:23:03,142 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:23:03,324 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:03,325 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:03,325 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:03,325 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:21,554 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:21,554 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:21,554 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:21,555 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:21,555 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (859 chars)
2025-05-22 05:23:21,737 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:21,738 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:21,738 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:21,738 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:40,599 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:40,599 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:40,599 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:40,600 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:40,600 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (864 chars)
2025-05-22 05:23:40,783 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:40,783 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:40,783 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:40,784 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:58,020 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:58,021 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:58,021 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:23:58,021 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:23:58,021 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (880 chars)
2025-05-22 05:23:58,022 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  # base case: empty string has cost 0
        
        for i in range(n):
            if dp[i] == float('inf'):
                continue  # can't reach this position, skip
            for j in range(len(words)):
                word = words[j]
                cost = costs[j]
                word_len = len(word)
                # Check if the word matches the target starting at position i
                if i + word_len > n:
                    continue
                if target[i:i+word_len] == word:
                    if dp[i] + cost < dp[i + word_len]:
                        dp[i + word_len] = dp[i] + cost
        
        return dp[n] if dp[n] != float('inf') else -1
2025-05-22 05:23:58,022 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(target = "abc",words = ['abc'],costs = [1]) == 1
    assert candidate(target = "abc",words = ['abc'],costs = [10]) == 10
    assert candidate(target = "abcd",words = ['ab', 'cd'],costs = [1, 1]) == 2
    assert candidate(target = "abc",words = ['a', 'b', 'c'],costs = [1, 1, 1]) == 3
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [5, 7, 2]) == 14
    assert candidate(target = "abab",words = ['a', 'b', 'ab'],costs = [2, 3, 1]) == 2
    assert candidate(target = "abcabc",words = ['abc', 'bc', 'c'],costs = [3, 1, 4]) == 6
    assert candidate(target = "xyz",words = ['x', 'y', 'z'],costs = [2, 2, 2]) == 6
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcabc",words = ['abc', 'abcabc'],costs = [10, 5]) == 5
    assert candidate(target = "abcdef",words = ['abdef', 'abc', 'd', 'def', 'ef'],costs = [100, 1, 1, 10, 5]) == 7
    assert candidate(target = "abcabc",words = ['abc', 'bc'],costs = [3, 4]) == 6
    assert candidate(target = "xyz",words = ['xy', 'yz'],costs = [5, 6]) == -1
    assert candidate(target = "xyz",words = ['xy', 'yz', 'z'],costs = [5, 6, 7]) == 12
    assert candidate(target = "aaaa",words = ['z', 'zz', 'zzz'],costs = [1, 10, 100]) == -1
    assert candidate(target = "xyz",words = ['xy', 'y', 'z'],costs = [2, 1, 1]) == 3
    assert candidate(target = "abcde",words = ['a', 'bc', 'de'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg'],costs = [1, 2, 3, 5, 4]) == 6
    assert candidate(target = "backtracking",words = ['back', 'track', 'ing', 'backtr', 'ack'],costs = [7, 6, 5, 10, 4]) == 18
    assert candidate(target = "qwerty",words = ['q', 'w', 'e', 'r', 't', 'y', 'qw', 'er', 'ty'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 19
    assert candidate(target = "abcdabcdabcd",words = ['ab', 'cd', 'abcd'],costs = [1, 1, 5]) == 6
    assert candidate(target = "ababababab",words = ['a', 'ab', 'aba', 'bab'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabcabcabc",words = ['abc', 'ab', 'bc', 'c', 'a', 'b'],costs = [3, 2, 2, 1, 1, 1]) == 18
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'amm'],costs = [10, 20, 30, 5, 25]) == 60
    assert candidate(target = "mississippi",words = ['mis', 'sis', 'sip', 'i', 'p'],costs = [3, 5, 2, 1, 1]) == 12
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [10, 5, 1]) == 80
    assert candidate(target = "alibaba",words = ['ali', 'ba', 'ba', 'ba', 'ba', 'ba'],costs = [6, 1, 2, 3, 4, 5]) == 8
    assert candidate(target = "abcdabcd",words = ['abcd', 'cdab', 'bcda', 'dabc'],costs = [10, 20, 30, 40]) == 20
    assert candidate(target = "complexexample",words = ['com', 'plex', 'ex', 'ample', 'mple', 'ample', 'ple', 'le', 'e'],costs = [10, 20, 30, 40, 50, 60, 70, 80, 90]) == 100
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'bad', 'aba'],costs = [1, 2, 3, 4]) == -1
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'ming', 'program', 'ming'],costs = [10, 20, 5, 15, 5, 3]) == 8
    assert candidate(target = "ababab",words = ['aba', 'bab', 'ab'],costs = [2, 3, 1]) == 3
    assert candidate(target = "xyzzzz",words = ['x', 'y', 'zz', 'z'],costs = [10, 20, 1, 5]) == 32
    assert candidate(target = "heuristics",words = ['heuri', 'stics', 'ric', 'heu', 'stic'],costs = [9, 8, 6, 4, 5]) == 17
    assert candidate(target = "optimization",words = ['opt', 'imi', 'za', 'ti', 'on'],costs = [10, 20, 30, 40, 50]) == 150
    assert candidate(target = "abcdeabcde",words = ['abc', 'de', 'abcde'],costs = [5, 3, 10]) == 16
    assert candidate(target = "optimization",words = ['opt', 'imi', 'zation', 'tio', 'n'],costs = [5, 7, 8, 6, 2]) == 20
    assert candidate(target = "repeated",words = ['rep', 'eat', 'ed'],costs = [10, 5, 1]) == 16
    assert candidate(target = "abracadabra",words = ['abra', 'brac', 'cad', 'abra', 'dab'],costs = [5, 3, 7, 4, 2]) == 15
    assert candidate(target = "optimization",words = ['opti', 'miz', 'at', 'iz', 'izati', 'on'],costs = [6, 5, 10, 3, 8, 4]) == -1
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'aabb', 'bbcc'],costs = [3, 4, 5, 8, 9]) == 12
    assert candidate(target = "abcdabcdabcd",words = ['abcd', 'bc', 'c', 'a', 'abc'],costs = [10, 1, 2, 3, 5]) == 30
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'ram', 'ming'],costs = [7, 5, 4, 8, 3, 6]) == 15
    assert candidate(target = "abcdabcd",words = ['abc', 'abcd', 'ab', 'cd'],costs = [5, 1, 2, 3]) == 2
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'ami', 'cpro', 'gram', 'ming'],costs = [12, 11, 14, 13, 9]) == 59
    assert candidate(target = "hellohellohello",words = ['hel', 'lo', 'hello', 'helol'],costs = [2, 3, 6, 8]) == 15
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'bana', 'nana'],costs = [2, 3, 4, 5, 6]) == 8
    assert candidate(target = "ababababab",words = ['aba', 'bab'],costs = [5, 3]) == -1
    assert candidate(target = "longstringlongstring",words = ['long', 'str', 'ing', 'longstring'],costs = [12, 9, 10, 25]) == 50
    assert candidate(target = "abcdefgh",words = ['abcd', 'efgh', 'abc', 'def', 'ghi', 'ab', 'cd', 'ef', 'gh'],costs = [10, 10, 5, 5, 5, 1, 1, 1, 1]) == 4
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program', 'progr'],costs = [5, 3, 7, 12, 8]) == 15
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [10, 15, 20]) == 50
    assert candidate(target = "repeatedwords",words = ['rep', 'eat', 'edw', 'ords'],costs = [3, 5, 2, 4]) == 14
    assert candidate(target = "xxyyzz",words = ['xx', 'yy', 'zz', 'xy', 'yz'],costs = [5, 5, 5, 1, 1]) == 15
    assert candidate(target = "ijklmnopqr",words = ['ijkl', 'mnop', 'qrst', 'ij', 'kl', 'mn', 'op', 'qr', 'rst'],costs = [5, 5, 10, 1, 1, 1, 1, 1, 2]) == 5
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program'],costs = [10, 20, 30, 5]) == 35
    assert candidate(target = "mississippi",words = ['miss', 'is', 'ppi', 'issi', 'pp'],costs = [10, 2, 5, 3, 4]) == 18
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'abc', 'def', 'efg'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg', 'bc'],costs = [5, 5, 5, 10, 10, 1]) == 15
    assert candidate(target = "aaaaaaaaaa",words = ['aaa', 'aa', 'a'],costs = [1, 2, 3]) == 6
    assert candidate(target = "repeatedword",words = ['rep', 'eat', 'edwo', 'rd'],costs = [2, 3, 4, 1]) == 10
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssi', 'ippi', 'pi'],costs = [3, 5, 2, 4, 1]) == -1
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [100, 10, 1]) == 20
    assert candidate(target = "aaaabbbb",words = ['aaa', 'bbb', 'aa', 'bb', 'a', 'b'],costs = [10, 20, 3, 4, 1, 2]) == 12
    assert candidate(target = "xylophone",words = ['x', 'y', 'l', 'o', 'ph', 'on', 'e'],costs = [2, 2, 2, 2, 5, 4, 3]) == 20
    assert candidate(target = "complex",words = ['com', 'plex', 'le', 'c', 'x'],costs = [3, 7, 5, 2, 1]) == 10
    assert candidate(target = "abcdefgabcdefg",words = ['abc', 'def', 'g', 'abcdef', 'gh'],costs = [10, 15, 2, 30, 5]) == 54
    assert candidate(target = "abcdefg",words = ['a', 'bc', 'def', 'g'],costs = [2, 1, 3, 1]) == 7
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'aabbccdd'],costs = [1, 1, 1, 1, 1, 1, 10]) == 6
    assert candidate(target = "abcabcabcabc",words = ['abc', 'abcabc', 'ab'],costs = [5, 10, 1]) == 20
    assert candidate(target = "qwert",words = ['qw', 'w', 'ert', 'er', 'q', 't'],costs = [6, 3, 4, 5, 2, 1]) == 9
    assert candidate(target = "abcdefghij",words = ['a', 'bc', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abacaba",words = ['aba', 'ac', 'b', 'c', 'a'],costs = [10, 5, 3, 2, 1]) == 12
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'iss', 'ippi'],costs = [5, 2, 3, 1, 4]) == -1
    assert candidate(target = "xyzzxy",words = ['xy', 'zz', 'z', 'x', 'y'],costs = [5, 2, 1, 2, 2]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'cab', 'bad', 'da'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "mississippi",words = ['mis', 'is', 'ip', 'i', 'p'],costs = [5, 3, 2, 1, 1]) == -1
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz'],costs = [1, 2]) == 5
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "mnopqr",words = ['mno', 'pq', 'r', 'mnop', 'qr'],costs = [3, 4, 2, 7, 5]) == 9
    assert candidate(target = "zzzzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [2, 3, 5]) == 12
    assert candidate(target = "aabbccddeeff",words = ['ab', 'cd', 'ef', 'bb', 'cc', 'dd', 'ee', 'ff'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abcdefg",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g'],costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000]) == 490000
    assert candidate(target = "abcde",words = ['a', 'bc', 'd', 'e'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabc",words = ['abc', 'bc', 'c', 'a'],costs = [10, 1, 2, 3]) == 16
    assert candidate(target = "optimization",words = ['opt', 'im', 'iza', 'tion'],costs = [100, 50, 75, 25]) == 250
    assert candidate(target = "abcabcabc",words = ['abc', 'abcabc', 'ab', 'c', 'a'],costs = [10, 5, 2, 3, 1]) == 10
    assert candidate(target = "recursion",words = ['recur', 'sion', 'cur', 's', 'ion'],costs = [9, 6, 4, 2, 3]) == 14
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'ss', 'i'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "dynamicprogramming",words = ['dyna', 'mic', 'prog', 'gram', 'ming', 'pro'],costs = [8, 2, 5, 7, 4, 6]) == 27
    assert candidate(target = "aaaabbbbcccc",words = ['aa', 'bb', 'cc', 'ab', 'bc', 'ca'],costs = [1, 2, 3, 4, 5, 6]) == 12
    assert candidate(target = "abcabcabcabc",words = ['abc', 'cab', 'bca'],costs = [10, 15, 20]) == 40
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'abc', 'bca'],costs = [4, 5, 6, 10, 8]) == 15
    assert candidate(target = "abcdabc",words = ['a', 'bc', 'd', 'abc', 'abcd'],costs = [1, 5, 3, 7, 10]) == 15
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'a', 'b', 'c'],costs = [4, 5, 6, 1, 2, 3]) == 12
    assert candidate(target = "concatenation",words = ['conc', 'at', 'enate', 'tati', 'on'],costs = [12, 7, 15, 8, 4]) == -1
    assert candidate(target = "longstring",words = ['long', 'str', 'ing', 'longs', 'tring'],costs = [20, 15, 10, 18, 12]) == 30
    assert candidate(target = "hellohello",words = ['he', 'll', 'o', 'hello'],costs = [2, 1, 3, 5]) == 10
    assert candidate(target = "hellohellohello",words = ['he', 'el', 'll', 'lo', 'hello'],costs = [1, 2, 3, 4, 10]) == 30
    assert candidate(target = "dynamic",words = ['dyn', 'am', 'ic', 'mic', 'nami', 'mic'],costs = [10, 20, 5, 15, 30, 3]) == 35
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45
    assert candidate(target = "hellohellohello",words = ['hello', 'ello', 'll', 'llo', 'hel'],costs = [5, 6, 7, 8, 9]) == 15
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'nana'],costs = [1, 2, 3, 4]) == 5
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssippi', 'miss', 'ippi', 'is'],costs = [10, 5, 2, 7, 4, 3]) == -1
    assert candidate(target = "ababc",words = ['ab', 'aba', 'abc', 'bc'],costs = [3, 4, 5, 1]) == 5
    assert candidate(target = "abacabadabacaba",words = ['aba', 'abc', 'c', 'd', 'abacaba'],costs = [3, 5, 1, 2, 10]) == 16
    assert candidate(target = "alphabet",words = ['al', 'pha', 'bet', 'a', 'l', 'ph', 'ab', 'be', 'et'],costs = [3, 5, 2, 1, 1, 4, 6, 7, 8]) == 9
    assert candidate(target = "aaaaaaab",words = ['aaa', 'aa', 'a', 'b'],costs = [7, 3, 1, 5]) == 12
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'amic', 'pro', 'gram', 'ming'],costs = [10, 5, 8, 3, 6]) == 32
    assert candidate(target = "abacaba",words = ['a', 'b', 'aba', 'aca'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'bac', 'caba'],costs = [7, 8, 9]) == -1
    assert candidate(target = "xyxyxyxyxyxyxyxy",words = ['xyx', 'yxy', 'xy'],costs = [10, 20, 5]) == 40
    assert candidate(target = "optimization",words = ['opt', 'im', 'iz', 'at', 'ion', 'optim', 'izati'],costs = [5, 3, 4, 2, 7, 10, 8]) == 21
    assert candidate(target = "algorithms",words = ['algo', 'rithm', 'thm', 'log', 'orit'],costs = [6, 9, 7, 5, 10]) == -1
    assert candidate(target = "abcdabcdabcd",words = ['abc', 'dabc', 'abcd'],costs = [5, 15, 10]) == 30
    assert candidate(target = "hello",words = ['he', 'el', 'll', 'lo', 'o'],costs = [10, 20, 30, 40, 50]) == 90
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'si', 'ss', 'pi'],costs = [7, 8, 5, 2, 6, 4]) == -1
    assert candidate(target = "abracadabra",words = ['ab', 'ra', 'ca', 'da', 'abra'],costs = [1, 2, 3, 4, 5]) == -1
    assert candidate(target = "exampleexampleexample",words = ['ex', 'ample', 'exa', 'ple', 'eample'],costs = [5, 8, 4, 6, 7]) == 39
    assert candidate(target = "banana",words = ['ba', 'na', 'ana', 'ban', 'ana'],costs = [1, 2, 3, 4, 5]) == 5
    assert candidate(target = "subsequence",words = ['sub', 'seq', 'uen', 'ce'],costs = [5, 3, 7, 2]) == 17

2025-05-22 05:23:58,022 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().minimumCost
2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(target = "abc",words = ['abc'],costs = [1]) == 1
    assert candidate(target = "abc",words = ['abc'],costs = [10]) == 10
    assert candidate(target = "abcd",words = ['ab', 'cd'],costs = [1, 1]) == 2
    assert candidate(target = "abc",words = ['a', 'b', 'c'],costs = [1, 1, 1]) == 3
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [5, 7, 2]) == 14
    assert candidate(target = "abab",words = ['a', 'b', 'ab'],costs = [2, 3, 1]) == 2
    assert candidate(target = "abcabc",words = ['abc', 'bc', 'c'],costs = [3, 1, 4]) == 6
    assert candidate(target = "xyz",words = ['x', 'y', 'z'],costs = [2, 2, 2]) == 6
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcabc",words = ['abc', 'abcabc'],costs = [10, 5]) == 5
    assert candidate(target = "abcdef",words = ['abdef', 'abc', 'd', 'def', 'ef'],costs = [100, 1, 1, 10, 5]) == 7
    assert candidate(target = "abcabc",words = ['abc', 'bc'],costs = [3, 4]) == 6
    assert candidate(target = "xyz",words = ['xy', 'yz'],costs = [5, 6]) == -1
    assert candidate(target = "xyz",words = ['xy', 'yz', 'z'],costs = [5, 6, 7]) == 12
    assert candidate(target = "aaaa",words = ['z', 'zz', 'zzz'],costs = [1, 10, 100]) == -1
    assert candidate(target = "xyz",words = ['xy', 'y', 'z'],costs = [2, 1, 1]) == 3
    assert candidate(target = "abcde",words = ['a', 'bc', 'de'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg'],costs = [1, 2, 3, 5, 4]) == 6
    assert candidate(target = "backtracking",words = ['back', 'track', 'ing', 'backtr', 'ack'],costs = [7, 6, 5, 10, 4]) == 18
    assert candidate(target = "qwerty",words = ['q', 'w', 'e', 'r', 't', 'y', 'qw', 'er', 'ty'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 19
    assert candidate(target = "abcdabcdabcd",words = ['ab', 'cd', 'abcd'],costs = [1, 1, 5]) == 6
    assert candidate(target = "ababababab",words = ['a', 'ab', 'aba', 'bab'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabcabcabc",words = ['abc', 'ab', 'bc', 'c', 'a', 'b'],costs = [3, 2, 2, 1, 1, 1]) == 18
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'amm'],costs = [10, 20, 30, 5, 25]) == 60
    assert candidate(target = "mississippi",words = ['mis', 'sis', 'sip', 'i', 'p'],costs = [3, 5, 2, 1, 1]) == 12
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [10, 5, 1]) == 80
    assert candidate(target = "alibaba",words = ['ali', 'ba', 'ba', 'ba', 'ba', 'ba'],costs = [6, 1, 2, 3, 4, 5]) == 8
    assert candidate(target = "abcdabcd",words = ['abcd', 'cdab', 'bcda', 'dabc'],costs = [10, 20, 30, 40]) == 20
    assert candidate(target = "complexexample",words = ['com', 'plex', 'ex', 'ample', 'mple', 'ample', 'ple', 'le', 'e'],costs = [10, 20, 30, 40, 50, 60, 70, 80, 90]) == 100
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'bad', 'aba'],costs = [1, 2, 3, 4]) == -1
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'ming', 'program', 'ming'],costs = [10, 20, 5, 15, 5, 3]) == 8
    assert candidate(target = "ababab",words = ['aba', 'bab', 'ab'],costs = [2, 3, 1]) == 3
    assert candidate(target = "xyzzzz",words = ['x', 'y', 'zz', 'z'],costs = [10, 20, 1, 5]) == 32
    assert candidate(target = "heuristics",words = ['heuri', 'stics', 'ric', 'heu', 'stic'],costs = [9, 8, 6, 4, 5]) == 17
    assert candidate(target = "optimization",words = ['opt', 'imi', 'za', 'ti', 'on'],costs = [10, 20, 30, 40, 50]) == 150
    assert candidate(target = "abcdeabcde",words = ['abc', 'de', 'abcde'],costs = [5, 3, 10]) == 16
    assert candidate(target = "optimization",words = ['opt', 'imi', 'zation', 'tio', 'n'],costs = [5, 7, 8, 6, 2]) == 20
    assert candidate(target = "repeated",words = ['rep', 'eat', 'ed'],costs = [10, 5, 1]) == 16
    assert candidate(target = "abracadabra",words = ['abra', 'brac', 'cad', 'abra', 'dab'],costs = [5, 3, 7, 4, 2]) == 15
    assert candidate(target = "optimization",words = ['opti', 'miz', 'at', 'iz', 'izati', 'on'],costs = [6, 5, 10, 3, 8, 4]) == -1
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'aabb', 'bbcc'],costs = [3, 4, 5, 8, 9]) == 12
    assert candidate(target = "abcdabcdabcd",words = ['abcd', 'bc', 'c', 'a', 'abc'],costs = [10, 1, 2, 3, 5]) == 30
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'ram', 'ming'],costs = [7, 5, 4, 8, 3, 6]) == 15
    assert candidate(target = "abcdabcd",words = ['abc', 'abcd', 'ab', 'cd'],costs = [5, 1, 2, 3]) == 2
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'ami', 'cpro', 'gram', 'ming'],costs = [12, 11, 14, 13, 9]) == 59
    assert candidate(target = "hellohellohello",words = ['hel', 'lo', 'hello', 'helol'],costs = [2, 3, 6, 8]) == 15
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'bana', 'nana'],costs = [2, 3, 4, 5, 6]) == 8
    assert candidate(target = "ababababab",words = ['aba', 'bab'],costs = [5, 3]) == -1
    assert candidate(target = "longstringlongstring",words = ['long', 'str', 'ing', 'longstring'],costs = [12, 9, 10, 25]) == 50
    assert candidate(target = "abcdefgh",words = ['abcd', 'efgh', 'abc', 'def', 'ghi', 'ab', 'cd', 'ef', 'gh'],costs = [10, 10, 5, 5, 5, 1, 1, 1, 1]) == 4
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program', 'progr'],costs = [5, 3, 7, 12, 8]) == 15
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [10, 15, 20]) == 50
    assert candidate(target = "repeatedwords",words = ['rep', 'eat', 'edw', 'ords'],costs = [3, 5, 2, 4]) == 14
    assert candidate(target = "xxyyzz",words = ['xx', 'yy', 'zz', 'xy', 'yz'],costs = [5, 5, 5, 1, 1]) == 15
    assert candidate(target = "ijklmnopqr",words = ['ijkl', 'mnop', 'qrst', 'ij', 'kl', 'mn', 'op', 'qr', 'rst'],costs = [5, 5, 10, 1, 1, 1, 1, 1, 2]) == 5
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program'],costs = [10, 20, 30, 5]) == 35
    assert candidate(target = "mississippi",words = ['miss', 'is', 'ppi', 'issi', 'pp'],costs = [10, 2, 5, 3, 4]) == 18
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'abc', 'def', 'efg'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg', 'bc'],costs = [5, 5, 5, 10, 10, 1]) == 15
    assert candidate(target = "aaaaaaaaaa",words = ['aaa', 'aa', 'a'],costs = [1, 2, 3]) == 6
    assert candidate(target = "repeatedword",words = ['rep', 'eat', 'edwo', 'rd'],costs = [2, 3, 4, 1]) == 10
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssi', 'ippi', 'pi'],costs = [3, 5, 2, 4, 1]) == -1
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [100, 10, 1]) == 20
    assert candidate(target = "aaaabbbb",words = ['aaa', 'bbb', 'aa', 'bb', 'a', 'b'],costs = [10, 20, 3, 4, 1, 2]) == 12
    assert candidate(target = "xylophone",words = ['x', 'y', 'l', 'o', 'ph', 'on', 'e'],costs = [2, 2, 2, 2, 5, 4, 3]) == 20
    assert candidate(target = "complex",words = ['com', 'plex', 'le', 'c', 'x'],costs = [3, 7, 5, 2, 1]) == 10
    assert candidate(target = "abcdefgabcdefg",words = ['abc', 'def', 'g', 'abcdef', 'gh'],costs = [10, 15, 2, 30, 5]) == 54
    assert candidate(target = "abcdefg",words = ['a', 'bc', 'def', 'g'],costs = [2, 1, 3, 1]) == 7
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'aabbccdd'],costs = [1, 1, 1, 1, 1, 1, 10]) == 6
    assert candidate(target = "abcabcabcabc",words = ['abc', 'abcabc', 'ab'],costs = [5, 10, 1]) == 20
    assert candidate(target = "qwert",words = ['qw', 'w', 'ert', 'er', 'q', 't'],costs = [6, 3, 4, 5, 2, 1]) == 9
    assert candidate(target = "abcdefghij",words = ['a', 'bc', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abacaba",words = ['aba', 'ac', 'b', 'c', 'a'],costs = [10, 5, 3, 2, 1]) == 12
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'iss', 'ippi'],costs = [5, 2, 3, 1, 4]) == -1
    assert candidate(target = "xyzzxy",words = ['xy', 'zz', 'z', 'x', 'y'],costs = [5, 2, 1, 2, 2]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'cab', 'bad', 'da'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "mississippi",words = ['mis', 'is', 'ip', 'i', 'p'],costs = [5, 3, 2, 1, 1]) == -1
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz'],costs = [1, 2]) == 5
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "mnopqr",words = ['mno', 'pq', 'r', 'mnop', 'qr'],costs = [3, 4, 2, 7, 5]) == 9
    assert candidate(target = "zzzzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [2, 3, 5]) == 12
    assert candidate(target = "aabbccddeeff",words = ['ab', 'cd', 'ef', 'bb', 'cc', 'dd', 'ee', 'ff'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abcdefg",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g'],costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000]) == 490000
    assert candidate(target = "abcde",words = ['a', 'bc', 'd', 'e'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabc",words = ['abc', 'bc', 'c', 'a'],costs = [10, 1, 2, 3]) == 16
    assert candidate(target = "optimization",words = ['opt', 'im', 'iza', 'tion'],costs = [100, 50, 75, 25]) == 250
    assert candidate(target = "abcabcabc",words = ['abc', 'abcabc', 'ab', 'c', 'a'],costs = [10, 5, 2, 3, 1]) == 10
    assert candidate(target = "recursion",words = ['recur', 'sion', 'cur', 's', 'ion'],costs = [9, 6, 4, 2, 3]) == 14
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'ss', 'i'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "dynamicprogramming",words = ['dyna', 'mic', 'prog', 'gram', 'ming', 'pro'],costs = [8, 2, 5, 7, 4, 6]) == 27
    assert candidate(target = "aaaabbbbcccc",words = ['aa', 'bb', 'cc', 'ab', 'bc', 'ca'],costs = [1, 2, 3, 4, 5, 6]) == 12
    assert candidate(target = "abcabcabcabc",words = ['abc', 'cab', 'bca'],costs = [10, 15, 20]) == 40
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'abc', 'bca'],costs = [4, 5, 6, 10, 8]) == 15
    assert candidate(target = "abcdabc",words = ['a', 'bc', 'd', 'abc', 'abcd'],costs = [1, 5, 3, 7, 10]) == 15
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'a', 'b', 'c'],costs = [4, 5, 6, 1, 2, 3]) == 12
    assert candidate(target = "concatenation",words = ['conc', 'at', 'enate', 'tati', 'on'],costs = [12, 7, 15, 8, 4]) == -1
    assert candidate(target = "longstring",words = ['long', 'str', 'ing', 'longs', 'tring'],costs = [20, 15, 10, 18, 12]) == 30
    assert candidate(target = "hellohello",words = ['he', 'll', 'o', 'hello'],costs = [2, 1, 3, 5]) == 10
    assert candidate(target = "hellohellohello",words = ['he', 'el', 'll', 'lo', 'hello'],costs = [1, 2, 3, 4, 10]) == 30
    assert candidate(target = "dynamic",words = ['dyn', 'am', 'ic', 'mic', 'nami', 'mic'],costs = [10, 20, 5, 15, 30, 3]) == 35
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45
    assert candidate(target = "hellohellohello",words = ['hello', 'ello', 'll', 'llo', 'hel'],costs = [5, 6, 7, 8, 9]) == 15
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'nana'],costs = [1, 2, 3, 4]) == 5
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssippi', 'miss', 'ippi', 'is'],costs = [10, 5, 2, 7, 4, 3]) == -1
    assert candidate(target = "ababc",words = ['ab', 'aba', 'abc', 'bc'],costs = [3, 4, 5, 1]) == 5
    assert candidate(target = "abacabadabacaba",words = ['aba', 'abc', 'c', 'd', 'abacaba'],costs = [3, 5, 1, 2, 10]) == 16
    assert candidate(target = "alphabet",words = ['al', 'pha', 'bet', 'a', 'l', 'ph', 'ab', 'be', 'et'],costs = [3, 5, 2, 1, 1, 4, 6, 7, 8]) == 9
    assert candidate(target = "aaaaaaab",words = ['aaa', 'aa', 'a', 'b'],costs = [7, 3, 1, 5]) == 12
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'amic', 'pro', 'gram', 'ming'],costs = [10, 5, 8, 3, 6]) == 32
    assert candidate(target = "abacaba",words = ['a', 'b', 'aba', 'aca'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'bac', 'caba'],costs = [7, 8, 9]) == -1
    assert candidate(target = "xyxyxyxyxyxyxyxy",words = ['xyx', 'yxy', 'xy'],costs = [10, 20, 5]) == 40
    assert candidate(target = "optimization",words = ['opt', 'im', 'iz', 'at', 'ion', 'optim', 'izati'],costs = [5, 3, 4, 2, 7, 10, 8]) == 21
    assert candidate(target = "algorithms",words = ['algo', 'rithm', 'thm', 'log', 'orit'],costs = [6, 9, 7, 5, 10]) == -1
    assert candidate(target = "abcdabcdabcd",words = ['abc', 'dabc', 'abcd'],costs = [5, 15, 10]) == 30
    assert candidate(target = "hello",words = ['he', 'el', 'll', 'lo', 'o'],costs = [10, 20, 30, 40, 50]) == 90
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'si', 'ss', 'pi'],costs = [7, 8, 5, 2, 6, 4]) == -1
    assert candidate(target = "abracadabra",words = ['ab', 'ra', 'ca', 'da', 'abra'],costs = [1, 2, 3, 4, 5]) == -1
    assert candidate(target = "exampleexampleexample",words = ['ex', 'ample', 'exa', 'ple', 'eample'],costs = [5, 8, 4, 6, 7]) == 39
    assert candidate(target = "banana",words = ['ba', 'na', 'ana', 'ban', 'ana'],costs = [1, 2, 3, 4, 5]) == 5
    assert candidate(target = "subsequence",words = ['sub', 'seq', 'uen', 'ce'],costs = [5, 3, 7, 2]) == 17

2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().minimumCost
2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  # base case: empty string has cost 0

        for i in range(n):
            if dp[i] == float('inf'):
                continue  # can't reach this position, skip
            for j in range(len(words)):
                word = words[j]
                cost = costs[j]
                word_len = len(word)
                # Check if the word matches the target starting at position i
                if i + word_len > n:
                    continue
                if target[i:i+word_len] == word:
                    if dp[i] + cost < dp[i + word_len]:
                        dp[i + word_len] = dp[i] + cost

        return dp[n] if dp[n] != float('inf') else -1
2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  # base case: empty string has cost 0

        for i in range(n):
            if dp[i] == float('inf'):
                continue  # can't reach this position, skip
            for j in range(len(words)):
                word = words[j]
                cost = costs[j]
                word_len = len(word)
                # Check if the word matches the target starting at position i
                if i + word_len > n:
                    continue
                if target[i:i+word_len] == word:
                    if dp[i] + cost < dp[i + word_len]:
                        dp[i + word_len] = dp[i] + cost

        return dp[n] if dp[n] != float('inf') else -1

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(target = "abc",words = ['abc'],costs = [1]) == 1
    assert candidate(target = "abc",words = ['abc'],costs = [10]) == 10
    assert candidate(target = "abcd",words = ['ab', 'cd'],costs = [1, 1]) == 2
    assert candidate(target = "abc",words = ['a', 'b', 'c'],costs = [1, 1, 1]) == 3
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [5, 7, 2]) == 14
    assert candidate(target = "abab",words = ['a', 'b', 'ab'],costs = [2, 3, 1]) == 2
    assert candidate(target = "abcabc",words = ['abc', 'bc', 'c'],costs = [3, 1, 4]) == 6
    assert candidate(target = "xyz",words = ['x', 'y', 'z'],costs = [2, 2, 2]) == 6
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcabc",words = ['abc', 'abcabc'],costs = [10, 5]) == 5
    assert candidate(target = "abcdef",words = ['abdef', 'abc', 'd', 'def', 'ef'],costs = [100, 1, 1, 10, 5]) == 7
    assert candidate(target = "abcabc",words = ['abc', 'bc'],costs = [3, 4]) == 6
    assert candidate(target = "xyz",words = ['xy', 'yz'],costs = [5, 6]) == -1
    assert candidate(target = "xyz",words = ['xy', 'yz', 'z'],costs = [5, 6, 7]) == 12
    assert candidate(target = "aaaa",words = ['z', 'zz', 'zzz'],costs = [1, 10, 100]) == -1
    assert candidate(target = "xyz",words = ['xy', 'y', 'z'],costs = [2, 1, 1]) == 3
    assert candidate(target = "abcde",words = ['a', 'bc', 'de'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg'],costs = [1, 2, 3, 5, 4]) == 6
    assert candidate(target = "backtracking",words = ['back', 'track', 'ing', 'backtr', 'ack'],costs = [7, 6, 5, 10, 4]) == 18
    assert candidate(target = "qwerty",words = ['q', 'w', 'e', 'r', 't', 'y', 'qw', 'er', 'ty'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 19
    assert candidate(target = "abcdabcdabcd",words = ['ab', 'cd', 'abcd'],costs = [1, 1, 5]) == 6
    assert candidate(target = "ababababab",words = ['a', 'ab', 'aba', 'bab'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabcabcabc",words = ['abc', 'ab', 'bc', 'c', 'a', 'b'],costs = [3, 2, 2, 1, 1, 1]) == 18
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'amm'],costs = [10, 20, 30, 5, 25]) == 60
    assert candidate(target = "mississippi",words = ['mis', 'sis', 'sip', 'i', 'p'],costs = [3, 5, 2, 1, 1]) == 12
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [10, 5, 1]) == 80
    assert candidate(target = "alibaba",words = ['ali', 'ba', 'ba', 'ba', 'ba', 'ba'],costs = [6, 1, 2, 3, 4, 5]) == 8
    assert candidate(target = "abcdabcd",words = ['abcd', 'cdab', 'bcda', 'dabc'],costs = [10, 20, 30, 40]) == 20
    assert candidate(target = "complexexample",words = ['com', 'plex', 'ex', 'ample', 'mple', 'ample', 'ple', 'le', 'e'],costs = [10, 20, 30, 40, 50, 60, 70, 80, 90]) == 100
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'bad', 'aba'],costs = [1, 2, 3, 4]) == -1
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'ming', 'program', 'ming'],costs = [10, 20, 5, 15, 5, 3]) == 8
    assert candidate(target = "ababab",words = ['aba', 'bab', 'ab'],costs = [2, 3, 1]) == 3
    assert candidate(target = "xyzzzz",words = ['x', 'y', 'zz', 'z'],costs = [10, 20, 1, 5]) == 32
    assert candidate(target = "heuristics",words = ['heuri', 'stics', 'ric', 'heu', 'stic'],costs = [9, 8, 6, 4, 5]) == 17
    assert candidate(target = "optimization",words = ['opt', 'imi', 'za', 'ti', 'on'],costs = [10, 20, 30, 40, 50]) == 150
    assert candidate(target = "abcdeabcde",words = ['abc', 'de', 'abcde'],costs = [5, 3, 10]) == 16
    assert candidate(target = "optimization",words = ['opt', 'imi', 'zation', 'tio', 'n'],costs = [5, 7, 8, 6, 2]) == 20
    assert candidate(target = "repeated",words = ['rep', 'eat', 'ed'],costs = [10, 5, 1]) == 16
    assert candidate(target = "abracadabra",words = ['abra', 'brac', 'cad', 'abra', 'dab'],costs = [5, 3, 7, 4, 2]) == 15
    assert candidate(target = "optimization",words = ['opti', 'miz', 'at', 'iz', 'izati', 'on'],costs = [6, 5, 10, 3, 8, 4]) == -1
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'aabb', 'bbcc'],costs = [3, 4, 5, 8, 9]) == 12
    assert candidate(target = "abcdabcdabcd",words = ['abcd', 'bc', 'c', 'a', 'abc'],costs = [10, 1, 2, 3, 5]) == 30
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'ram', 'ming'],costs = [7, 5, 4, 8, 3, 6]) == 15
    assert candidate(target = "abcdabcd",words = ['abc', 'abcd', 'ab', 'cd'],costs = [5, 1, 2, 3]) == 2
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'ami', 'cpro', 'gram', 'ming'],costs = [12, 11, 14, 13, 9]) == 59
    assert candidate(target = "hellohellohello",words = ['hel', 'lo', 'hello', 'helol'],costs = [2, 3, 6, 8]) == 15
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'bana', 'nana'],costs = [2, 3, 4, 5, 6]) == 8
    assert candidate(target = "ababababab",words = ['aba', 'bab'],costs = [5, 3]) == -1
    assert candidate(target = "longstringlongstring",words = ['long', 'str', 'ing', 'longstring'],costs = [12, 9, 10, 25]) == 50
    assert candidate(target = "abcdefgh",words = ['abcd', 'efgh', 'abc', 'def', 'ghi', 'ab', 'cd', 'ef', 'gh'],costs = [10, 10, 5, 5, 5, 1, 1, 1, 1]) == 4
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program', 'progr'],costs = [5, 3, 7, 12, 8]) == 15
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [10, 15, 20]) == 50
    assert candidate(target = "repeatedwords",words = ['rep', 'eat', 'edw', 'ords'],costs = [3, 5, 2, 4]) == 14
    assert candidate(target = "xxyyzz",words = ['xx', 'yy', 'zz', 'xy', 'yz'],costs = [5, 5, 5, 1, 1]) == 15
    assert candidate(target = "ijklmnopqr",words = ['ijkl', 'mnop', 'qrst', 'ij', 'kl', 'mn', 'op', 'qr', 'rst'],costs = [5, 5, 10, 1, 1, 1, 1, 1, 2]) == 5
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program'],costs = [10, 20, 30, 5]) == 35
    assert candidate(target = "mississippi",words = ['miss', 'is', 'ppi', 'issi', 'pp'],costs = [10, 2, 5, 3, 4]) == 18
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'abc', 'def', 'efg'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg', 'bc'],costs = [5, 5, 5, 10, 10, 1]) == 15
    assert candidate(target = "aaaaaaaaaa",words = ['aaa', 'aa', 'a'],costs = [1, 2, 3]) == 6
    assert candidate(target = "repeatedword",words = ['rep', 'eat', 'edwo', 'rd'],costs = [2, 3, 4, 1]) == 10
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssi', 'ippi', 'pi'],costs = [3, 5, 2, 4, 1]) == -1
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [100, 10, 1]) == 20
    assert candidate(target = "aaaabbbb",words = ['aaa', 'bbb', 'aa', 'bb', 'a', 'b'],costs = [10, 20, 3, 4, 1, 2]) == 12
    assert candidate(target = "xylophone",words = ['x', 'y', 'l', 'o', 'ph', 'on', 'e'],costs = [2, 2, 2, 2, 5, 4, 3]) == 20
    assert candidate(target = "complex",words = ['com', 'plex', 'le', 'c', 'x'],costs = [3, 7, 5, 2, 1]) == 10
    assert candidate(target = "abcdefgabcdefg",words = ['abc', 'def', 'g', 'abcdef', 'gh'],costs = [10, 15, 2, 30, 5]) == 54
    assert candidate(target = "abcdefg",words = ['a', 'bc', 'def', 'g'],costs = [2, 1, 3, 1]) == 7
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'aabbccdd'],costs = [1, 1, 1, 1, 1, 1, 10]) == 6
    assert candidate(target = "abcabcabcabc",words = ['abc', 'abcabc', 'ab'],costs = [5, 10, 1]) == 20
    assert candidate(target = "qwert",words = ['qw', 'w', 'ert', 'er', 'q', 't'],costs = [6, 3, 4, 5, 2, 1]) == 9
    assert candidate(target = "abcdefghij",words = ['a', 'bc', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abacaba",words = ['aba', 'ac', 'b', 'c', 'a'],costs = [10, 5, 3, 2, 1]) == 12
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'iss', 'ippi'],costs = [5, 2, 3, 1, 4]) == -1
    assert candidate(target = "xyzzxy",words = ['xy', 'zz', 'z', 'x', 'y'],costs = [5, 2, 1, 2, 2]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'cab', 'bad', 'da'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "mississippi",words = ['mis', 'is', 'ip', 'i', 'p'],costs = [5, 3, 2, 1, 1]) == -1
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz'],costs = [1, 2]) == 5
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "mnopqr",words = ['mno', 'pq', 'r', 'mnop', 'qr'],costs = [3, 4, 2, 7, 5]) == 9
    assert candidate(target = "zzzzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [2, 3, 5]) == 12
    assert candidate(target = "aabbccddeeff",words = ['ab', 'cd', 'ef', 'bb', 'cc', 'dd', 'ee', 'ff'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abcdefg",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g'],costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000]) == 490000
    assert candidate(target = "abcde",words = ['a', 'bc', 'd', 'e'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabc",words = ['abc', 'bc', 'c', 'a'],costs = [10, 1, 2, 3]) == 16
    assert candidate(target = "optimization",words = ['opt', 'im', 'iza', 'tion'],costs = [100, 50, 75, 25]) == 250
    assert candidate(target = "abcabcabc",words = ['abc', 'abcabc', 'ab', 'c', 'a'],costs = [10, 5, 2, 3, 1]) == 10
    assert candidate(target = "recursion",words = ['recur', 'sion', 'cur', 's', 'ion'],costs = [9, 6, 4, 2, 3]) == 14
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'ss', 'i'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "dynamicprogramming",words = ['dyna', 'mic', 'prog', 'gram', 'ming', 'pro'],costs = [8, 2, 5, 7, 4, 6]) == 27
    assert candidate(target = "aaaabbbbcccc",words = ['aa', 'bb', 'cc', 'ab', 'bc', 'ca'],costs = [1, 2, 3, 4, 5, 6]) == 12
    assert candidate(target = "abcabcabcabc",words = ['abc', 'cab', 'bca'],costs = [10, 15, 20]) == 40
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'abc', 'bca'],costs = [4, 5, 6, 10, 8]) == 15
    assert candidate(target = "abcdabc",words = ['a', 'bc', 'd', 'abc', 'abcd'],costs = [1, 5, 3, 7, 10]) == 15
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'a', 'b', 'c'],costs = [4, 5, 6, 1, 2, 3]) == 12
    assert candidate(target = "concatenation",words = ['conc', 'at', 'enate', 'tati', 'on'],costs = [12, 7, 15, 8, 4]) == -1
    assert candidate(target = "longstring",words = ['long', 'str', 'ing', 'longs', 'tring'],costs = [20, 15, 10, 18, 12]) == 30
    assert candidate(target = "hellohello",words = ['he', 'll', 'o', 'hello'],costs = [2, 1, 3, 5]) == 10
    assert candidate(target = "hellohellohello",words = ['he', 'el', 'll', 'lo', 'hello'],costs = [1, 2, 3, 4, 10]) == 30
    assert candidate(target = "dynamic",words = ['dyn', 'am', 'ic', 'mic', 'nami', 'mic'],costs = [10, 20, 5, 15, 30, 3]) == 35
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45
    assert candidate(target = "hellohellohello",words = ['hello', 'ello', 'll', 'llo', 'hel'],costs = [5, 6, 7, 8, 9]) == 15
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'nana'],costs = [1, 2, 3, 4]) == 5
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssippi', 'miss', 'ippi', 'is'],costs = [10, 5, 2, 7, 4, 3]) == -1
    assert candidate(target = "ababc",words = ['ab', 'aba', 'abc', 'bc'],costs = [3, 4, 5, 1]) == 5
    assert candidate(target = "abacabadabacaba",words = ['aba', 'abc', 'c', 'd', 'abacaba'],costs = [3, 5, 1, 2, 10]) == 16
    assert candidate(target = "alphabet",words = ['al', 'pha', 'bet', 'a', 'l', 'ph', 'ab', 'be', 'et'],costs = [3, 5, 2, 1, 1, 4, 6, 7, 8]) == 9
    assert candidate(target = "aaaaaaab",words = ['aaa', 'aa', 'a', 'b'],costs = [7, 3, 1, 5]) == 12
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'amic', 'pro', 'gram', 'ming'],costs = [10, 5, 8, 3, 6]) == 32
    assert candidate(target = "abacaba",words = ['a', 'b', 'aba', 'aca'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'bac', 'caba'],costs = [7, 8, 9]) == -1
    assert candidate(target = "xyxyxyxyxyxyxyxy",words = ['xyx', 'yxy', 'xy'],costs = [10, 20, 5]) == 40
    assert candidate(target = "optimization",words = ['opt', 'im', 'iz', 'at', 'ion', 'optim', 'izati'],costs = [5, 3, 4, 2, 7, 10, 8]) == 21
    assert candidate(target = "algorithms",words = ['algo', 'rithm', 'thm', 'log', 'orit'],costs = [6, 9, 7, 5, 10]) == -1
    assert candidate(target = "abcdabcdabcd",words = ['abc', 'dabc', 'abcd'],costs = [5, 15, 10]) == 30
    assert candidate(target = "hello",words = ['he', 'el', 'll', 'lo', 'o'],costs = [10, 20, 30, 40, 50]) == 90
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'si', 'ss', 'pi'],costs = [7, 8, 5, 2, 6, 4]) == -1
    assert candidate(target = "abracadabra",words = ['ab', 'ra', 'ca', 'da', 'abra'],costs = [1, 2, 3, 4, 5]) == -1
    assert candidate(target = "exampleexampleexample",words = ['ex', 'ample', 'exa', 'ple', 'eample'],costs = [5, 8, 4, 6, 7]) == 39
    assert candidate(target = "banana",words = ['ba', 'na', 'ana', 'ban', 'ana'],costs = [1, 2, 3, 4, 5]) == 5
    assert candidate(target = "subsequence",words = ['sub', 'seq', 'uen', 'ce'],costs = [5, 3, 7, 2]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minimumCost)

2025-05-22 05:23:58,022 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  # base case: empty string has cost 0

        for i in range(n):
            if dp[i] == float('inf'):
                continue  # can't reach this position, skip
            for j in range(len(words)):
                word = words[j]
                cost = costs[j]
                word_len = len(word)
                # Check if the word matches the target starting at position i
                if i + word_len > n:
                    continue
                if target[i:i+word_len] == word:
                    if dp[i] + cost < dp[i + word_len]:
                        dp[i + word_len] = dp[i] + cost

        return dp[n] if dp[n] != float('inf') else -1

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(target = "abc",words = ['abc'],costs = [1]) == 1
    assert candidate(target = "abc",words = ['abc'],costs = [10]) == 10
    assert candidate(target = "abcd",words = ['ab', 'cd'],costs = [1, 1]) == 2
    assert candidate(target = "abc",words = ['a', 'b', 'c'],costs = [1, 1, 1]) == 3
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [5, 7, 2]) == 14
    assert candidate(target = "abab",words = ['a', 'b', 'ab'],costs = [2, 3, 1]) == 2
    assert candidate(target = "abcabc",words = ['abc', 'bc', 'c'],costs = [3, 1, 4]) == 6
    assert candidate(target = "xyz",words = ['x', 'y', 'z'],costs = [2, 2, 2]) == 6
    assert candidate(target = "hello",words = ['he', 'll', 'o'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcabc",words = ['abc', 'abcabc'],costs = [10, 5]) == 5
    assert candidate(target = "abcdef",words = ['abdef', 'abc', 'd', 'def', 'ef'],costs = [100, 1, 1, 10, 5]) == 7
    assert candidate(target = "abcabc",words = ['abc', 'bc'],costs = [3, 4]) == 6
    assert candidate(target = "xyz",words = ['xy', 'yz'],costs = [5, 6]) == -1
    assert candidate(target = "xyz",words = ['xy', 'yz', 'z'],costs = [5, 6, 7]) == 12
    assert candidate(target = "aaaa",words = ['z', 'zz', 'zzz'],costs = [1, 10, 100]) == -1
    assert candidate(target = "xyz",words = ['xy', 'y', 'z'],costs = [2, 1, 1]) == 3
    assert candidate(target = "abcde",words = ['a', 'bc', 'de'],costs = [1, 2, 3]) == 6
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg'],costs = [1, 2, 3, 5, 4]) == 6
    assert candidate(target = "backtracking",words = ['back', 'track', 'ing', 'backtr', 'ack'],costs = [7, 6, 5, 10, 4]) == 18
    assert candidate(target = "qwerty",words = ['q', 'w', 'e', 'r', 't', 'y', 'qw', 'er', 'ty'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 19
    assert candidate(target = "abcdabcdabcd",words = ['ab', 'cd', 'abcd'],costs = [1, 1, 5]) == 6
    assert candidate(target = "ababababab",words = ['a', 'ab', 'aba', 'bab'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabcabcabc",words = ['abc', 'ab', 'bc', 'c', 'a', 'b'],costs = [3, 2, 2, 1, 1, 1]) == 18
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'amm'],costs = [10, 20, 30, 5, 25]) == 60
    assert candidate(target = "mississippi",words = ['mis', 'sis', 'sip', 'i', 'p'],costs = [3, 5, 2, 1, 1]) == 12
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [10, 5, 1]) == 80
    assert candidate(target = "alibaba",words = ['ali', 'ba', 'ba', 'ba', 'ba', 'ba'],costs = [6, 1, 2, 3, 4, 5]) == 8
    assert candidate(target = "abcdabcd",words = ['abcd', 'cdab', 'bcda', 'dabc'],costs = [10, 20, 30, 40]) == 20
    assert candidate(target = "complexexample",words = ['com', 'plex', 'ex', 'ample', 'mple', 'ample', 'ple', 'le', 'e'],costs = [10, 20, 30, 40, 50, 60, 70, 80, 90]) == 100
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'bad', 'aba'],costs = [1, 2, 3, 4]) == -1
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'ming', 'program', 'ming'],costs = [10, 20, 5, 15, 5, 3]) == 8
    assert candidate(target = "ababab",words = ['aba', 'bab', 'ab'],costs = [2, 3, 1]) == 3
    assert candidate(target = "xyzzzz",words = ['x', 'y', 'zz', 'z'],costs = [10, 20, 1, 5]) == 32
    assert candidate(target = "heuristics",words = ['heuri', 'stics', 'ric', 'heu', 'stic'],costs = [9, 8, 6, 4, 5]) == 17
    assert candidate(target = "optimization",words = ['opt', 'imi', 'za', 'ti', 'on'],costs = [10, 20, 30, 40, 50]) == 150
    assert candidate(target = "abcdeabcde",words = ['abc', 'de', 'abcde'],costs = [5, 3, 10]) == 16
    assert candidate(target = "optimization",words = ['opt', 'imi', 'zation', 'tio', 'n'],costs = [5, 7, 8, 6, 2]) == 20
    assert candidate(target = "repeated",words = ['rep', 'eat', 'ed'],costs = [10, 5, 1]) == 16
    assert candidate(target = "abracadabra",words = ['abra', 'brac', 'cad', 'abra', 'dab'],costs = [5, 3, 7, 4, 2]) == 15
    assert candidate(target = "optimization",words = ['opti', 'miz', 'at', 'iz', 'izati', 'on'],costs = [6, 5, 10, 3, 8, 4]) == -1
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'aabb', 'bbcc'],costs = [3, 4, 5, 8, 9]) == 12
    assert candidate(target = "abcdabcdabcd",words = ['abcd', 'bc', 'c', 'a', 'abc'],costs = [10, 1, 2, 3, 5]) == 30
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'prog', 'ram', 'ming'],costs = [7, 5, 4, 8, 3, 6]) == 15
    assert candidate(target = "abcdabcd",words = ['abc', 'abcd', 'ab', 'cd'],costs = [5, 1, 2, 3]) == 2
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'ami', 'cpro', 'gram', 'ming'],costs = [12, 11, 14, 13, 9]) == 59
    assert candidate(target = "hellohellohello",words = ['hel', 'lo', 'hello', 'helol'],costs = [2, 3, 6, 8]) == 15
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'bana', 'nana'],costs = [2, 3, 4, 5, 6]) == 8
    assert candidate(target = "ababababab",words = ['aba', 'bab'],costs = [5, 3]) == -1
    assert candidate(target = "longstringlongstring",words = ['long', 'str', 'ing', 'longstring'],costs = [12, 9, 10, 25]) == 50
    assert candidate(target = "abcdefgh",words = ['abcd', 'efgh', 'abc', 'def', 'ghi', 'ab', 'cd', 'ef', 'gh'],costs = [10, 10, 5, 5, 5, 1, 1, 1, 1]) == 4
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program', 'progr'],costs = [5, 3, 7, 12, 8]) == 15
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [10, 15, 20]) == 50
    assert candidate(target = "repeatedwords",words = ['rep', 'eat', 'edw', 'ords'],costs = [3, 5, 2, 4]) == 14
    assert candidate(target = "xxyyzz",words = ['xx', 'yy', 'zz', 'xy', 'yz'],costs = [5, 5, 5, 1, 1]) == 15
    assert candidate(target = "ijklmnopqr",words = ['ijkl', 'mnop', 'qrst', 'ij', 'kl', 'mn', 'op', 'qr', 'rst'],costs = [5, 5, 10, 1, 1, 1, 1, 1, 2]) == 5
    assert candidate(target = "programming",words = ['pro', 'gram', 'ming', 'program'],costs = [10, 20, 30, 5]) == 35
    assert candidate(target = "mississippi",words = ['miss', 'is', 'ppi', 'issi', 'pp'],costs = [10, 2, 5, 3, 4]) == 18
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'abc', 'def', 'efg'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21
    assert candidate(target = "abcdefg",words = ['abc', 'def', 'g', 'abcdef', 'efg', 'bc'],costs = [5, 5, 5, 10, 10, 1]) == 15
    assert candidate(target = "aaaaaaaaaa",words = ['aaa', 'aa', 'a'],costs = [1, 2, 3]) == 6
    assert candidate(target = "repeatedword",words = ['rep', 'eat', 'edwo', 'rd'],costs = [2, 3, 4, 1]) == 10
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssi', 'ippi', 'pi'],costs = [3, 5, 2, 4, 1]) == -1
    assert candidate(target = "zzzzzzzzzzzzzzzzzzzz",words = ['zzz', 'zz', 'z'],costs = [100, 10, 1]) == 20
    assert candidate(target = "aaaabbbb",words = ['aaa', 'bbb', 'aa', 'bb', 'a', 'b'],costs = [10, 20, 3, 4, 1, 2]) == 12
    assert candidate(target = "xylophone",words = ['x', 'y', 'l', 'o', 'ph', 'on', 'e'],costs = [2, 2, 2, 2, 5, 4, 3]) == 20
    assert candidate(target = "complex",words = ['com', 'plex', 'le', 'c', 'x'],costs = [3, 7, 5, 2, 1]) == 10
    assert candidate(target = "abcdefgabcdefg",words = ['abc', 'def', 'g', 'abcdef', 'gh'],costs = [10, 15, 2, 30, 5]) == 54
    assert candidate(target = "abcdefg",words = ['a', 'bc', 'def', 'g'],costs = [2, 1, 3, 1]) == 7
    assert candidate(target = "aabbccddeeff",words = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'aabbccdd'],costs = [1, 1, 1, 1, 1, 1, 10]) == 6
    assert candidate(target = "abcabcabcabc",words = ['abc', 'abcabc', 'ab'],costs = [5, 10, 1]) == 20
    assert candidate(target = "qwert",words = ['qw', 'w', 'ert', 'er', 'q', 't'],costs = [6, 3, 4, 5, 2, 1]) == 9
    assert candidate(target = "abcdefghij",words = ['a', 'bc', 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abacaba",words = ['aba', 'ac', 'b', 'c', 'a'],costs = [10, 5, 3, 2, 1]) == 12
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'iss', 'ippi'],costs = [5, 2, 3, 1, 4]) == -1
    assert candidate(target = "xyzzxy",words = ['xy', 'zz', 'z', 'x', 'y'],costs = [5, 2, 1, 2, 2]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'aca', 'cab', 'bad', 'da'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "mississippi",words = ['mis', 'is', 'ip', 'i', 'p'],costs = [5, 3, 2, 1, 1]) == -1
    assert candidate(target = "zzzzzzzzzz",words = ['zz', 'zzz'],costs = [1, 2]) == 5
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 351
    assert candidate(target = "mnopqr",words = ['mno', 'pq', 'r', 'mnop', 'qr'],costs = [3, 4, 2, 7, 5]) == 9
    assert candidate(target = "zzzzzzzzzzzz",words = ['zz', 'zzz', 'zzzz'],costs = [2, 3, 5]) == 12
    assert candidate(target = "aabbccddeeff",words = ['ab', 'cd', 'ef', 'bb', 'cc', 'dd', 'ee', 'ff'],costs = [1, 2, 3, 4, 5, 6, 7, 8]) == -1
    assert candidate(target = "abcdefg",words = ['a', 'b', 'c', 'd', 'e', 'f', 'g'],costs = [100000, 90000, 80000, 70000, 60000, 50000, 40000]) == 490000
    assert candidate(target = "abcde",words = ['a', 'bc', 'd', 'e'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abcabcabcabc",words = ['abc', 'bc', 'c', 'a'],costs = [10, 1, 2, 3]) == 16
    assert candidate(target = "optimization",words = ['opt', 'im', 'iza', 'tion'],costs = [100, 50, 75, 25]) == 250
    assert candidate(target = "abcabcabc",words = ['abc', 'abcabc', 'ab', 'c', 'a'],costs = [10, 5, 2, 3, 1]) == 10
    assert candidate(target = "recursion",words = ['recur', 'sion', 'cur', 's', 'ion'],costs = [9, 6, 4, 2, 3]) == 14
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'ss', 'i'],costs = [10, 20, 30, 40, 50]) == -1
    assert candidate(target = "dynamicprogramming",words = ['dyna', 'mic', 'prog', 'gram', 'ming', 'pro'],costs = [8, 2, 5, 7, 4, 6]) == 27
    assert candidate(target = "aaaabbbbcccc",words = ['aa', 'bb', 'cc', 'ab', 'bc', 'ca'],costs = [1, 2, 3, 4, 5, 6]) == 12
    assert candidate(target = "abcabcabcabc",words = ['abc', 'cab', 'bca'],costs = [10, 15, 20]) == 40
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'abc', 'bca'],costs = [4, 5, 6, 10, 8]) == 15
    assert candidate(target = "abcdabc",words = ['a', 'bc', 'd', 'abc', 'abcd'],costs = [1, 5, 3, 7, 10]) == 15
    assert candidate(target = "aabbcc",words = ['aa', 'bb', 'cc', 'a', 'b', 'c'],costs = [4, 5, 6, 1, 2, 3]) == 12
    assert candidate(target = "concatenation",words = ['conc', 'at', 'enate', 'tati', 'on'],costs = [12, 7, 15, 8, 4]) == -1
    assert candidate(target = "longstring",words = ['long', 'str', 'ing', 'longs', 'tring'],costs = [20, 15, 10, 18, 12]) == 30
    assert candidate(target = "hellohello",words = ['he', 'll', 'o', 'hello'],costs = [2, 1, 3, 5]) == 10
    assert candidate(target = "hellohellohello",words = ['he', 'el', 'll', 'lo', 'hello'],costs = [1, 2, 3, 4, 10]) == 30
    assert candidate(target = "dynamic",words = ['dyn', 'am', 'ic', 'mic', 'nami', 'mic'],costs = [10, 20, 5, 15, 30, 3]) == 35
    assert candidate(target = "abcdefghijklmnopqrstuvwxyz",words = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'],costs = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45
    assert candidate(target = "hellohellohello",words = ['hello', 'ello', 'll', 'llo', 'hel'],costs = [5, 6, 7, 8, 9]) == 15
    assert candidate(target = "banana",words = ['ba', 'na', 'an', 'nana'],costs = [1, 2, 3, 4]) == 5
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ssippi', 'miss', 'ippi', 'is'],costs = [10, 5, 2, 7, 4, 3]) == -1
    assert candidate(target = "ababc",words = ['ab', 'aba', 'abc', 'bc'],costs = [3, 4, 5, 1]) == 5
    assert candidate(target = "abacabadabacaba",words = ['aba', 'abc', 'c', 'd', 'abacaba'],costs = [3, 5, 1, 2, 10]) == 16
    assert candidate(target = "alphabet",words = ['al', 'pha', 'bet', 'a', 'l', 'ph', 'ab', 'be', 'et'],costs = [3, 5, 2, 1, 1, 4, 6, 7, 8]) == 9
    assert candidate(target = "aaaaaaab",words = ['aaa', 'aa', 'a', 'b'],costs = [7, 3, 1, 5]) == 12
    assert candidate(target = "dynamicprogramming",words = ['dyn', 'amic', 'pro', 'gram', 'ming'],costs = [10, 5, 8, 3, 6]) == 32
    assert candidate(target = "abacaba",words = ['a', 'b', 'aba', 'aca'],costs = [1, 2, 3, 4]) == 10
    assert candidate(target = "abacabadabacaba",words = ['aba', 'bac', 'caba'],costs = [7, 8, 9]) == -1
    assert candidate(target = "xyxyxyxyxyxyxyxy",words = ['xyx', 'yxy', 'xy'],costs = [10, 20, 5]) == 40
    assert candidate(target = "optimization",words = ['opt', 'im', 'iz', 'at', 'ion', 'optim', 'izati'],costs = [5, 3, 4, 2, 7, 10, 8]) == 21
    assert candidate(target = "algorithms",words = ['algo', 'rithm', 'thm', 'log', 'orit'],costs = [6, 9, 7, 5, 10]) == -1
    assert candidate(target = "abcdabcdabcd",words = ['abc', 'dabc', 'abcd'],costs = [5, 15, 10]) == 30
    assert candidate(target = "hello",words = ['he', 'el', 'll', 'lo', 'o'],costs = [10, 20, 30, 40, 50]) == 90
    assert candidate(target = "mississippi",words = ['mis', 'issi', 'ppi', 'si', 'ss', 'pi'],costs = [7, 8, 5, 2, 6, 4]) == -1
    assert candidate(target = "abracadabra",words = ['ab', 'ra', 'ca', 'da', 'abra'],costs = [1, 2, 3, 4, 5]) == -1
    assert candidate(target = "exampleexampleexample",words = ['ex', 'ample', 'exa', 'ple', 'eample'],costs = [5, 8, 4, 6, 7]) == 39
    assert candidate(target = "banana",words = ['ba', 'na', 'ana', 'ban', 'ana'],costs = [1, 2, 3, 4, 5]) == 5
    assert candidate(target = "subsequence",words = ['sub', 'seq', 'uen', 'ce'],costs = [5, 3, 7, 2]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minimumCost)

2025-05-22 05:24:11,866 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.843607664108276,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:24:11,867 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:24:11,867 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:24:11,867 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:24:11,867 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427979280 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:24:11,868 [DEBUG] filelock (_api.py:334): Lock 140657427979280 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:24:11,868 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:24:12,053 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427979280 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:24:12,053 [DEBUG] filelock (_api.py:367): Lock 140657427979280 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:24:12,053 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:24:12,053 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:24:12,055 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/construct-string-with-minimum-cost-easy.json
2025-05-22 05:24:12,055 [INFO] root (run_leetcode_solver.py:373): Processed problem construct-string-with-minimum-cost-easy in 68.92 seconds
2025-05-22 05:24:12,055 [INFO] root (run_leetcode_solver.py:348): Processing problem ID find-the-power-of-k-size-subarrays-i with model deepseek-r1-distill
2025-05-22 05:24:12,173 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem find-the-power-of-k-size-subarrays-i
2025-05-22 05:24:12,173 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:24:12,355 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:12,356 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:12,356 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:12,356 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:26,089 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:26,090 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:26,090 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:26,090 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:26,090 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (594 chars)
2025-05-22 05:24:26,271 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:26,272 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:26,272 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:26,272 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:39,138 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:39,138 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:39,138 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:39,139 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:39,139 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (513 chars)
2025-05-22 05:24:39,322 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:39,322 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:39,322 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:39,322 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:51,926 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:51,926 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:51,926 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:24:51,926 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:24:51,926 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (513 chars)
2025-05-22 05:24:51,927 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            # Check if the subarray is consecutive and sorted in ascending order
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(max(sub))
            else:
                result.append(-1)
        return result
2025-05-22 05:24:51,927 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 2, 3, 4, 5],k = 5) == [5]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11],k = 5) == [-1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 4) == [-1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50],k = 1) == [10, 20, 30, 40, 50]
    assert candidate(nums = [1, 3, 2, 4, 5, 6],k = 4) == [-1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10],k = 5) == [9, 10]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 3) == [-1, -1, -1, -1]
    assert candidate(nums = [5, 4, 3, 2, 1],k = 3) == [-1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48],k = 20) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112],k = 9) == [108, 109, 110, 111, 112]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 25) == [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 2, 3, 4, 5],k = 5) == [-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5]
    assert candidate(nums = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, -1, -1, 9, 10]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15],k = 3) == [3, -1, -1, 7, 8, -1, -1, 12, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11],k = 5) == [-1, -1, -1, 9, 10, 11]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 30) == [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10],k = 6) == [10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 5) == [11, 12, 13, 14, 15, 16]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 8) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 10) == [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 46, 48, 47, 49, 50],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5],k = 6) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 3) == [-1, -1, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 4) == [-1, -1, -1, 8, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 5) == [5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [3, -1, -1, 4, 5, -1, -1, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, -1, -1, 9, 10, 11, 12, 13]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [-1, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12],k = 5) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 50) == [50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 10) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 9, 10, -1, -1, -1, -1, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 8, 9, 10, 11, 12, 13, 14],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, -1, -1, -1, -1, 12, 13, 14]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 1, 2, 3, 4],k = 5) == [9, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9],k = 5) == [-1, -1, 6, 7, 8, 9]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 1, 3, 5, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 47, 49, 48],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],k = 4) == [-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, 4]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 21, 20, 19],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 6, 7, 8, 9, 10, -1, -1, -1, -1, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 7) == [13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 4) == [4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [8, 9, -1, -1, -1, -1, -1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [6, 7, 8, 9, 10, 11, 12]

2025-05-22 05:24:51,927 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().resultsArray
2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 2, 3, 4, 5],k = 5) == [5]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11],k = 5) == [-1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 4) == [-1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50],k = 1) == [10, 20, 30, 40, 50]
    assert candidate(nums = [1, 3, 2, 4, 5, 6],k = 4) == [-1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10],k = 5) == [9, 10]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 3) == [-1, -1, -1, -1]
    assert candidate(nums = [5, 4, 3, 2, 1],k = 3) == [-1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48],k = 20) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112],k = 9) == [108, 109, 110, 111, 112]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 25) == [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 2, 3, 4, 5],k = 5) == [-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5]
    assert candidate(nums = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, -1, -1, 9, 10]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15],k = 3) == [3, -1, -1, 7, 8, -1, -1, 12, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11],k = 5) == [-1, -1, -1, 9, 10, 11]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 30) == [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10],k = 6) == [10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 5) == [11, 12, 13, 14, 15, 16]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 8) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 10) == [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 46, 48, 47, 49, 50],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5],k = 6) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 3) == [-1, -1, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 4) == [-1, -1, -1, 8, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 5) == [5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [3, -1, -1, 4, 5, -1, -1, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, -1, -1, 9, 10, 11, 12, 13]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [-1, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12],k = 5) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 50) == [50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 10) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 9, 10, -1, -1, -1, -1, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 8, 9, 10, 11, 12, 13, 14],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, -1, -1, -1, -1, 12, 13, 14]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 1, 2, 3, 4],k = 5) == [9, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9],k = 5) == [-1, -1, 6, 7, 8, 9]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 1, 3, 5, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 47, 49, 48],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],k = 4) == [-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, 4]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 21, 20, 19],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 6, 7, 8, 9, 10, -1, -1, -1, -1, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 7) == [13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 4) == [4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [8, 9, -1, -1, -1, -1, -1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [6, 7, 8, 9, 10, 11, 12]

2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().resultsArray
2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            # Check if the subarray is consecutive and sorted in ascending order
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(max(sub))
            else:
                result.append(-1)
        return result
2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            # Check if the subarray is consecutive and sorted in ascending order
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(max(sub))
            else:
                result.append(-1)
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 2, 3, 4, 5],k = 5) == [5]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11],k = 5) == [-1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 4) == [-1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50],k = 1) == [10, 20, 30, 40, 50]
    assert candidate(nums = [1, 3, 2, 4, 5, 6],k = 4) == [-1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10],k = 5) == [9, 10]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 3) == [-1, -1, -1, -1]
    assert candidate(nums = [5, 4, 3, 2, 1],k = 3) == [-1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48],k = 20) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112],k = 9) == [108, 109, 110, 111, 112]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 25) == [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 2, 3, 4, 5],k = 5) == [-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5]
    assert candidate(nums = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, -1, -1, 9, 10]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15],k = 3) == [3, -1, -1, 7, 8, -1, -1, 12, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11],k = 5) == [-1, -1, -1, 9, 10, 11]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 30) == [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10],k = 6) == [10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 5) == [11, 12, 13, 14, 15, 16]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 8) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 10) == [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 46, 48, 47, 49, 50],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5],k = 6) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 3) == [-1, -1, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 4) == [-1, -1, -1, 8, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 5) == [5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [3, -1, -1, 4, 5, -1, -1, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, -1, -1, 9, 10, 11, 12, 13]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [-1, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12],k = 5) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 50) == [50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 10) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 9, 10, -1, -1, -1, -1, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 8, 9, 10, 11, 12, 13, 14],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, -1, -1, -1, -1, 12, 13, 14]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 1, 2, 3, 4],k = 5) == [9, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9],k = 5) == [-1, -1, 6, 7, 8, 9]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 1, 3, 5, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 47, 49, 48],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],k = 4) == [-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, 4]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 21, 20, 19],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 6, 7, 8, 9, 10, -1, -1, -1, -1, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 7) == [13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 4) == [4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [8, 9, -1, -1, -1, -1, -1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [6, 7, 8, 9, 10, 11, 12]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:24:51,927 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            # Check if the subarray is consecutive and sorted in ascending order
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(max(sub))
            else:
                result.append(-1)
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 2, 3, 4, 5],k = 5) == [5]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11],k = 5) == [-1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 4) == [-1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50],k = 1) == [10, 20, 30, 40, 50]
    assert candidate(nums = [1, 3, 2, 4, 5, 6],k = 4) == [-1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10],k = 5) == [9, 10]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5],k = 3) == [-1, -1, -1, -1]
    assert candidate(nums = [5, 4, 3, 2, 1],k = 3) == [-1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 7) == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48],k = 20) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112],k = 9) == [108, 109, 110, 111, 112]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 25) == [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 2, 3, 4, 5],k = 5) == [-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5]
    assert candidate(nums = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, -1, -1, 9, 10]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15],k = 3) == [3, -1, -1, 7, 8, -1, -1, 12, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11],k = 5) == [-1, -1, -1, 9, 10, 11]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 30) == [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10],k = 6) == [10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 5) == [11, 12, 13, 14, 15, 16]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 8) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 10) == [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 31, 33, 32, 34, 36, 35, 37, 39, 38, 40, 42, 41, 43, 45, 44, 46, 48, 47, 49, 50],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5],k = 6) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 3) == [-1, -1, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12],k = 4) == [-1, -1, -1, 8, -1, -1, -1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 5) == [5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 5]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [3, -1, -1, 4, 5, -1, -1, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, -1, -1, 9, 10, 11, 12, 13]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [-1, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12],k = 5) == [-1, -1, -1, 9, 10, 11, 12]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 50) == [50]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 10) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 9, 10, -1, -1, -1, -1, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 8, 9, 10, 11, 12, 13, 14],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, -1, -1, -1, -1, 12, 13, 14]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 1, 2, 3, 4],k = 5) == [9, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9],k = 5) == [-1, -1, 6, 7, 8, 9]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [2, 1, 3, 5, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 16, 15, 17, 19, 18, 20, 22, 21, 23, 25, 24, 26, 28, 27, 29, 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 47, 49, 48],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],k = 4) == [-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, 4]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 21, 20, 19],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 6, 7, 8, 9, 10, -1, -1, -1, -1, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, -1, -1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 7) == [13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 4) == [4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [8, 9, -1, -1, -1, -1, -1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [6, 7, 8, 9, 10, 11, 12]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:25:05,781 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.853053569793701,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:25:05,781 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:25:05,781 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:25:05,781 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:25:05,782 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657428115072 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:25:05,782 [DEBUG] filelock (_api.py:334): Lock 140657428115072 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:25:05,782 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:25:05,965 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657428115072 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:25:05,965 [DEBUG] filelock (_api.py:367): Lock 140657428115072 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:25:05,965 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:25:05,965 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:25:07,603 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/find-the-power-of-k-size-subarrays-i.json
2025-05-22 05:25:07,603 [INFO] root (run_leetcode_solver.py:373): Processed problem find-the-power-of-k-size-subarrays-i in 55.44 seconds
2025-05-22 05:25:07,603 [INFO] root (run_leetcode_solver.py:348): Processing problem ID find-the-power-of-k-size-subarrays-ii with model deepseek-r1-distill
2025-05-22 05:25:07,720 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem find-the-power-of-k-size-subarrays-ii
2025-05-22 05:25:07,720 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:25:07,903 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:07,903 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:07,903 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:07,903 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:42,189 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:42,189 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:42,189 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:42,189 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:42,190 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (512 chars)
2025-05-22 05:25:42,371 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:42,371 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:42,372 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:42,372 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:59,224 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:59,225 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:59,225 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:59,225 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:59,225 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (746 chars)
2025-05-22 05:25:59,406 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:25:59,406 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:59,407 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:25:59,407 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:11,883 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:11,883 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:11,883 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:11,883 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:11,884 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (513 chars)
2025-05-22 05:26:11,884 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(sub[-1])
            else:
                result.append(-1)
        return result
2025-05-22 05:26:11,884 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [100, 101, 102, 103, 104, 105],k = 2) == [101, 102, 103, 104, 105]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10]
    assert candidate(nums = [10, 9, 8, 7, 6],k = 2) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13],k = 5) == [9, 10, 11, 12, 13]
    assert candidate(nums = [1],k = 1) == [1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17],k = 4) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 10) == [14]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 2) == [-1, 2, -1, 3, -1, 4, -1, 5, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 9) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111],k = 6) == [105, 106, 107, 108, 109, 110, 111]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 10) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [16, 17, 18, 19, 20]
    assert candidate(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 25) == [25]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 2) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 5) == [-1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 8) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7],k = 5) == [-1, -1, -1, -1, 5, 6, 7]
    assert candidate(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 10) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],k = 8) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 3) == [3, 4, 5, -1, -1, 3, 4, 5]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, 12, 13]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 8) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 7) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 4) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],k = 15) == [18, 19, 20, 21, 22, 23]
    assert candidate(nums = [15, 16, 14, 17, 18, 19, 20, 21, 22, 23, 24],k = 8) == [-1, -1, -1, 24]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1],k = 3) == [3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],k = 14) == [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [9, 10, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 8) == [9, 10, 11, 12, 13, 14]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],k = 18) == [20, 21, 22, 23, 24, 25, 26, 27]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 15) == [34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 25) == [25, 26, 27, 28, 29]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [-1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 15) == [114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],k = 20) == [24]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31],k = 3) == [3, -1, -1, 7, -1, -1, 11, -1, -1, 15, -1, -1, 19, -1, -1, 23, -1, -1, 27, -1, -1, 31]
    assert candidate(nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 11) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 7) == [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14],k = 4) == [-1, -1, 5, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 13, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 8, 9, -1, -1, -1, 14, 15, -1, -1, -1, 20]
    assert candidate(nums = [10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 14, 15, 16]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]

2025-05-22 05:26:11,884 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().resultsArray
2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [100, 101, 102, 103, 104, 105],k = 2) == [101, 102, 103, 104, 105]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10]
    assert candidate(nums = [10, 9, 8, 7, 6],k = 2) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13],k = 5) == [9, 10, 11, 12, 13]
    assert candidate(nums = [1],k = 1) == [1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17],k = 4) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 10) == [14]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 2) == [-1, 2, -1, 3, -1, 4, -1, 5, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 9) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111],k = 6) == [105, 106, 107, 108, 109, 110, 111]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 10) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [16, 17, 18, 19, 20]
    assert candidate(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 25) == [25]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 2) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 5) == [-1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 8) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7],k = 5) == [-1, -1, -1, -1, 5, 6, 7]
    assert candidate(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 10) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],k = 8) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 3) == [3, 4, 5, -1, -1, 3, 4, 5]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, 12, 13]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 8) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 7) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 4) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],k = 15) == [18, 19, 20, 21, 22, 23]
    assert candidate(nums = [15, 16, 14, 17, 18, 19, 20, 21, 22, 23, 24],k = 8) == [-1, -1, -1, 24]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1],k = 3) == [3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],k = 14) == [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [9, 10, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 8) == [9, 10, 11, 12, 13, 14]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],k = 18) == [20, 21, 22, 23, 24, 25, 26, 27]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 15) == [34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 25) == [25, 26, 27, 28, 29]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [-1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 15) == [114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],k = 20) == [24]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31],k = 3) == [3, -1, -1, 7, -1, -1, 11, -1, -1, 15, -1, -1, 19, -1, -1, 23, -1, -1, 27, -1, -1, 31]
    assert candidate(nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 11) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 7) == [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14],k = 4) == [-1, -1, 5, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 13, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 8, 9, -1, -1, -1, 14, 15, -1, -1, -1, 20]
    assert candidate(nums = [10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 14, 15, 16]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]

2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().resultsArray
2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(sub[-1])
            else:
                result.append(-1)
        return result
2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(sub[-1])
            else:
                result.append(-1)
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [100, 101, 102, 103, 104, 105],k = 2) == [101, 102, 103, 104, 105]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10]
    assert candidate(nums = [10, 9, 8, 7, 6],k = 2) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13],k = 5) == [9, 10, 11, 12, 13]
    assert candidate(nums = [1],k = 1) == [1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17],k = 4) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 10) == [14]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 2) == [-1, 2, -1, 3, -1, 4, -1, 5, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 9) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111],k = 6) == [105, 106, 107, 108, 109, 110, 111]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 10) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [16, 17, 18, 19, 20]
    assert candidate(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 25) == [25]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 2) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 5) == [-1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 8) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7],k = 5) == [-1, -1, -1, -1, 5, 6, 7]
    assert candidate(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 10) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],k = 8) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 3) == [3, 4, 5, -1, -1, 3, 4, 5]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, 12, 13]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 8) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 7) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 4) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],k = 15) == [18, 19, 20, 21, 22, 23]
    assert candidate(nums = [15, 16, 14, 17, 18, 19, 20, 21, 22, 23, 24],k = 8) == [-1, -1, -1, 24]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1],k = 3) == [3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],k = 14) == [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [9, 10, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 8) == [9, 10, 11, 12, 13, 14]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],k = 18) == [20, 21, 22, 23, 24, 25, 26, 27]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 15) == [34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 25) == [25, 26, 27, 28, 29]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [-1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 15) == [114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],k = 20) == [24]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31],k = 3) == [3, -1, -1, 7, -1, -1, 11, -1, -1, 15, -1, -1, 19, -1, -1, 23, -1, -1, 27, -1, -1, 31]
    assert candidate(nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 11) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 7) == [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14],k = 4) == [-1, -1, 5, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 13, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 8, 9, -1, -1, -1, 14, 15, -1, -1, -1, 20]
    assert candidate(nums = [10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 14, 15, 16]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:26:11,884 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def resultsArray(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        result = []
        for i in range(n - k + 1):
            sub = nums[i:i+k]
            is_consecutive = True
            for j in range(1, k):
                if sub[j] != sub[j-1] + 1:
                    is_consecutive = False
                    break
            if is_consecutive:
                result.append(sub[-1])
            else:
                result.append(-1)
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [100, 101, 102, 103, 104, 105],k = 2) == [101, 102, 103, 104, 105]
    assert candidate(nums = [2, 2, 2, 2, 2],k = 4) == [-1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 10) == [10]
    assert candidate(nums = [10, 9, 8, 7, 6],k = 2) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 5],k = 3) == [3, 4, -1, -1, -1]
    assert candidate(nums = [3, 2, 3, 2, 3, 2],k = 2) == [-1, 3, -1, 3, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10],k = 4) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13],k = 5) == [9, 10, 11, 12, 13]
    assert candidate(nums = [1],k = 1) == [1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17],k = 4) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 10) == [14]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9],k = 5) == [-1]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1],k = 2) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90],k = 3) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],k = 2) == [-1, 2, -1, 3, -1, 4, -1, 5, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 7) == [7, 8, 9, 10, 11, 12]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [5, 6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 9) == [9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1],k = 5) == [6, 7, 8, 9, 10, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111],k = 6) == [105, 106, 107, 108, 109, 110, 111]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],k = 10) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [16, 17, 18, 19, 20]
    assert candidate(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90],k = 5) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 25) == [25]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 8, 9, 10]
    assert candidate(nums = [39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1],k = 9) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 2) == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 5) == [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],k = 5) == [-1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 6) == [-1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 8) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75],k = 6) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110],k = 6) == [105, 106, 107, 108, 109, 110]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7],k = 5) == [-1, -1, -1, -1, 5, 6, 7]
    assert candidate(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 10) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],k = 8) == [-1, -1, -1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],k = 3) == [3, 4, 5, -1, -1, 3, 4, 5]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 6) == [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13],k = 7) == [-1, -1, -1, 12, 13]
    assert candidate(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [-1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 8) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 7) == [-1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 10) == [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 9) == [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 4) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [-1, -1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],k = 15) == [18, 19, 20, 21, 22, 23]
    assert candidate(nums = [15, 16, 14, 17, 18, 19, 20, 21, 22, 23, 24],k = 8) == [-1, -1, -1, 24]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 5) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1],k = 3) == [3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1, -1, 3, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],k = 20) == [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 7) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],k = 14) == [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 8) == [9, 10, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26],k = 15) == [21, 22, 23, 24, 25, 26]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [15, 16, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],k = 5) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    assert candidate(nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 3) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],k = 8) == [9, 10, 11, 12, 13, 14]
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 20) == [23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],k = 18) == [20, 21, 22, 23, 24, 25, 26, 27]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],k = 4) == [-1, -1, -1, 7, 8, 9, 10, 11, 12, 13]
    assert candidate(nums = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],k = 15) == [34, 35, 36, 37, 38, 39, 40]
    assert candidate(nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 15) == [21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1],k = 4) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],k = 5) == [-1, -1, -1, 5, 6, 7, 8, 9, 10]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],k = 25) == [25, 26, 27, 28, 29]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 15) == [-1, -1, -1, -1, -1, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 12) == [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],k = 15) == [114, 115, 116, 117, 118, 119, 120]
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],k = 20) == [24]
    assert candidate(nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31],k = 3) == [3, -1, -1, 7, -1, -1, 11, -1, -1, 15, -1, -1, 19, -1, -1, 23, -1, -1, 27, -1, -1, 31]
    assert candidate(nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 5) == [-1, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],k = 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 20) == [20]
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 7) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 11) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 7) == [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],k = 4) == [-1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14],k = 4) == [-1, -1, 5, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, 13, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 15) == [-1, -1, -1, -1, -1, -1]
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [15, 16, 17, 18, 19, 20]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12]
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20],k = 4) == [-1, -1, -1, 8, 9, -1, -1, -1, 14, 15, -1, -1, -1, 20]
    assert candidate(nums = [10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],k = 5) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],k = 3) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],k = 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],k = 6) == [-1, -1, -1, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],k = 12) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 14, 15, 16]
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:26:25,495 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.610466718673706,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:26:25,496 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:26:25,496 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:26:25,496 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:26:25,496 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427980096 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:26:25,497 [DEBUG] filelock (_api.py:334): Lock 140657427980096 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:26:25,497 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:26:25,683 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427980096 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:26:25,683 [DEBUG] filelock (_api.py:367): Lock 140657427980096 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:26:25,683 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:26:25,683 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:26:27,576 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/find-the-power-of-k-size-subarrays-ii.json
2025-05-22 05:26:27,576 [INFO] root (run_leetcode_solver.py:373): Processed problem find-the-power-of-k-size-subarrays-ii in 79.86 seconds
2025-05-22 05:26:27,576 [INFO] root (run_leetcode_solver.py:348): Processing problem ID maximum-energy-boost-from-two-drinks with model deepseek-r1-distill
2025-05-22 05:26:27,702 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem maximum-energy-boost-from-two-drinks
2025-05-22 05:26:27,702 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:26:27,885 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:27,885 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:27,886 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:27,886 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:50,456 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:50,456 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:50,456 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:50,457 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:50,457 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1033 chars)
2025-05-22 05:26:50,639 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:26:50,639 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:50,639 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:26:50,640 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:27:31,567 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:27:31,568 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:27:31,568 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:27:31,568 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:27:31,568 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (937 chars)
2025-05-22 05:27:31,751 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:27:31,752 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:27:31,752 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:27:31,752 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:14,700 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:14,700 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:14,700 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:14,700 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:14,701 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (535 chars)
2025-05-22 05:28:14,701 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        if n == 0:
            return 0
        
        # dp[i][0] represents the max energy up to hour i if we drink A at i
        # dp[i][1] represents the max energy up to hour i if we drink B at i
        dp = [[0] * 2 for _ in range(n)]
        
        dp[0][0] = energyDrinkA[0]
        dp[0][1] = energyDrinkB[0]
        
        for i in range(1, n):
            # If we choose A at i, we can either continue from A at i-1 or switch from B at i-2
            optionA = dp[i-1][0] + energyDrinkA[i]
            if i >= 2:
                optionA = max(optionA, dp[i-2][1] + energyDrinkA[i])
            dp[i][0] = optionA
            
            # Similarly for B
            optionB = dp[i-1][1] + energyDrinkB[i]
            if i >= 2:
                optionB = max(optionB, dp[i-2][0] + energyDrinkB[i])
            dp[i][1] = optionB
        
        return max(dp[n-1][0], dp[n-1][1])
2025-05-22 05:28:14,701 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1]) == 6
    assert candidate(energyDrinkA = [1, 100000, 1],energyDrinkB = [100000, 1, 100000]) == 200001
    assert candidate(energyDrinkA = [4, 1, 1],energyDrinkB = [1, 1, 3]) == 7
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [1, 1, 1, 1]) == 20
    assert candidate(energyDrinkA = [5, 5, 5],energyDrinkB = [5, 5, 5]) == 15
    assert candidate(energyDrinkA = [10, 20, 30],energyDrinkB = [30, 20, 10]) == 60
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000]) == 300000
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5]) == 20
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [1, 1, 1]) == 300000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [5, 6, 7],energyDrinkB = [3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 3, 1],energyDrinkB = [3, 1, 1]) == 5
    assert candidate(energyDrinkA = [3, 2, 5, 10, 7],energyDrinkB = [8, 4, 1, 9, 6]) == 30
    assert candidate(energyDrinkA = [50000, 20000, 30000, 40000, 10000],energyDrinkB = [10000, 40000, 20000, 30000, 50000]) == 150000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [10, 10, 10, 10, 10]) == 50
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9],energyDrinkB = [2, 4, 6, 8, 10]) == 30
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 200
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000]) == 500000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [1, 2, 3, 4, 5]) == 25
    assert candidate(energyDrinkA = [3, 5, 1, 7, 2, 8, 4, 6, 9, 0],energyDrinkB = [0, 9, 6, 4, 8, 2, 7, 1, 5, 3]) == 46
    assert candidate(energyDrinkA = [99999, 1, 99999, 1, 99999],energyDrinkB = [2, 99999, 2, 99999, 2]) == 299999
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 700
    assert candidate(energyDrinkA = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [1, 9, 2, 8, 3, 7, 4, 6, 5, 1]) == 64
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],energyDrinkB = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 168
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500],energyDrinkB = [50, 100, 150, 200, 250]) == 1500
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],energyDrinkB = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1],energyDrinkB = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 60
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],energyDrinkB = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]) == 83
    assert candidate(energyDrinkA = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 5, 6],energyDrinkB = [6, 5, 4, 3, 2, 1]) == 26
    assert candidate(energyDrinkA = [10, 1, 1, 1, 10],energyDrinkB = [1, 10, 10, 10, 1]) == 32
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1],energyDrinkB = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 505
    assert candidate(energyDrinkA = [100000, 100000, 100000, 100000, 100000],energyDrinkB = [50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200017
    assert candidate(energyDrinkA = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 180
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],energyDrinkB = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == 7400
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1]) == 12
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1],energyDrinkB = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000]) == 500005
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [4, 7, 1, 9, 5]) == 26
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100],energyDrinkB = [1, 100, 1, 100, 1, 100, 1]) == 403
    assert candidate(energyDrinkA = [1, 1, 1, 2, 2, 2, 3, 3, 3],energyDrinkB = [3, 3, 3, 2, 2, 2, 1, 1, 1]) == 22
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 116
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 299
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200007
    assert candidate(energyDrinkA = [1, 10, 1, 10, 1, 10],energyDrinkB = [10, 1, 10, 1, 10, 1]) == 33
    assert candidate(energyDrinkA = [1, 1, 2, 2, 3, 3],energyDrinkB = [3, 3, 2, 2, 1, 1]) == 14
    assert candidate(energyDrinkA = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500],energyDrinkB = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50]) == 3700
    assert candidate(energyDrinkA = [50000, 10000, 90000, 60000, 20000],energyDrinkB = [20000, 80000, 30000, 40000, 90000]) == 260000
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 100
    assert candidate(energyDrinkA = [25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009],energyDrinkB = [50009, 50008, 50007, 50006, 50005, 50004, 50003, 50002, 50001, 50000]) == 500045
    assert candidate(energyDrinkA = [10, 20, 30, 20, 10],energyDrinkB = [1, 2, 3, 2, 1]) == 90
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],energyDrinkB = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 65
    assert candidate(energyDrinkA = [1, 2, 3, 1, 2, 3, 1, 2, 3],energyDrinkB = [3, 2, 1, 3, 2, 1, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000],energyDrinkB = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]) == 500005
    assert candidate(energyDrinkA = [5, 2, 7, 8, 10],energyDrinkB = [3, 6, 1, 9, 4]) == 32
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [2, 4, 3, 5, 4, 6, 5, 7, 6, 8]) == 50
    assert candidate(energyDrinkA = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 74
    assert candidate(energyDrinkA = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 999955
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600],energyDrinkB = [600, 500, 400, 300, 200, 100]) == 2600
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1500000
    assert candidate(energyDrinkA = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],energyDrinkB = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 15
    assert candidate(energyDrinkA = [100, 50, 100, 50, 100, 50, 100, 50],energyDrinkB = [50, 100, 50, 100, 50, 100, 50, 100]) == 600
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [3, 3, 3, 3, 3]) == 25
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2],energyDrinkB = [3, 1, 4, 1, 5]) == 14
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [7, 5, 6, 4, 5, 3, 4, 2, 3, 1]) == 49
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 740
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5]) == 25
    assert candidate(energyDrinkA = [1, 1, 1, 100, 100],energyDrinkB = [100, 100, 1, 1, 1]) == 400
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100000],energyDrinkB = [100000, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 200054
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000],energyDrinkB = [1, 100000, 1, 100000, 1]) == 300002
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 100000, 100000, 100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 1, 1, 1, 1, 1]) == 900000
    assert candidate(energyDrinkA = [90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000],energyDrinkB = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]) == 900000
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1000000
    assert candidate(energyDrinkA = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],energyDrinkB = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 36
    assert candidate(energyDrinkA = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550000
    assert candidate(energyDrinkA = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]) == 200007
    assert candidate(energyDrinkA = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5],energyDrinkB = [5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2]) == 60
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [2, 6, 3, 8, 5]) == 24
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 100, 100, 100, 100, 100],energyDrinkB = [99, 99, 99, 99, 99, 99]) == 600
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(energyDrinkA = [5, 15, 25, 35, 45, 55],energyDrinkB = [55, 45, 35, 25, 15, 5]) == 235
    assert candidate(energyDrinkA = [1, 10, 100, 1000, 10000],energyDrinkB = [10000, 1000, 100, 10, 1]) == 22000
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [100, 1, 1, 1, 1, 1, 1, 1, 1, 100],energyDrinkB = [1, 100, 1, 1, 1, 1, 1, 100, 1, 1]) == 306
    assert candidate(energyDrinkA = [50000, 90000, 30000, 70000, 60000, 20000, 80000, 40000, 10000, 100000],energyDrinkB = [100000, 10000, 80000, 20000, 40000, 60000, 10000, 70000, 50000, 30000]) == 550000

2025-05-22 05:28:14,701 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maxEnergyBoost
2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1]) == 6
    assert candidate(energyDrinkA = [1, 100000, 1],energyDrinkB = [100000, 1, 100000]) == 200001
    assert candidate(energyDrinkA = [4, 1, 1],energyDrinkB = [1, 1, 3]) == 7
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [1, 1, 1, 1]) == 20
    assert candidate(energyDrinkA = [5, 5, 5],energyDrinkB = [5, 5, 5]) == 15
    assert candidate(energyDrinkA = [10, 20, 30],energyDrinkB = [30, 20, 10]) == 60
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000]) == 300000
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5]) == 20
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [1, 1, 1]) == 300000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [5, 6, 7],energyDrinkB = [3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 3, 1],energyDrinkB = [3, 1, 1]) == 5
    assert candidate(energyDrinkA = [3, 2, 5, 10, 7],energyDrinkB = [8, 4, 1, 9, 6]) == 30
    assert candidate(energyDrinkA = [50000, 20000, 30000, 40000, 10000],energyDrinkB = [10000, 40000, 20000, 30000, 50000]) == 150000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [10, 10, 10, 10, 10]) == 50
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9],energyDrinkB = [2, 4, 6, 8, 10]) == 30
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 200
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000]) == 500000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [1, 2, 3, 4, 5]) == 25
    assert candidate(energyDrinkA = [3, 5, 1, 7, 2, 8, 4, 6, 9, 0],energyDrinkB = [0, 9, 6, 4, 8, 2, 7, 1, 5, 3]) == 46
    assert candidate(energyDrinkA = [99999, 1, 99999, 1, 99999],energyDrinkB = [2, 99999, 2, 99999, 2]) == 299999
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 700
    assert candidate(energyDrinkA = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [1, 9, 2, 8, 3, 7, 4, 6, 5, 1]) == 64
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],energyDrinkB = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 168
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500],energyDrinkB = [50, 100, 150, 200, 250]) == 1500
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],energyDrinkB = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1],energyDrinkB = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 60
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],energyDrinkB = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]) == 83
    assert candidate(energyDrinkA = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 5, 6],energyDrinkB = [6, 5, 4, 3, 2, 1]) == 26
    assert candidate(energyDrinkA = [10, 1, 1, 1, 10],energyDrinkB = [1, 10, 10, 10, 1]) == 32
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1],energyDrinkB = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 505
    assert candidate(energyDrinkA = [100000, 100000, 100000, 100000, 100000],energyDrinkB = [50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200017
    assert candidate(energyDrinkA = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 180
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],energyDrinkB = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == 7400
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1]) == 12
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1],energyDrinkB = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000]) == 500005
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [4, 7, 1, 9, 5]) == 26
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100],energyDrinkB = [1, 100, 1, 100, 1, 100, 1]) == 403
    assert candidate(energyDrinkA = [1, 1, 1, 2, 2, 2, 3, 3, 3],energyDrinkB = [3, 3, 3, 2, 2, 2, 1, 1, 1]) == 22
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 116
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 299
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200007
    assert candidate(energyDrinkA = [1, 10, 1, 10, 1, 10],energyDrinkB = [10, 1, 10, 1, 10, 1]) == 33
    assert candidate(energyDrinkA = [1, 1, 2, 2, 3, 3],energyDrinkB = [3, 3, 2, 2, 1, 1]) == 14
    assert candidate(energyDrinkA = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500],energyDrinkB = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50]) == 3700
    assert candidate(energyDrinkA = [50000, 10000, 90000, 60000, 20000],energyDrinkB = [20000, 80000, 30000, 40000, 90000]) == 260000
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 100
    assert candidate(energyDrinkA = [25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009],energyDrinkB = [50009, 50008, 50007, 50006, 50005, 50004, 50003, 50002, 50001, 50000]) == 500045
    assert candidate(energyDrinkA = [10, 20, 30, 20, 10],energyDrinkB = [1, 2, 3, 2, 1]) == 90
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],energyDrinkB = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 65
    assert candidate(energyDrinkA = [1, 2, 3, 1, 2, 3, 1, 2, 3],energyDrinkB = [3, 2, 1, 3, 2, 1, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000],energyDrinkB = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]) == 500005
    assert candidate(energyDrinkA = [5, 2, 7, 8, 10],energyDrinkB = [3, 6, 1, 9, 4]) == 32
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [2, 4, 3, 5, 4, 6, 5, 7, 6, 8]) == 50
    assert candidate(energyDrinkA = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 74
    assert candidate(energyDrinkA = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 999955
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600],energyDrinkB = [600, 500, 400, 300, 200, 100]) == 2600
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1500000
    assert candidate(energyDrinkA = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],energyDrinkB = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 15
    assert candidate(energyDrinkA = [100, 50, 100, 50, 100, 50, 100, 50],energyDrinkB = [50, 100, 50, 100, 50, 100, 50, 100]) == 600
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [3, 3, 3, 3, 3]) == 25
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2],energyDrinkB = [3, 1, 4, 1, 5]) == 14
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [7, 5, 6, 4, 5, 3, 4, 2, 3, 1]) == 49
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 740
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5]) == 25
    assert candidate(energyDrinkA = [1, 1, 1, 100, 100],energyDrinkB = [100, 100, 1, 1, 1]) == 400
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100000],energyDrinkB = [100000, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 200054
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000],energyDrinkB = [1, 100000, 1, 100000, 1]) == 300002
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 100000, 100000, 100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 1, 1, 1, 1, 1]) == 900000
    assert candidate(energyDrinkA = [90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000],energyDrinkB = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]) == 900000
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1000000
    assert candidate(energyDrinkA = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],energyDrinkB = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 36
    assert candidate(energyDrinkA = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550000
    assert candidate(energyDrinkA = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]) == 200007
    assert candidate(energyDrinkA = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5],energyDrinkB = [5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2]) == 60
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [2, 6, 3, 8, 5]) == 24
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 100, 100, 100, 100, 100],energyDrinkB = [99, 99, 99, 99, 99, 99]) == 600
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(energyDrinkA = [5, 15, 25, 35, 45, 55],energyDrinkB = [55, 45, 35, 25, 15, 5]) == 235
    assert candidate(energyDrinkA = [1, 10, 100, 1000, 10000],energyDrinkB = [10000, 1000, 100, 10, 1]) == 22000
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [100, 1, 1, 1, 1, 1, 1, 1, 1, 100],energyDrinkB = [1, 100, 1, 1, 1, 1, 1, 100, 1, 1]) == 306
    assert candidate(energyDrinkA = [50000, 90000, 30000, 70000, 60000, 20000, 80000, 40000, 10000, 100000],energyDrinkB = [100000, 10000, 80000, 20000, 40000, 60000, 10000, 70000, 50000, 30000]) == 550000

2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maxEnergyBoost
2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        if n == 0:
            return 0

        # dp[i][0] represents the max energy up to hour i if we drink A at i
        # dp[i][1] represents the max energy up to hour i if we drink B at i
        dp = [[0] * 2 for _ in range(n)]

        dp[0][0] = energyDrinkA[0]
        dp[0][1] = energyDrinkB[0]

        for i in range(1, n):
            # If we choose A at i, we can either continue from A at i-1 or switch from B at i-2
            optionA = dp[i-1][0] + energyDrinkA[i]
            if i >= 2:
                optionA = max(optionA, dp[i-2][1] + energyDrinkA[i])
            dp[i][0] = optionA

            # Similarly for B
            optionB = dp[i-1][1] + energyDrinkB[i]
            if i >= 2:
                optionB = max(optionB, dp[i-2][0] + energyDrinkB[i])
            dp[i][1] = optionB

        return max(dp[n-1][0], dp[n-1][1])
2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        if n == 0:
            return 0

        # dp[i][0] represents the max energy up to hour i if we drink A at i
        # dp[i][1] represents the max energy up to hour i if we drink B at i
        dp = [[0] * 2 for _ in range(n)]

        dp[0][0] = energyDrinkA[0]
        dp[0][1] = energyDrinkB[0]

        for i in range(1, n):
            # If we choose A at i, we can either continue from A at i-1 or switch from B at i-2
            optionA = dp[i-1][0] + energyDrinkA[i]
            if i >= 2:
                optionA = max(optionA, dp[i-2][1] + energyDrinkA[i])
            dp[i][0] = optionA

            # Similarly for B
            optionB = dp[i-1][1] + energyDrinkB[i]
            if i >= 2:
                optionB = max(optionB, dp[i-2][0] + energyDrinkB[i])
            dp[i][1] = optionB

        return max(dp[n-1][0], dp[n-1][1])

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1]) == 6
    assert candidate(energyDrinkA = [1, 100000, 1],energyDrinkB = [100000, 1, 100000]) == 200001
    assert candidate(energyDrinkA = [4, 1, 1],energyDrinkB = [1, 1, 3]) == 7
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [1, 1, 1, 1]) == 20
    assert candidate(energyDrinkA = [5, 5, 5],energyDrinkB = [5, 5, 5]) == 15
    assert candidate(energyDrinkA = [10, 20, 30],energyDrinkB = [30, 20, 10]) == 60
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000]) == 300000
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5]) == 20
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [1, 1, 1]) == 300000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [5, 6, 7],energyDrinkB = [3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 3, 1],energyDrinkB = [3, 1, 1]) == 5
    assert candidate(energyDrinkA = [3, 2, 5, 10, 7],energyDrinkB = [8, 4, 1, 9, 6]) == 30
    assert candidate(energyDrinkA = [50000, 20000, 30000, 40000, 10000],energyDrinkB = [10000, 40000, 20000, 30000, 50000]) == 150000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [10, 10, 10, 10, 10]) == 50
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9],energyDrinkB = [2, 4, 6, 8, 10]) == 30
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 200
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000]) == 500000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [1, 2, 3, 4, 5]) == 25
    assert candidate(energyDrinkA = [3, 5, 1, 7, 2, 8, 4, 6, 9, 0],energyDrinkB = [0, 9, 6, 4, 8, 2, 7, 1, 5, 3]) == 46
    assert candidate(energyDrinkA = [99999, 1, 99999, 1, 99999],energyDrinkB = [2, 99999, 2, 99999, 2]) == 299999
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 700
    assert candidate(energyDrinkA = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [1, 9, 2, 8, 3, 7, 4, 6, 5, 1]) == 64
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],energyDrinkB = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 168
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500],energyDrinkB = [50, 100, 150, 200, 250]) == 1500
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],energyDrinkB = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1],energyDrinkB = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 60
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],energyDrinkB = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]) == 83
    assert candidate(energyDrinkA = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 5, 6],energyDrinkB = [6, 5, 4, 3, 2, 1]) == 26
    assert candidate(energyDrinkA = [10, 1, 1, 1, 10],energyDrinkB = [1, 10, 10, 10, 1]) == 32
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1],energyDrinkB = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 505
    assert candidate(energyDrinkA = [100000, 100000, 100000, 100000, 100000],energyDrinkB = [50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200017
    assert candidate(energyDrinkA = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 180
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],energyDrinkB = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == 7400
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1]) == 12
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1],energyDrinkB = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000]) == 500005
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [4, 7, 1, 9, 5]) == 26
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100],energyDrinkB = [1, 100, 1, 100, 1, 100, 1]) == 403
    assert candidate(energyDrinkA = [1, 1, 1, 2, 2, 2, 3, 3, 3],energyDrinkB = [3, 3, 3, 2, 2, 2, 1, 1, 1]) == 22
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 116
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 299
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200007
    assert candidate(energyDrinkA = [1, 10, 1, 10, 1, 10],energyDrinkB = [10, 1, 10, 1, 10, 1]) == 33
    assert candidate(energyDrinkA = [1, 1, 2, 2, 3, 3],energyDrinkB = [3, 3, 2, 2, 1, 1]) == 14
    assert candidate(energyDrinkA = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500],energyDrinkB = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50]) == 3700
    assert candidate(energyDrinkA = [50000, 10000, 90000, 60000, 20000],energyDrinkB = [20000, 80000, 30000, 40000, 90000]) == 260000
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 100
    assert candidate(energyDrinkA = [25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009],energyDrinkB = [50009, 50008, 50007, 50006, 50005, 50004, 50003, 50002, 50001, 50000]) == 500045
    assert candidate(energyDrinkA = [10, 20, 30, 20, 10],energyDrinkB = [1, 2, 3, 2, 1]) == 90
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],energyDrinkB = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 65
    assert candidate(energyDrinkA = [1, 2, 3, 1, 2, 3, 1, 2, 3],energyDrinkB = [3, 2, 1, 3, 2, 1, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000],energyDrinkB = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]) == 500005
    assert candidate(energyDrinkA = [5, 2, 7, 8, 10],energyDrinkB = [3, 6, 1, 9, 4]) == 32
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [2, 4, 3, 5, 4, 6, 5, 7, 6, 8]) == 50
    assert candidate(energyDrinkA = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 74
    assert candidate(energyDrinkA = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 999955
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600],energyDrinkB = [600, 500, 400, 300, 200, 100]) == 2600
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1500000
    assert candidate(energyDrinkA = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],energyDrinkB = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 15
    assert candidate(energyDrinkA = [100, 50, 100, 50, 100, 50, 100, 50],energyDrinkB = [50, 100, 50, 100, 50, 100, 50, 100]) == 600
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [3, 3, 3, 3, 3]) == 25
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2],energyDrinkB = [3, 1, 4, 1, 5]) == 14
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [7, 5, 6, 4, 5, 3, 4, 2, 3, 1]) == 49
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 740
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5]) == 25
    assert candidate(energyDrinkA = [1, 1, 1, 100, 100],energyDrinkB = [100, 100, 1, 1, 1]) == 400
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100000],energyDrinkB = [100000, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 200054
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000],energyDrinkB = [1, 100000, 1, 100000, 1]) == 300002
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 100000, 100000, 100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 1, 1, 1, 1, 1]) == 900000
    assert candidate(energyDrinkA = [90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000],energyDrinkB = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]) == 900000
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1000000
    assert candidate(energyDrinkA = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],energyDrinkB = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 36
    assert candidate(energyDrinkA = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550000
    assert candidate(energyDrinkA = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]) == 200007
    assert candidate(energyDrinkA = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5],energyDrinkB = [5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2]) == 60
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [2, 6, 3, 8, 5]) == 24
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 100, 100, 100, 100, 100],energyDrinkB = [99, 99, 99, 99, 99, 99]) == 600
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(energyDrinkA = [5, 15, 25, 35, 45, 55],energyDrinkB = [55, 45, 35, 25, 15, 5]) == 235
    assert candidate(energyDrinkA = [1, 10, 100, 1000, 10000],energyDrinkB = [10000, 1000, 100, 10, 1]) == 22000
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [100, 1, 1, 1, 1, 1, 1, 1, 1, 100],energyDrinkB = [1, 100, 1, 1, 1, 1, 1, 100, 1, 1]) == 306
    assert candidate(energyDrinkA = [50000, 90000, 30000, 70000, 60000, 20000, 80000, 40000, 10000, 100000],energyDrinkB = [100000, 10000, 80000, 20000, 40000, 60000, 10000, 70000, 50000, 30000]) == 550000


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxEnergyBoost)

2025-05-22 05:28:14,701 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:
        n = len(energyDrinkA)
        if n == 0:
            return 0

        # dp[i][0] represents the max energy up to hour i if we drink A at i
        # dp[i][1] represents the max energy up to hour i if we drink B at i
        dp = [[0] * 2 for _ in range(n)]

        dp[0][0] = energyDrinkA[0]
        dp[0][1] = energyDrinkB[0]

        for i in range(1, n):
            # If we choose A at i, we can either continue from A at i-1 or switch from B at i-2
            optionA = dp[i-1][0] + energyDrinkA[i]
            if i >= 2:
                optionA = max(optionA, dp[i-2][1] + energyDrinkA[i])
            dp[i][0] = optionA

            # Similarly for B
            optionB = dp[i-1][1] + energyDrinkB[i]
            if i >= 2:
                optionB = max(optionB, dp[i-2][0] + energyDrinkB[i])
            dp[i][1] = optionB

        return max(dp[n-1][0], dp[n-1][1])

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1]) == 6
    assert candidate(energyDrinkA = [1, 100000, 1],energyDrinkB = [100000, 1, 100000]) == 200001
    assert candidate(energyDrinkA = [4, 1, 1],energyDrinkB = [1, 1, 3]) == 7
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [1, 1, 1, 1]) == 20
    assert candidate(energyDrinkA = [5, 5, 5],energyDrinkB = [5, 5, 5]) == 15
    assert candidate(energyDrinkA = [10, 20, 30],energyDrinkB = [30, 20, 10]) == 60
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000]) == 300000
    assert candidate(energyDrinkA = [5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5]) == 20
    assert candidate(energyDrinkA = [100000, 100000, 100000],energyDrinkB = [1, 1, 1]) == 300000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [5, 6, 7],energyDrinkB = [3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 3, 1],energyDrinkB = [3, 1, 1]) == 5
    assert candidate(energyDrinkA = [3, 2, 5, 10, 7],energyDrinkB = [8, 4, 1, 9, 6]) == 30
    assert candidate(energyDrinkA = [50000, 20000, 30000, 40000, 10000],energyDrinkB = [10000, 40000, 20000, 30000, 50000]) == 150000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [10, 10, 10, 10, 10]) == 50
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9],energyDrinkB = [2, 4, 6, 8, 10]) == 30
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 200
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000]) == 500000
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [1, 2, 3, 4, 5]) == 25
    assert candidate(energyDrinkA = [3, 5, 1, 7, 2, 8, 4, 6, 9, 0],energyDrinkB = [0, 9, 6, 4, 8, 2, 7, 1, 5, 3]) == 46
    assert candidate(energyDrinkA = [99999, 1, 99999, 1, 99999],energyDrinkB = [2, 99999, 2, 99999, 2]) == 299999
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 700
    assert candidate(energyDrinkA = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [1, 9, 2, 8, 3, 7, 4, 6, 5, 1]) == 64
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],energyDrinkB = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 168
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500],energyDrinkB = [50, 100, 150, 200, 250]) == 1500
    assert candidate(energyDrinkA = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],energyDrinkB = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1],energyDrinkB = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 60
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],energyDrinkB = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]) == 83
    assert candidate(energyDrinkA = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 5, 6],energyDrinkB = [6, 5, 4, 3, 2, 1]) == 26
    assert candidate(energyDrinkA = [10, 1, 1, 1, 10],energyDrinkB = [1, 10, 10, 10, 1]) == 32
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1],energyDrinkB = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 505
    assert candidate(energyDrinkA = [100000, 100000, 100000, 100000, 100000],energyDrinkB = [50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200017
    assert candidate(energyDrinkA = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 180
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],energyDrinkB = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]) == 7400
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1]) == 12
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1],energyDrinkB = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000]) == 500005
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [4, 7, 1, 9, 5]) == 26
    assert candidate(energyDrinkA = [100, 1, 100, 1, 100, 1, 100],energyDrinkB = [1, 100, 1, 100, 1, 100, 1]) == 403
    assert candidate(energyDrinkA = [1, 1, 1, 2, 2, 2, 3, 3, 3],energyDrinkB = [3, 3, 3, 2, 2, 2, 1, 1, 1]) == 22
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 116
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],energyDrinkB = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 299
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000],energyDrinkB = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 200007
    assert candidate(energyDrinkA = [1, 10, 1, 10, 1, 10],energyDrinkB = [10, 1, 10, 1, 10, 1]) == 33
    assert candidate(energyDrinkA = [1, 1, 2, 2, 3, 3],energyDrinkB = [3, 3, 2, 2, 1, 1]) == 14
    assert candidate(energyDrinkA = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500],energyDrinkB = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50]) == 3700
    assert candidate(energyDrinkA = [50000, 10000, 90000, 60000, 20000],energyDrinkB = [20000, 80000, 30000, 40000, 90000]) == 260000
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 100
    assert candidate(energyDrinkA = [25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000],energyDrinkB = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]) == 500000
    assert candidate(energyDrinkA = [50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009],energyDrinkB = [50009, 50008, 50007, 50006, 50005, 50004, 50003, 50002, 50001, 50000]) == 500045
    assert candidate(energyDrinkA = [10, 20, 30, 20, 10],energyDrinkB = [1, 2, 3, 2, 1]) == 90
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],energyDrinkB = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 65
    assert candidate(energyDrinkA = [1, 2, 3, 1, 2, 3, 1, 2, 3],energyDrinkB = [3, 2, 1, 3, 2, 1, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000],energyDrinkB = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]) == 500005
    assert candidate(energyDrinkA = [5, 2, 7, 8, 10],energyDrinkB = [3, 6, 1, 9, 4]) == 32
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [2, 4, 3, 5, 4, 6, 5, 7, 6, 8]) == 50
    assert candidate(energyDrinkA = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 74
    assert candidate(energyDrinkA = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 999955
    assert candidate(energyDrinkA = [100, 200, 300, 400, 500, 600],energyDrinkB = [600, 500, 400, 300, 200, 100]) == 2600
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5],energyDrinkB = [5, 4, 3, 2, 1]) == 18
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1500000
    assert candidate(energyDrinkA = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],energyDrinkB = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 15
    assert candidate(energyDrinkA = [100, 50, 100, 50, 100, 50, 100, 50],energyDrinkB = [50, 100, 50, 100, 50, 100, 50, 100]) == 600
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [3, 3, 3, 3, 3]) == 25
    assert candidate(energyDrinkA = [2, 2, 2, 2, 2],energyDrinkB = [3, 1, 4, 1, 5]) == 14
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 20
    assert candidate(energyDrinkA = [9, 8, 7, 6, 5, 4, 3, 2, 1],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 60
    assert candidate(energyDrinkA = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7],energyDrinkB = [7, 5, 6, 4, 5, 3, 4, 2, 3, 1]) == 49
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],energyDrinkB = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 740
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5]) == 25
    assert candidate(energyDrinkA = [1, 1, 1, 100, 100],energyDrinkB = [100, 100, 1, 1, 1]) == 400
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100000],energyDrinkB = [100000, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 200054
    assert candidate(energyDrinkA = [100000, 1, 100000, 1, 100000],energyDrinkB = [1, 100000, 1, 100000, 1]) == 300002
    assert candidate(energyDrinkA = [1, 3, 1, 3, 1, 3, 1, 3, 1, 3],energyDrinkB = [3, 1, 3, 1, 3, 1, 3, 1, 3, 1]) == 20
    assert candidate(energyDrinkA = [1, 1, 1, 1, 1, 100000, 100000, 100000, 100000, 100000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 1, 1, 1, 1, 1]) == 900000
    assert candidate(energyDrinkA = [90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000],energyDrinkB = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]) == 900000
    assert candidate(energyDrinkA = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000],energyDrinkB = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1000000
    assert candidate(energyDrinkA = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5],energyDrinkB = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 36
    assert candidate(energyDrinkA = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 550000
    assert candidate(energyDrinkA = [100000, 1, 1, 1, 1, 1, 1, 1, 1, 1],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 100000]) == 200007
    assert candidate(energyDrinkA = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5],energyDrinkB = [5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2]) == 60
    assert candidate(energyDrinkA = [5, 3, 8, 6, 2],energyDrinkB = [2, 6, 3, 8, 5]) == 24
    assert candidate(energyDrinkA = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],energyDrinkB = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(energyDrinkA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],energyDrinkB = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 74
    assert candidate(energyDrinkA = [100, 100, 100, 100, 100, 100],energyDrinkB = [99, 99, 99, 99, 99, 99]) == 600
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(energyDrinkA = [5, 15, 25, 35, 45, 55],energyDrinkB = [55, 45, 35, 25, 15, 5]) == 235
    assert candidate(energyDrinkA = [1, 10, 100, 1000, 10000],energyDrinkB = [10000, 1000, 100, 10, 1]) == 22000
    assert candidate(energyDrinkA = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],energyDrinkB = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(energyDrinkA = [10, 20, 30, 40, 50],energyDrinkB = [50, 40, 30, 20, 10]) == 180
    assert candidate(energyDrinkA = [100, 1, 1, 1, 1, 1, 1, 1, 1, 100],energyDrinkB = [1, 100, 1, 1, 1, 1, 1, 100, 1, 1]) == 306
    assert candidate(energyDrinkA = [50000, 90000, 30000, 70000, 60000, 20000, 80000, 40000, 10000, 100000],energyDrinkB = [100000, 10000, 80000, 20000, 40000, 60000, 10000, 70000, 50000, 30000]) == 550000


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxEnergyBoost)

2025-05-22 05:28:28,298 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.595727920532227,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:28:28,298 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:28:28,298 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:28:28,298 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:28:28,299 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657428114160 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:28:28,299 [DEBUG] filelock (_api.py:334): Lock 140657428114160 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:28:28,299 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:28:28,475 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657428114160 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:28:28,475 [DEBUG] filelock (_api.py:367): Lock 140657428114160 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:28:28,475 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:28:28,476 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:28:28,478 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/maximum-energy-boost-from-two-drinks.json
2025-05-22 05:28:28,478 [INFO] root (run_leetcode_solver.py:373): Processed problem maximum-energy-boost-from-two-drinks in 120.78 seconds
2025-05-22 05:28:28,478 [INFO] root (run_leetcode_solver.py:348): Processing problem ID count-almost-equal-pairs-i with model deepseek-r1-distill
2025-05-22 05:28:28,597 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem count-almost-equal-pairs-i
2025-05-22 05:28:28,598 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:28:28,780 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:28,781 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:28,781 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:28,781 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:47,335 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:47,335 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:47,335 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:47,336 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:47,336 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1078 chars)
2025-05-22 05:28:47,519 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:28:47,519 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:47,519 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:28:47,519 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:07,156 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:07,157 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:07,157 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:07,157 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:07,157 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (509 chars)
2025-05-22 05:29:07,338 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:07,339 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:07,339 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:07,339 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:19,816 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:19,817 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:19,817 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:19,817 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:19,817 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (432 chars)
2025-05-22 05:29:19,817 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0
        
        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    # Swap i and j
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Also include the original number as a variation (no swap)
            variations.add(s)
            
            # Check how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)
            
            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1
        
        return result
2025-05-22 05:29:19,817 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:29:19,817 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:29:19,817 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:29:19,817 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:29:19,817 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:29:19,817 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    # Swap i and j
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Also include the original number as a variation (no swap)
            variations.add(s)

            # Check how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result
2025-05-22 05:29:19,818 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    # Swap i and j
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Also include the original number as a variation (no swap)
            variations.add(s)

            # Check how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:29:19,818 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    # Swap i and j
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Also include the original number as a variation (no swap)
            variations.add(s)

            # Check how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:29:33,920 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp07jwva57.py\", line 241, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp07jwva57.py\", line 115, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp07jwva57.py` failed. (See above for error)\n",
  "execution_time": 14.101861953735352,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp07jwva57.py\", line 241, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp07jwva57.py\", line 115, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp07jwva57.py` failed. (See above for error)"
}
2025-05-22 05:29:33,920 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 05:29:33,920 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 05:29:34,123 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:29:34,123 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:34,123 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:29:34,124 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:30:23,746 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:30:23,746 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:30:23,746 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:30:23,746 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:30:23,747 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (889 chars)
2025-05-22 05:30:23,929 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:30:23,930 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:30:23,930 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:30:23,930 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:12,819 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:12,819 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:12,819 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:12,819 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:12,820 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1038 chars)
2025-05-22 05:31:13,002 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:13,002 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:13,003 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:13,003 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:57,031 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:57,031 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:57,032 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:31:57,032 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:31:57,032 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1056 chars)
2025-05-22 05:31:57,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_variations(n: int) -> set:
            s = str(n)
            variations = {s}
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            return variations
        
        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_var = get_variations(x)
                if str(y) in x_var:
                    count += 1
                    continue
                y_var = get_variations(y)
                if str(x) in y_var:
                    count += 1
        return count
2025-05-22 05:31:57,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:31:57,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:31:57,032 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:31:57,032 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:31:57,032 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:31:57,032 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_variations(n: int) -> set:
            s = str(n)
            variations = {s}
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            return variations

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_var = get_variations(x)
                if str(y) in x_var:
                    count += 1
                    continue
                y_var = get_variations(y)
                if str(x) in y_var:
                    count += 1
        return count
2025-05-22 05:31:57,032 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_variations(n: int) -> set:
            s = str(n)
            variations = {s}
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            return variations

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_var = get_variations(x)
                if str(y) in x_var:
                    count += 1
                    continue
                y_var = get_variations(y)
                if str(x) in y_var:
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:31:57,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_variations(n: int) -> set:
            s = str(n)
            variations = {s}
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            return variations

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_var = get_variations(x)
                if str(y) in x_var:
                    count += 1
                    continue
                y_var = get_variations(y)
                if str(x) in y_var:
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:32:11,068 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpp0zq_ph1.py\", line 238, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpp0zq_ph1.py\", line 112, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpp0zq_ph1.py` failed. (See above for error)\n",
  "execution_time": 14.034820795059204,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpp0zq_ph1.py\", line 238, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpp0zq_ph1.py\", line 112, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpp0zq_ph1.py` failed. (See above for error)"
}
2025-05-22 05:32:11,068 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 05:32:11,068 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 05:32:11,271 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:32:11,271 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:11,271 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:11,272 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:32:54,956 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:32:54,956 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:54,956 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:54,957 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:32:54,957 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (738 chars)
2025-05-22 05:32:55,139 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:32:55,140 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:55,140 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:32:55,140 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:33:37,118 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:33:37,118 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:33:37,119 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:33:37,119 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:33:37,119 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (694 chars)
2025-05-22 05:33:37,300 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:33:37,301 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:33:37,301 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:33:37,301 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:34:16,424 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:34:16,424 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:34:16,424 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:34:16,425 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:34:16,425 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (426 chars)
2025-05-22 05:34:16,425 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from itertools import permutations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms
        
        perm_map = {}
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                if p in perm_map:
                    perm_map[p] += 1
                else:
                    perm_map[p] = 1
        
        count = 0
        for key in perm_map:
            freq = perm_map[key]
            count += freq * (freq - 1) // 2
        
        return count
2025-05-22 05:34:16,425 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:16,425 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from itertools import permutations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        perm_map = {}
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                if p in perm_map:
                    perm_map[p] += 1
                else:
                    perm_map[p] = 1

        count = 0
        for key in perm_map:
            freq = perm_map[key]
            count += freq * (freq - 1) // 2

        return count
2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from itertools import permutations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        perm_map = {}
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                if p in perm_map:
                    perm_map[p] += 1
                else:
                    perm_map[p] = 1

        count = 0
        for key in perm_map:
            freq = perm_map[key]
            count += freq * (freq - 1) // 2

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:16,425 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from itertools import permutations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        perm_map = {}
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                if p in perm_map:
                    perm_map[p] += 1
                else:
                    perm_map[p] = 1

        count = 0
        for key in perm_map:
            freq = perm_map[key]
            count += freq * (freq - 1) // 2

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:30,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp9t4cnge4.py\", line 238, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp9t4cnge4.py\", line 112, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp9t4cnge4.py` failed. (See above for error)\n",
  "execution_time": 13.606080770492554,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp9t4cnge4.py\", line 238, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp9t4cnge4.py\", line 112, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp9t4cnge4.py` failed. (See above for error)"
}
2025-05-22 05:34:30,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
import itertools

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in itertools.permutations(s):
                perm_str = ''.join(p)
                perms.add(perm_str)
            return perms
        
        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_perms = get_permutations(x)
                y_perms = get_permutations(y)
                if x_perms & y_perms:
                    count += 1
        return count
2025-05-22 05:34:30,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:30,032 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
import itertools

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in itertools.permutations(s):
                perm_str = ''.join(p)
                perms.add(perm_str)
            return perms

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_perms = get_permutations(x)
                y_perms = get_permutations(y)
                if x_perms & y_perms:
                    count += 1
        return count
2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
import itertools

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in itertools.permutations(s):
                perm_str = ''.join(p)
                perms.add(perm_str)
            return perms

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_perms = get_permutations(x)
                y_perms = get_permutations(y)
                if x_perms & y_perms:
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:30,033 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
import itertools

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_permutations(n: int) -> set:
            s = str(n)
            perms = set()
            for p in itertools.permutations(s):
                perm_str = ''.join(p)
                perms.add(perm_str)
            return perms

        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                x = nums[i]
                y = nums[j]
                x_perms = get_permutations(x)
                y_perms = get_permutations(y)
                if x_perms & y_perms:
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:43,629 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpk46ldmfe.py\", line 234, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpk46ldmfe.py\", line 108, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpk46ldmfe.py` failed. (See above for error)\n",
  "execution_time": 13.595032453536987,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpk46ldmfe.py\", line 234, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpk46ldmfe.py\", line 108, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpk46ldmfe.py` failed. (See above for error)"
}
2025-05-22 05:34:43,629 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_key(n: int) -> str:
            s = str(n)
            return ''.join(sorted(s))
        
        count = 0
        freq = {}
        for num in nums:
            key = get_key(num)
            if key in freq:
                count += freq[key]
            freq[key] = freq.get(key, 0) + 1
        
        return count
2025-05-22 05:34:43,629 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:43,629 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_key(n: int) -> str:
            s = str(n)
            return ''.join(sorted(s))

        count = 0
        freq = {}
        for num in nums:
            key = get_key(num)
            if key in freq:
                count += freq[key]
            freq[key] = freq.get(key, 0) + 1

        return count
2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_key(n: int) -> str:
            s = str(n)
            return ''.join(sorted(s))

        count = 0
        freq = {}
        for num in nums:
            key = get_key(num)
            if key in freq:
                count += freq[key]
            freq[key] = freq.get(key, 0) + 1

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:43,629 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def get_key(n: int) -> str:
            s = str(n)
            return ''.join(sorted(s))

        count = 0
        freq = {}
        for num in nums:
            key = get_key(num)
            if key in freq:
                count += freq[key]
            freq[key] = freq.get(key, 0) + 1

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:34:57,220 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpsgyqrc25.py\", line 228, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpsgyqrc25.py\", line 102, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpsgyqrc25.py` failed. (See above for error)\n",
  "execution_time": 13.590056896209717,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpsgyqrc25.py\", line 228, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpsgyqrc25.py\", line 102, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpsgyqrc25.py` failed. (See above for error)"
}
2025-05-22 05:34:57,220 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 1be049df
2025-05-22 05:34:57,220 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_5 at depth 2
2025-05-22 05:34:57,220 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_5
2025-05-22 05:34:57,424 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:34:57,424 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:34:57,424 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:34:57,425 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:35:44,078 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:35:44,079 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:35:44,079 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:35:44,079 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:35:44,080 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1038 chars)
2025-05-22 05:35:44,262 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:35:44,262 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:35:44,262 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:35:44,263 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:36:32,194 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:36:32,194 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:36:32,195 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:36:32,195 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:36:32,195 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1017 chars)
2025-05-22 05:36:32,376 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:36:32,376 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:36:32,377 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:36:32,377 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:37:08,163 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:37:08,163 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:37:08,163 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:37:08,163 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:37:08,164 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1038 chars)
2025-05-22 05:37:08,164 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 1be049df
2025-05-22 05:37:08,164 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0
        
        for num in nums:
            s = str(num)
            variations = set()
            variations.add(s)  # Include the original number
            
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            
            # Count how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)
            
            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1
        
        return result
2025-05-22 05:37:08,164 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:37:08,164 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            variations.add(s)  # Include the original number

            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))

            # Count how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result
2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            variations.add(s)  # Include the original number

            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))

            # Count how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:37:08,164 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            variations.add(s)  # Include the original number

            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))

            # Count how many of these variations are already in the map
            for var in variations:
                result += count_map.get(var, 0)

            # Update the count_map with the current number's variations
            for var in variations:
                count_map[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:37:22,289 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpb12rq463.py\", line 240, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpb12rq463.py\", line 114, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpb12rq463.py` failed. (See above for error)\n",
  "execution_time": 14.124538660049438,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpb12rq463.py\", line 240, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpb12rq463.py\", line 114, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpb12rq463.py` failed. (See above for error)"
}
2025-05-22 05:37:22,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 1be049df
2025-05-22 05:37:22,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0
        
        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)
            
            # Check how many of these variations are already in variation_counts
            for var in variations:
                result += variation_counts[var]
            
            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1
        
        return result
2025-05-22 05:37:22,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:37:22,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Check how many of these variations are already in variation_counts
            for var in variations:
                result += variation_counts[var]

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result
2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Check how many of these variations are already in variation_counts
            for var in variations:
                result += variation_counts[var]

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:37:22,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Check how many of these variations are already in variation_counts
            for var in variations:
                result += variation_counts[var]

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:37:35,920 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp6st8p_90.py\", line 240, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp6st8p_90.py\", line 114, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp6st8p_90.py` failed. (See above for error)\n",
  "execution_time": 13.628952026367188,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp6st8p_90.py\", line 240, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp6st8p_90.py\", line 114, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp6st8p_90.py` failed. (See above for error)"
}
2025-05-22 05:37:35,920 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_9 at depth 2
2025-05-22 05:37:35,920 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_9
2025-05-22 05:37:36,123 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:37:36,124 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:37:36,124 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:37:36,124 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:38:26,556 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:38:26,556 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:38:26,556 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:38:26,556 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:38:26,557 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1116 chars)
2025-05-22 05:38:26,738 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:38:26,738 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:38:26,738 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:38:26,739 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:20,365 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:20,366 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:20,366 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:20,366 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:20,366 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (736 chars)
2025-05-22 05:39:20,549 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:20,549 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:20,549 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:20,550 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:57,104 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:57,104 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:57,104 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:39:57,104 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:39:57,105 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (349 chars)
2025-05-22 05:39:57,105 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0
        
        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)
            
            # Count how many previous variations match any of the current variations
            count = 0
            for var in variations:
                count += variation_counts.get(var, 0)
            result += count
            
            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1
        
        return result
2025-05-22 05:39:57,105 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:39:57,105 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Count how many previous variations match any of the current variations
            count = 0
            for var in variations:
                count += variation_counts.get(var, 0)
            result += count

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result
2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Count how many previous variations match any of the current variations
            count = 0
            for var in variations:
                count += variation_counts.get(var, 0)
            result += count

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:39:57,105 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        variation_counts = defaultdict(int)
        result = 0

        for num in nums:
            s = str(num)
            variations = set()
            # Generate all possible variations by swapping any two digits
            for i in range(len(s)):
                for j in range(i + 1, len(s)):
                    swapped = list(s)
                    swapped[i], swapped[j] = swapped[j], swapped[i]
                    variations.add(''.join(swapped))
            # Include the original number as a variation
            variations.add(s)

            # Count how many previous variations match any of the current variations
            count = 0
            for var in variations:
                count += variation_counts.get(var, 0)
            result += count

            # Update variation_counts with the current number's variations
            for var in variations:
                variation_counts[var] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:10,749 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpqh4y035q.py\", line 242, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpqh4y035q.py\", line 116, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpqh4y035q.py` failed. (See above for error)\n",
  "execution_time": 13.643066883087158,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpqh4y035q.py\", line 242, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpqh4y035q.py\", line 116, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpqh4y035q.py` failed. (See above for error)"
}
2025-05-22 05:40:10,749 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_transform(x: int, y: int) -> bool:
            x_str = str(x)
            y_str = str(y)
            # If lengths are different, can't transform
            if len(x_str) != len(y_str):
                return False
            # Convert to sorted tuples to check if they are anagrams
            x_sorted = tuple(sorted(x_str))
            y_sorted = tuple(sorted(y_str))
            return x_sorted == y_sorted
        
        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n):
                if can_transform(nums[i], nums[j]):
                    count += 1
        return count
2025-05-22 05:40:10,749 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:10,749 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:10,749 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:40:10,749 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:10,749 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:10,749 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_transform(x: int, y: int) -> bool:
            x_str = str(x)
            y_str = str(y)
            # If lengths are different, can't transform
            if len(x_str) != len(y_str):
                return False
            # Convert to sorted tuples to check if they are anagrams
            x_sorted = tuple(sorted(x_str))
            y_sorted = tuple(sorted(y_str))
            return x_sorted == y_sorted

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n):
                if can_transform(nums[i], nums[j]):
                    count += 1
        return count
2025-05-22 05:40:10,750 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_transform(x: int, y: int) -> bool:
            x_str = str(x)
            y_str = str(y)
            # If lengths are different, can't transform
            if len(x_str) != len(y_str):
                return False
            # Convert to sorted tuples to check if they are anagrams
            x_sorted = tuple(sorted(x_str))
            y_sorted = tuple(sorted(y_str))
            return x_sorted == y_sorted

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n):
                if can_transform(nums[i], nums[j]):
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:10,750 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_transform(x: int, y: int) -> bool:
            x_str = str(x)
            y_str = str(y)
            # If lengths are different, can't transform
            if len(x_str) != len(y_str):
                return False
            # Convert to sorted tuples to check if they are anagrams
            x_sorted = tuple(sorted(x_str))
            y_sorted = tuple(sorted(y_str))
            return x_sorted == y_sorted

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n):
                if can_transform(nums[i], nums[j]):
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:24,751 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpvrvc1k5x.py\", line 233, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpvrvc1k5x.py\", line 107, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpvrvc1k5x.py` failed. (See above for error)\n",
  "execution_time": 14.000205516815186,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpvrvc1k5x.py\", line 233, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpvrvc1k5x.py\", line 107, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpvrvc1k5x.py` failed. (See above for error)"
}
2025-05-22 05:40:24,751 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        groups = defaultdict(int)
        result = 0
        
        for num in nums:
            key = tuple(sorted(str(num)))
            result += groups[key]
            groups[key] += 1
        
        return result
2025-05-22 05:40:24,751 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:24,751 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        groups = defaultdict(int)
        result = 0

        for num in nums:
            key = tuple(sorted(str(num)))
            result += groups[key]
            groups[key] += 1

        return result
2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        groups = defaultdict(int)
        result = 0

        for num in nums:
            key = tuple(sorted(str(num)))
            result += groups[key]
            groups[key] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:24,751 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from typing import List
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        groups = defaultdict(int)
        result = 0

        for num in nums:
            key = tuple(sorted(str(num)))
            result += groups[key]
            groups[key] += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:38,394 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp798zpee8.py\", line 225, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp798zpee8.py\", line 99, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp798zpee8.py` failed. (See above for error)\n",
  "execution_time": 13.64217209815979,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp798zpee8.py\", line 225, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp798zpee8.py\", line 99, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp798zpee8.py` failed. (See above for error)"
}
2025-05-22 05:40:38,395 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        for num in nums:
            s = str(num)
            perms = set(permutations(s))
            for p in perms:
                key = tuple(sorted(p))
                count_map[key] += 1
        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total
2025-05-22 05:40:38,395 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:38,395 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        for num in nums:
            s = str(num)
            perms = set(permutations(s))
            for p in perms:
                key = tuple(sorted(p))
                count_map[key] += 1
        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total
2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        for num in nums:
            s = str(num)
            perms = set(permutations(s))
            for p in perms:
                key = tuple(sorted(p))
                count_map[key] += 1
        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        count_map = defaultdict(int)
        for num in nums:
            s = str(num)
            perms = set(permutations(s))
            for p in perms:
                key = tuple(sorted(p))
                count_map[key] += 1
        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:40:52,023 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpx2ikf4fd.py\", line 228, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpx2ikf4fd.py\", line 102, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpx2ikf4fd.py` failed. (See above for error)\n",
  "execution_time": 13.626913070678711,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpx2ikf4fd.py\", line 228, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpx2ikf4fd.py\", line 102, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpx2ikf4fd.py` failed. (See above for error)"
}
2025-05-22 05:40:52,023 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_1 at depth 1
2025-05-22 05:40:52,023 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_1
2025-05-22 05:40:52,228 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:40:52,228 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:40:52,228 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:40:52,228 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:41:46,623 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:41:46,624 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:41:46,624 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:41:46,624 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:41:46,624 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1029 chars)
2025-05-22 05:41:46,807 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:41:46,807 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:41:46,808 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:41:46,808 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:42:34,828 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:42:34,828 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:42:34,829 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:42:34,829 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:42:34,829 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (879 chars)
2025-05-22 05:42:35,013 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:42:35,013 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:42:35,013 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:42:35,013 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:46:04,580 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:46:04,581 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:46:04,581 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:46:04,581 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:46:04,583 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (15931 chars)
2025-05-22 05:46:04,583 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_swap_to_equal(a, b):
            a_str = str(a)
            b_str = str(b)
            if len(a_str) != len(b_str):
                return False
            diff = []
            for i in range(len(a_str)):
                if a_str[i] != b_str[i]:
                    diff.append(i)
                    if len(diff) > 2:
                        return False
            if len(diff) == 0:
                return True
            if len(diff) == 1:
                return False
            # Check if swapping the two differing digits in a makes it equal to b
            i, j = diff
            if a_str[i] == b_str[j] and a_str[j] == b_str[i]:
                return True
            return False
        
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if can_swap_to_equal(nums[i], nums[j]):
                    count += 1
        return count
2025-05-22 05:46:04,583 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:46:04,583 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_swap_to_equal(a, b):
            a_str = str(a)
            b_str = str(b)
            if len(a_str) != len(b_str):
                return False
            diff = []
            for i in range(len(a_str)):
                if a_str[i] != b_str[i]:
                    diff.append(i)
                    if len(diff) > 2:
                        return False
            if len(diff) == 0:
                return True
            if len(diff) == 1:
                return False
            # Check if swapping the two differing digits in a makes it equal to b
            i, j = diff
            if a_str[i] == b_str[j] and a_str[j] == b_str[i]:
                return True
            return False

        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if can_swap_to_equal(nums[i], nums[j]):
                    count += 1
        return count
2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_swap_to_equal(a, b):
            a_str = str(a)
            b_str = str(b)
            if len(a_str) != len(b_str):
                return False
            diff = []
            for i in range(len(a_str)):
                if a_str[i] != b_str[i]:
                    diff.append(i)
                    if len(diff) > 2:
                        return False
            if len(diff) == 0:
                return True
            if len(diff) == 1:
                return False
            # Check if swapping the two differing digits in a makes it equal to b
            i, j = diff
            if a_str[i] == b_str[j] and a_str[j] == b_str[i]:
                return True
            return False

        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if can_swap_to_equal(nums[i], nums[j]):
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:46:04,583 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def can_swap_to_equal(a, b):
            a_str = str(a)
            b_str = str(b)
            if len(a_str) != len(b_str):
                return False
            diff = []
            for i in range(len(a_str)):
                if a_str[i] != b_str[i]:
                    diff.append(i)
                    if len(diff) > 2:
                        return False
            if len(diff) == 0:
                return True
            if len(diff) == 1:
                return False
            # Check if swapping the two differing digits in a makes it equal to b
            i, j = diff
            if a_str[i] == b_str[j] and a_str[j] == b_str[i]:
                return True
            return False

        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if can_swap_to_equal(nums[i], nums[j]):
                    count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:46:18,527 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmprk8gsqfi.py\", line 242, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmprk8gsqfi.py\", line 116, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmprk8gsqfi.py` failed. (See above for error)\n",
  "execution_time": 13.942676782608032,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmprk8gsqfi.py\", line 242, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmprk8gsqfi.py\", line 116, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmprk8gsqfi.py` failed. (See above for error)"
}
2025-05-22 05:46:18,527 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_14 at depth 2
2025-05-22 05:46:18,527 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_14
2025-05-22 05:46:18,735 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:46:18,735 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:46:18,736 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:46:18,736 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:01,803 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:01,803 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:01,803 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:01,803 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:01,804 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (613 chars)
2025-05-22 05:47:01,986 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:01,987 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:01,987 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:01,987 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:46,632 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:46,632 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:46,632 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:46,633 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:46,633 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (719 chars)
2025-05-22 05:47:46,816 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:47:46,816 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:46,817 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:47:46,817 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:48:27,787 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:48:27,787 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:48:27,787 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:48:27,787 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:48:27,788 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (838 chars)
2025-05-22 05:48:27,788 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(n):
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms
        
        count = 0
        perm_counts = defaultdict(int)
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                count += perm_counts.get(p, 0)
            for p in perms:
                perm_counts[p] += 1
        return count
2025-05-22 05:48:27,788 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:27,788 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(n):
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        perm_counts = defaultdict(int)
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                count += perm_counts.get(p, 0)
            for p in perms:
                perm_counts[p] += 1
        return count
2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(n):
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        perm_counts = defaultdict(int)
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                count += perm_counts.get(p, 0)
            for p in perms:
                perm_counts[p] += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:48:27,788 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(n):
            s = str(n)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        perm_counts = defaultdict(int)
        for num in nums:
            perms = get_permutations(num)
            for p in perms:
                count += perm_counts.get(p, 0)
            for p in perms:
                perm_counts[p] += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:48:41,783 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpsd2_yzuc.py\", line 232, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpsd2_yzuc.py\", line 106, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpsd2_yzuc.py` failed. (See above for error)\n",
  "execution_time": 13.994389533996582,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpsd2_yzuc.py\", line 232, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpsd2_yzuc.py\", line 106, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpsd2_yzuc.py` failed. (See above for error)"
}
2025-05-22 05:48:41,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        # Create a dictionary to store the count of each sorted tuple of digits
        digit_counts = defaultdict(int)
        
        for num in nums:
            # Convert the number to a sorted tuple of its digits
            key = tuple(sorted(str(num)))
            digit_counts[key] += 1
        
        # Calculate the number of valid pairs
        count = 0
        for freq in digit_counts.values():
            # For each group of numbers with the same digit composition, calculate combinations
            count += freq * (freq - 1) // 2
        
        return count
2025-05-22 05:48:41,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:41,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        # Create a dictionary to store the count of each sorted tuple of digits
        digit_counts = defaultdict(int)

        for num in nums:
            # Convert the number to a sorted tuple of its digits
            key = tuple(sorted(str(num)))
            digit_counts[key] += 1

        # Calculate the number of valid pairs
        count = 0
        for freq in digit_counts.values():
            # For each group of numbers with the same digit composition, calculate combinations
            count += freq * (freq - 1) // 2

        return count
2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        # Create a dictionary to store the count of each sorted tuple of digits
        digit_counts = defaultdict(int)

        for num in nums:
            # Convert the number to a sorted tuple of its digits
            key = tuple(sorted(str(num)))
            digit_counts[key] += 1

        # Calculate the number of valid pairs
        count = 0
        for freq in digit_counts.values():
            # For each group of numbers with the same digit composition, calculate combinations
            count += freq * (freq - 1) // 2

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:48:41,784 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        # Create a dictionary to store the count of each sorted tuple of digits
        digit_counts = defaultdict(int)

        for num in nums:
            # Convert the number to a sorted tuple of its digits
            key = tuple(sorted(str(num)))
            digit_counts[key] += 1

        # Calculate the number of valid pairs
        count = 0
        for freq in digit_counts.values():
            # For each group of numbers with the same digit composition, calculate combinations
            count += freq * (freq - 1) // 2

        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:48:55,391 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpudjpe07r.py\", line 231, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpudjpe07r.py\", line 105, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpudjpe07r.py` failed. (See above for error)\n",
  "execution_time": 13.606444120407104,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpudjpe07r.py\", line 231, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpudjpe07r.py\", line 105, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpudjpe07r.py` failed. (See above for error)"
}
2025-05-22 05:48:55,392 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(num):
            s = str(num)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms
        
        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                a = str(nums[i])
                b = str(nums[j])
                if len(a) != len(b):
                    continue
                # Check if any permutation of a matches any permutation of b
                perms_a = get_permutations(nums[i])
                perms_b = get_permutations(nums[j])
                if perms_a & perms_b:
                    count +=1
        return count
2025-05-22 05:48:55,392 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:55,392 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:55,392 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:48:55,392 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:48:55,392 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:48:55,392 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(num):
            s = str(num)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                a = str(nums[i])
                b = str(nums[j])
                if len(a) != len(b):
                    continue
                # Check if any permutation of a matches any permutation of b
                perms_a = get_permutations(nums[i])
                perms_b = get_permutations(nums[j])
                if perms_a & perms_b:
                    count +=1
        return count
2025-05-22 05:48:55,392 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(num):
            s = str(num)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                a = str(nums[i])
                b = str(nums[j])
                if len(a) != len(b):
                    continue
                # Check if any permutation of a matches any permutation of b
                perms_a = get_permutations(nums[i])
                perms_b = get_permutations(nums[j])
                if perms_a & perms_b:
                    count +=1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:48:55,393 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import permutations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: list[int]) -> int:
        def get_permutations(num):
            s = str(num)
            perms = set()
            for p in permutations(s):
                perms.add(''.join(p))
            return perms

        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                a = str(nums[i])
                b = str(nums[j])
                if len(a) != len(b):
                    continue
                # Check if any permutation of a matches any permutation of b
                perms_a = get_permutations(nums[i])
                perms_b = get_permutations(nums[j])
                if perms_a & perms_b:
                    count +=1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:49:09,003 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpbalm80yc.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpbalm80yc.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpbalm80yc.py` failed. (See above for error)\n",
  "execution_time": 13.610357522964478,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpbalm80yc.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpbalm80yc.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpbalm80yc.py` failed. (See above for error)"
}
2025-05-22 05:49:09,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped
        
        count_map = defaultdict(int)
        for num in nums:
            swaps = generate_swaps(num)
            for s in swaps:
                count_map[s] += 1
        
        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total
2025-05-22 05:49:09,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:49:09,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count_map = defaultdict(int)
        for num in nums:
            swaps = generate_swaps(num)
            for s in swaps:
                count_map[s] += 1

        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total
2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count_map = defaultdict(int)
        for num in nums:
            swaps = generate_swaps(num)
            for s in swaps:
                count_map[s] += 1

        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:49:09,004 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count_map = defaultdict(int)
        for num in nums:
            swaps = generate_swaps(num)
            for s in swaps:
                count_map[s] += 1

        total = 0
        for c in count_map.values():
            if c >= 2:
                total += c * (c - 1) // 2
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:49:22,645 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpkfyrc43l.py\", line 239, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpkfyrc43l.py\", line 113, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpkfyrc43l.py` failed. (See above for error)\n",
  "execution_time": 13.640222549438477,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpkfyrc43l.py\", line 239, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpkfyrc43l.py\", line 113, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpkfyrc43l.py` failed. (See above for error)"
}
2025-05-22 05:49:22,645 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_18 at depth 2
2025-05-22 05:49:22,645 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_18
2025-05-22 05:49:22,855 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:49:22,855 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:49:22,855 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:49:22,855 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:05,611 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:05,611 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:05,611 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:05,612 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:05,612 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (746 chars)
2025-05-22 05:50:05,795 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:05,796 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:05,796 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:05,796 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:55,078 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:55,079 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:55,079 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:55,079 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:55,079 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (955 chars)
2025-05-22 05:50:55,261 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:50:55,262 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:55,262 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:50:55,262 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:51:39,204 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:51:39,204 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:51:39,205 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:51:39,205 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:51:39,205 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (854 chars)
2025-05-22 05:51:39,205 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def is_almost_equal(x, y):
            x_str = str(x)
            y_str = str(y)
            if len(x_str) != len(y_str):
                return False
            diff = []
            for a, b in zip(x_str, y_str):
                if a != b:
                    diff.append((a, b))
            if len(diff) == 0:
                return True
            if len(diff) == 2:
                return diff[0] == (diff[1][1], diff[1][0])
            return False
        
        count = 0
        for i, j in combinations(range(len(nums)), 2):
            if is_almost_equal(nums[i], nums[j]):
                count += 1
        return count
2025-05-22 05:51:39,205 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:51:39,205 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:51:39,205 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:51:39,205 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:51:39,205 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:51:39,205 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def is_almost_equal(x, y):
            x_str = str(x)
            y_str = str(y)
            if len(x_str) != len(y_str):
                return False
            diff = []
            for a, b in zip(x_str, y_str):
                if a != b:
                    diff.append((a, b))
            if len(diff) == 0:
                return True
            if len(diff) == 2:
                return diff[0] == (diff[1][1], diff[1][0])
            return False

        count = 0
        for i, j in combinations(range(len(nums)), 2):
            if is_almost_equal(nums[i], nums[j]):
                count += 1
        return count
2025-05-22 05:51:39,206 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def is_almost_equal(x, y):
            x_str = str(x)
            y_str = str(y)
            if len(x_str) != len(y_str):
                return False
            diff = []
            for a, b in zip(x_str, y_str):
                if a != b:
                    diff.append((a, b))
            if len(diff) == 0:
                return True
            if len(diff) == 2:
                return diff[0] == (diff[1][1], diff[1][0])
            return False

        count = 0
        for i, j in combinations(range(len(nums)), 2):
            if is_almost_equal(nums[i], nums[j]):
                count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:51:39,206 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def is_almost_equal(x, y):
            x_str = str(x)
            y_str = str(y)
            if len(x_str) != len(y_str):
                return False
            diff = []
            for a, b in zip(x_str, y_str):
                if a != b:
                    diff.append((a, b))
            if len(diff) == 0:
                return True
            if len(diff) == 2:
                return diff[0] == (diff[1][1], diff[1][0])
            return False

        count = 0
        for i, j in combinations(range(len(nums)), 2):
            if is_almost_equal(nums[i], nums[j]):
                count += 1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:51:53,396 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp38yjwsqs.py\", line 235, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp38yjwsqs.py\", line 109, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp38yjwsqs.py` failed. (See above for error)\n",
  "execution_time": 14.189688920974731,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp38yjwsqs.py\", line 235, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp38yjwsqs.py\", line 109, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp38yjwsqs.py` failed. (See above for error)"
}
2025-05-22 05:51:53,396 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            variations = set()
            variations.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    variations.add(int(''.join(s)))
                    s[i], s[j] = s[j], s[i]  # Swap back
            return variations
        
        variation_map = defaultdict(set)
        for num in nums:
            variation_map[num] = generate_swaps(num)
        
        total = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                num_i = nums[i]
                num_j = nums[j]
                if num_j in variation_map[num_i] or num_i in variation_map[num_j]:
                    total += 1
        return total
2025-05-22 05:51:53,396 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:51:53,396 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            variations = set()
            variations.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    variations.add(int(''.join(s)))
                    s[i], s[j] = s[j], s[i]  # Swap back
            return variations

        variation_map = defaultdict(set)
        for num in nums:
            variation_map[num] = generate_swaps(num)

        total = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                num_i = nums[i]
                num_j = nums[j]
                if num_j in variation_map[num_i] or num_i in variation_map[num_j]:
                    total += 1
        return total
2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            variations = set()
            variations.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    variations.add(int(''.join(s)))
                    s[i], s[j] = s[j], s[i]  # Swap back
            return variations

        variation_map = defaultdict(set)
        for num in nums:
            variation_map[num] = generate_swaps(num)

        total = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                num_i = nums[i]
                num_j = nums[j]
                if num_j in variation_map[num_i] or num_i in variation_map[num_j]:
                    total += 1
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:51:53,397 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            variations = set()
            variations.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    variations.add(int(''.join(s)))
                    s[i], s[j] = s[j], s[i]  # Swap back
            return variations

        variation_map = defaultdict(set)
        for num in nums:
            variation_map[num] = generate_swaps(num)

        total = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                num_i = nums[i]
                num_j = nums[j]
                if num_j in variation_map[num_i] or num_i in variation_map[num_j]:
                    total += 1
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:52:07,045 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.647483587265015,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:52:07,045 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_20 (depth 2)
2025-05-22 05:52:07,045 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped
        
        count = 0
        for i in range(len(nums)):
            current = nums[i]
            swaps = generate_swaps(current)
            for j in range(i+1, len(nums)):
                other = nums[j]
                if other in swaps:
                    count +=1
        return count
2025-05-22 05:52:07,045 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:52:07,045 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().countPairs
2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17

2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().countPairs
2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count = 0
        for i in range(len(nums)):
            current = nums[i]
            swaps = generate_swaps(current)
            for j in range(i+1, len(nums)):
                other = nums[j]
                if other in swaps:
                    count +=1
        return count
2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count = 0
        for i in range(len(nums)):
            current = nums[i]
            swaps = generate_swaps(current)
            for j in range(i+1, len(nums)):
                other = nums[j]
                if other in swaps:
                    count +=1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:52:07,046 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from itertools import combinations
from collections import defaultdict

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def generate_swaps(n):
            s = list(str(n))
            swapped = set()
            swapped.add(n)
            for i in range(len(s)):
                for j in range(i+1, len(s)):
                    s[i], s[j] = s[j], s[i]
                    swapped_num = int(''.join(s))
                    swapped.add(swapped_num)
                    s[i], s[j] = s[j], s[i]  # Swap back
            return swapped

        count = 0
        for i in range(len(nums)):
            current = nums[i]
            swaps = generate_swaps(current)
            for j in range(i+1, len(nums)):
                other = nums[j]
                if other in swaps:
                    count +=1
        return count

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]) == 0
    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5
    assert candidate(nums = [12, 21, 13, 31, 14]) == 2
    assert candidate(nums = [12, 21, 13, 31, 23, 32, 45, 54]) == 4
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1
    assert candidate(nums = [123, 321, 213, 231, 312, 132]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412]) == 1
    assert candidate(nums = [5, 55, 555, 5555]) == 0
    assert candidate(nums = [10, 100, 1000]) == 3
    assert candidate(nums = [1111, 1112, 1121, 1211, 2111]) == 6
    assert candidate(nums = [1234, 4321, 2341, 3412, 4123, 1423, 1324, 2413, 2134, 3421, 3124, 1342, 2431, 4312, 4213, 1243, 1432, 2143, 2314, 3214, 3142, 4132, 3241, 4231]) == 72
    assert candidate(nums = [999, 9999, 99999, 999999]) == 0
    assert candidate(nums = [123, 321, 231, 123, 132, 213]) == 10
    assert candidate(nums = [456, 654, 465, 546, 564, 645]) == 9
    assert candidate(nums = [12, 21, 34, 43, 56, 65]) == 3
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1
    assert candidate(nums = [12, 21, 13, 31, 14, 41]) == 3
    assert candidate(nums = [12, 21, 34, 43, 56]) == 2
    assert candidate(nums = [3, 12, 30, 17, 21]) == 2
    assert candidate(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0
    assert candidate(nums = [123, 321, 231, 132, 213, 312]) == 9
    assert candidate(nums = [1234, 4321, 2134, 3412, 1423, 2314]) == 2
    assert candidate(nums = [123, 231]) == 0
    assert candidate(nums = [1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [10, 100, 1000, 10000]) == 6
    assert candidate(nums = [100, 101, 110, 111]) == 1
    assert candidate(nums = [1234, 4321, 3214, 2341]) == 2
    assert candidate(nums = [123, 321, 213, 132, 231, 312]) == 9
    assert candidate(nums = [1000, 1001, 1010, 1100, 10, 1]) == 6
    assert candidate(nums = [123456, 654321, 123654, 456321, 213456, 345612, 564321]) == 4
    assert candidate(nums = [10203, 30201, 20301, 20103, 30102, 10302, 12300, 12003]) == 12
    assert candidate(nums = [987654, 456789, 978654, 897654, 765432]) == 2
    assert candidate(nums = [101, 110, 11, 111, 1001, 1010]) == 8
    assert candidate(nums = [12345, 54321, 21435, 35421, 42153, 51324]) == 1
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 10001]) == 10
    assert candidate(nums = [987654, 987645, 987564, 987546, 987465, 987456]) == 9
    assert candidate(nums = [111222, 222111, 112211, 211211, 122111, 112121]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345]) == 0
    assert candidate(nums = [123456789, 987654321, 918273645, 543216789, 132456789, 123465789]) == 2
    assert candidate(nums = [999, 899, 989, 998, 889, 898]) == 4
    assert candidate(nums = [123, 321, 231, 132, 213, 312, 123, 321, 231, 132, 213, 312]) == 42
    assert candidate(nums = [10203, 30201, 20301, 10302, 20103, 32100]) == 6
    assert candidate(nums = [1122, 2211, 1221, 2112, 2121, 1212]) == 12
    assert candidate(nums = [1234567, 7654321, 6543217, 5432176, 4321765, 3217654, 2176543, 1765432]) == 0
    assert candidate(nums = [111222, 222111, 121221, 212112, 112212, 212211]) == 7
    assert candidate(nums = [1002, 2001, 1020, 2010, 1200, 2100, 20001, 10002]) == 12
    assert candidate(nums = [111111, 222222, 333333, 444444, 555555, 666666]) == 0
    assert candidate(nums = [987654, 456789, 876549, 765498, 654987, 549876, 498765, 987654]) == 1
    assert candidate(nums = [123456, 654321, 126543, 342156, 564321, 213456]) == 2
    assert candidate(nums = [111222, 222111, 122122, 211221, 221122, 121222, 222121, 122211]) == 7
    assert candidate(nums = [123456789, 987654321, 234567891, 198765432, 345678912, 219876543]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111, 211111]) == 15
    assert candidate(nums = [112233, 332211, 221133, 132211, 312211]) == 1
    assert candidate(nums = [1234, 4321, 3412, 2143, 1324, 2413]) == 4
    assert candidate(nums = [567, 675, 756, 576, 657, 765, 123, 321, 213, 231, 312, 132]) == 18
    assert candidate(nums = [12345, 54321, 13245, 24135, 35142, 42153, 53214]) == 1
    assert candidate(nums = [999999, 99999, 9999, 999, 99, 9]) == 0
    assert candidate(nums = [11112222, 22221111, 12121212, 21212121, 11221122]) == 0
    assert candidate(nums = [10001, 10010, 10100, 11000, 10001, 10010]) == 15
    assert candidate(nums = [12345, 54321, 43215, 32154, 21543, 15432, 51432, 41532, 31542, 21543, 14532, 54132, 45132, 35142, 25143, 15243, 51243, 41253, 31254, 21254]) == 25
    assert candidate(nums = [1234, 4321, 2134, 3421, 2341, 4123, 1423, 3241]) == 8
    assert candidate(nums = [987654, 897654, 789654, 678954, 567894, 456789, 956784, 985674, 987564]) == 5
    assert candidate(nums = [123456, 654321, 123546, 654123, 123465, 654312, 125346, 653124]) == 6
    assert candidate(nums = [123456, 123457, 123465, 123546, 124356, 123645, 125346, 132456, 124536, 134256]) == 12
    assert candidate(nums = [12345, 54321, 23415, 31425, 42135, 15234, 51432, 21453]) == 0
    assert candidate(nums = [54321, 45321, 35421, 25431, 15432, 54231, 54312, 54132, 52431, 53421]) == 13
    assert candidate(nums = [999999, 111222, 222111, 333444, 444333, 555666]) == 0
    assert candidate(nums = [101010, 101100, 110010, 100110, 101001, 110100, 100101, 110001, 100011, 100101]) == 31
    assert candidate(nums = [123456, 654321, 234561, 165432, 345612, 126543]) == 0
    assert candidate(nums = [987654, 456789, 876954, 769854, 678945, 954876]) == 0
    assert candidate(nums = [1001, 1010, 1100, 10010, 10100]) == 6
    assert candidate(nums = [100, 10, 1, 110, 11, 101, 1110, 1101, 1011, 111]) == 12
    assert candidate(nums = [111, 222, 333, 444, 555, 666, 777, 888, 999, 101]) == 0
    assert candidate(nums = [1234, 2341, 3412, 4123, 1423, 2143]) == 3
    assert candidate(nums = [123456, 123465, 124356, 132456, 213456]) == 4
    assert candidate(nums = [100101, 101001, 110010, 110100, 101100, 100110]) == 10
    assert candidate(nums = [101, 110, 1001, 1010, 1100, 1]) == 8
    assert candidate(nums = [101010, 202020, 303030, 404040, 505050, 606060]) == 0
    assert candidate(nums = [123456, 654321, 564321, 456321, 345621, 234561, 123465, 654312]) == 4
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 21345, 13245, 12435, 12354, 12345]) == 9
    assert candidate(nums = [123456789, 987654321, 876543219, 192837465, 219876543, 345678192, 465789321, 578912346, 689123457, 791234568]) == 0
    assert candidate(nums = [1234, 2341, 4321, 3421, 2143, 3214]) == 4
    assert candidate(nums = [102, 201, 120, 210, 10, 1]) == 5
    assert candidate(nums = [12345, 54321, 13524, 24153, 35412, 41235]) == 0
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1000002, 2000010, 1000200, 2001000, 1020000, 2100000, 2000001, 1000012]) == 10
    assert candidate(nums = [123456, 654321, 123465, 123546, 124356]) == 3
    assert candidate(nums = [112233, 332211, 221133, 123321, 213123, 321321, 312132, 231231]) == 1
    assert candidate(nums = [101010, 101100, 110010, 110100, 100110, 100101]) == 11
    assert candidate(nums = [100001, 100010, 100100, 101000, 110000, 1]) == 10
    assert candidate(nums = [999, 989, 998, 899, 988, 889]) == 4
    assert candidate(nums = [111222, 222111, 112212, 221121, 121122]) == 4
    assert candidate(nums = [987654, 456789, 986754, 457689, 987564, 456879]) == 4
    assert candidate(nums = [123456, 234561, 345612, 456123, 561234, 612345, 162345, 126345, 123645, 123465]) == 5
    assert candidate(nums = [12345, 23451, 34512, 45123, 51234, 15234]) == 1
    assert candidate(nums = [987654, 876549, 765489, 654789, 546789]) == 0
    assert candidate(nums = [112233, 331122, 223311, 113322, 221133, 332211]) == 0
    assert candidate(nums = [101010, 100101, 101100, 110010, 110100, 111000]) == 10
    assert candidate(nums = [1234, 4321, 1423, 2143, 3124, 2314, 1342, 3412, 4132, 4213]) == 0
    assert candidate(nums = [1000001, 1000010, 1000100, 1001000, 1010000, 1100000]) == 15
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [101, 110, 1001, 1010, 1100]) == 8
    assert candidate(nums = [1001, 1100, 1010, 1001, 1101, 1110]) == 7
    assert candidate(nums = [1234, 4321, 3412, 2143, 2314, 4123]) == 2
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000]) == 15
    assert candidate(nums = [1112, 1211, 2111, 1121, 2211, 2121, 1221]) == 9
    assert candidate(nums = [123, 321, 213, 132, 231, 312, 111, 222, 333, 444]) == 9
    assert candidate(nums = [123, 213, 321, 132, 231, 312, 456, 546, 465, 564, 645, 654]) == 18
    assert candidate(nums = [1234, 4321, 2341, 1423, 3142]) == 1
    assert candidate(nums = [100, 1000, 10000, 100000, 1000000]) == 10
    assert candidate(nums = [10000001, 10000010, 10000100, 10001000, 10010000, 10100000, 11000000, 20000001]) == 21
    assert candidate(nums = [111111, 111112, 111121, 111211, 112111, 121111]) == 10
    assert candidate(nums = [1234567, 7654321, 2314567, 3546721, 4678901, 5789012]) == 0
    assert candidate(nums = [100001, 100100, 101000, 110000, 100010, 100110]) == 10
    assert candidate(nums = [987654, 456789, 654321, 789654, 897654, 567894]) == 2
    assert candidate(nums = [1234, 4321, 2143, 3412, 1342, 2413, 4123, 3214, 2341, 4231]) == 11
    assert candidate(nums = [11112, 21111, 12111, 11211, 11121, 11111]) == 10
    assert candidate(nums = [1001, 1010, 1100, 1, 10, 100, 101, 11, 111, 1111]) == 11
    assert candidate(nums = [123456, 654321, 123654, 123456, 654123, 126543]) == 4
    assert candidate(nums = [999999, 888888, 777777, 666666, 555555, 444444, 333333]) == 0
    assert candidate(nums = [123456789, 987654321, 897654321, 789654321, 654321789, 543216789]) == 2
    assert candidate(nums = [1234, 1324, 2134, 2314, 3124, 3214, 4123, 4213, 4312, 4321]) == 17


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().countPairs)

2025-05-22 05:52:20,733 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp748th5ir.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp748th5ir.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp748th5ir.py` failed. (See above for error)\n",
  "execution_time": 13.686975955963135,
  "failed_tests": [
    {
      "input": "nums = [101, 110, 111, 1001, 1100]",
      "expected": "5",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp748th5ir.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmp748th5ir.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp748th5ir.py` failed. (See above for error)"
}
2025-05-22 05:52:20,734 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 2_20
2025-05-22 05:52:20,734 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 2_20), stopping early
2025-05-22 05:52:20,734 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:52:20,734 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 23 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:52:20,735 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427549776 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:52:20,735 [DEBUG] filelock (_api.py:334): Lock 140657427549776 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:52:20,735 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:52:22,171 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427549776 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:52:22,172 [DEBUG] filelock (_api.py:367): Lock 140657427549776 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:52:22,172 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:52:22,172 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:52:25,615 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/count-almost-equal-pairs-i.json
2025-05-22 05:52:25,615 [INFO] root (run_leetcode_solver.py:373): Processed problem count-almost-equal-pairs-i in 1437.03 seconds
2025-05-22 05:52:25,616 [INFO] root (run_leetcode_solver.py:348): Processing problem ID hash-divided-string with model deepseek-r1-distill
2025-05-22 05:52:25,738 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem hash-divided-string
2025-05-22 05:52:25,738 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:52:25,928 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:52:25,928 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:25,929 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:25,929 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:52:42,480 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:52:42,481 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:42,481 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:42,481 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:52:42,481 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (442 chars)
2025-05-22 05:52:42,665 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:52:42,665 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:42,665 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:52:42,665 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:01,950 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:01,950 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:01,950 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:01,951 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:01,951 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (442 chars)
2025-05-22 05:53:02,134 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:02,134 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:02,135 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:02,135 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:17,056 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:17,056 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:17,056 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:17,056 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:17,057 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (354 chars)
2025-05-22 05:53:17,057 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def stringHash(self, s: str, k: int) -> str:
        result = []
        n = len(s)
        num_substrings = n // k
        for i in range(num_substrings):
            substring = s[i*k : (i+1)*k]
            total = 0
            for char in substring:
                total += ord(char) - ord('a')
            hashed_char = total % 26
            result.append(chr(hashed_char + ord('a')))
        return ''.join(result)
2025-05-22 05:53:17,057 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(s = "aaaa",k = 2) == "aa"
    assert candidate(s = "mnopqr",k = 3) == "nw"
    assert candidate(s = "hellohellohellohello",k = 5) == "vvvv"
    assert candidate(s = "ababababab",k = 2) == "bbbbb"
    assert candidate(s = "zzzz",k = 4) == "w"
    assert candidate(s = "abcd",k = 2) == "bf"
    assert candidate(s = "mxz",k = 3) == "i"
    assert candidate(s = "zzzz",k = 2) == "yy"
    assert candidate(s = "aaaabbbbcccc",k = 4) == "aei"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyz",k = 26) == "n"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyza",k = 1) == "abcdefghijklmnopqrstuvwxyza"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddd"
    assert candidate(s = "hellohellohellohellohellohellohellohellohellohello",k = 5) == "vvvvvvvvvv"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 5) == "ghijghij"
    assert candidate(s = "zzzzzzzzzzzzzzzzzzzzzzzzzz",k = 26) == "a"
    assert candidate(s = "abacabadabacaba",k = 5) == "dfd"
    assert candidate(s = "qrstuvwx",k = 4) == "si"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 4) == "gggggggggg"
    assert candidate(s = "hellotherehellothere",k = 5) == "vzvz"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddddddddd"
    assert candidate(s = "qwertqwertqwertqwertqwertqwertqwertqwertqwertqwertqwert",k = 5) == "aaaaaaaaaaa"
    assert candidate(s = "mnopqrnopqrmnopqrnopqrmnopqr",k = 7) == "wxca"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 26) == "aa"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 13) == "kqxd"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 26) == "nn"
    assert candidate(s = "aaabbbcccdddeeefffggghhhiii",k = 3) == "adgjmpsvy"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz",k = 13) == "naan"
    assert candidate(s = "allthesmalllettersofthealphabetarehereeverywhere",k = 8) == "ebgfav"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 10) == "nrnr"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 13) == "na"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 1) == "zyxwvutsrqponmlkjihgfedcba"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 78) == "n"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 52) == "a"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 52) == "a"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 4) == "cksaiqygowemu"
    assert candidate(s = "xyzxyzxyz",k = 3) == "uuu"
    assert candidate(s = "mnopqrxyzuvw",k = 3) == "nwul"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 26) == "n"

2025-05-22 05:53:17,057 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().stringHash
2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(s = "aaaa",k = 2) == "aa"
    assert candidate(s = "mnopqr",k = 3) == "nw"
    assert candidate(s = "hellohellohellohello",k = 5) == "vvvv"
    assert candidate(s = "ababababab",k = 2) == "bbbbb"
    assert candidate(s = "zzzz",k = 4) == "w"
    assert candidate(s = "abcd",k = 2) == "bf"
    assert candidate(s = "mxz",k = 3) == "i"
    assert candidate(s = "zzzz",k = 2) == "yy"
    assert candidate(s = "aaaabbbbcccc",k = 4) == "aei"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyz",k = 26) == "n"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyza",k = 1) == "abcdefghijklmnopqrstuvwxyza"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddd"
    assert candidate(s = "hellohellohellohellohellohellohellohellohellohello",k = 5) == "vvvvvvvvvv"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 5) == "ghijghij"
    assert candidate(s = "zzzzzzzzzzzzzzzzzzzzzzzzzz",k = 26) == "a"
    assert candidate(s = "abacabadabacaba",k = 5) == "dfd"
    assert candidate(s = "qrstuvwx",k = 4) == "si"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 4) == "gggggggggg"
    assert candidate(s = "hellotherehellothere",k = 5) == "vzvz"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddddddddd"
    assert candidate(s = "qwertqwertqwertqwertqwertqwertqwertqwertqwertqwertqwert",k = 5) == "aaaaaaaaaaa"
    assert candidate(s = "mnopqrnopqrmnopqrnopqrmnopqr",k = 7) == "wxca"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 26) == "aa"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 13) == "kqxd"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 26) == "nn"
    assert candidate(s = "aaabbbcccdddeeefffggghhhiii",k = 3) == "adgjmpsvy"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz",k = 13) == "naan"
    assert candidate(s = "allthesmalllettersofthealphabetarehereeverywhere",k = 8) == "ebgfav"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 10) == "nrnr"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 13) == "na"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 1) == "zyxwvutsrqponmlkjihgfedcba"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 78) == "n"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 52) == "a"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 52) == "a"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 4) == "cksaiqygowemu"
    assert candidate(s = "xyzxyzxyz",k = 3) == "uuu"
    assert candidate(s = "mnopqrxyzuvw",k = 3) == "nwul"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 26) == "n"

2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().stringHash
2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def stringHash(self, s: str, k: int) -> str:
        result = []
        n = len(s)
        num_substrings = n // k
        for i in range(num_substrings):
            substring = s[i*k : (i+1)*k]
            total = 0
            for char in substring:
                total += ord(char) - ord('a')
            hashed_char = total % 26
            result.append(chr(hashed_char + ord('a')))
        return ''.join(result)
2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def stringHash(self, s: str, k: int) -> str:
        result = []
        n = len(s)
        num_substrings = n // k
        for i in range(num_substrings):
            substring = s[i*k : (i+1)*k]
            total = 0
            for char in substring:
                total += ord(char) - ord('a')
            hashed_char = total % 26
            result.append(chr(hashed_char + ord('a')))
        return ''.join(result)

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(s = "aaaa",k = 2) == "aa"
    assert candidate(s = "mnopqr",k = 3) == "nw"
    assert candidate(s = "hellohellohellohello",k = 5) == "vvvv"
    assert candidate(s = "ababababab",k = 2) == "bbbbb"
    assert candidate(s = "zzzz",k = 4) == "w"
    assert candidate(s = "abcd",k = 2) == "bf"
    assert candidate(s = "mxz",k = 3) == "i"
    assert candidate(s = "zzzz",k = 2) == "yy"
    assert candidate(s = "aaaabbbbcccc",k = 4) == "aei"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyz",k = 26) == "n"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyza",k = 1) == "abcdefghijklmnopqrstuvwxyza"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddd"
    assert candidate(s = "hellohellohellohellohellohellohellohellohellohello",k = 5) == "vvvvvvvvvv"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 5) == "ghijghij"
    assert candidate(s = "zzzzzzzzzzzzzzzzzzzzzzzzzz",k = 26) == "a"
    assert candidate(s = "abacabadabacaba",k = 5) == "dfd"
    assert candidate(s = "qrstuvwx",k = 4) == "si"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 4) == "gggggggggg"
    assert candidate(s = "hellotherehellothere",k = 5) == "vzvz"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddddddddd"
    assert candidate(s = "qwertqwertqwertqwertqwertqwertqwertqwertqwertqwertqwert",k = 5) == "aaaaaaaaaaa"
    assert candidate(s = "mnopqrnopqrmnopqrnopqrmnopqr",k = 7) == "wxca"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 26) == "aa"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 13) == "kqxd"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 26) == "nn"
    assert candidate(s = "aaabbbcccdddeeefffggghhhiii",k = 3) == "adgjmpsvy"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz",k = 13) == "naan"
    assert candidate(s = "allthesmalllettersofthealphabetarehereeverywhere",k = 8) == "ebgfav"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 10) == "nrnr"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 13) == "na"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 1) == "zyxwvutsrqponmlkjihgfedcba"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 78) == "n"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 52) == "a"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 52) == "a"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 4) == "cksaiqygowemu"
    assert candidate(s = "xyzxyzxyz",k = 3) == "uuu"
    assert candidate(s = "mnopqrxyzuvw",k = 3) == "nwul"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 26) == "n"


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().stringHash)

2025-05-22 05:53:17,057 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def stringHash(self, s: str, k: int) -> str:
        result = []
        n = len(s)
        num_substrings = n // k
        for i in range(num_substrings):
            substring = s[i*k : (i+1)*k]
            total = 0
            for char in substring:
                total += ord(char) - ord('a')
            hashed_char = total % 26
            result.append(chr(hashed_char + ord('a')))
        return ''.join(result)

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(s = "aaaa",k = 2) == "aa"
    assert candidate(s = "mnopqr",k = 3) == "nw"
    assert candidate(s = "hellohellohellohello",k = 5) == "vvvv"
    assert candidate(s = "ababababab",k = 2) == "bbbbb"
    assert candidate(s = "zzzz",k = 4) == "w"
    assert candidate(s = "abcd",k = 2) == "bf"
    assert candidate(s = "mxz",k = 3) == "i"
    assert candidate(s = "zzzz",k = 2) == "yy"
    assert candidate(s = "aaaabbbbcccc",k = 4) == "aei"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyz",k = 26) == "n"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyza",k = 1) == "abcdefghijklmnopqrstuvwxyza"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddd"
    assert candidate(s = "hellohellohellohellohellohellohellohellohellohello",k = 5) == "vvvvvvvvvv"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 5) == "ghijghij"
    assert candidate(s = "zzzzzzzzzzzzzzzzzzzzzzzzzz",k = 26) == "a"
    assert candidate(s = "abacabadabacaba",k = 5) == "dfd"
    assert candidate(s = "qrstuvwx",k = 4) == "si"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 4) == "gggggggggg"
    assert candidate(s = "hellotherehellothere",k = 5) == "vzvz"
    assert candidate(s = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",k = 3) == "dddddddddddddddddddddddd"
    assert candidate(s = "qwertqwertqwertqwertqwertqwertqwertqwertqwertqwertqwert",k = 5) == "aaaaaaaaaaa"
    assert candidate(s = "mnopqrnopqrmnopqrnopqrmnopqr",k = 7) == "wxca"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 26) == "aa"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 13) == "kqxd"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 26) == "nn"
    assert candidate(s = "aaabbbcccdddeeefffggghhhiii",k = 3) == "adgjmpsvy"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz",k = 13) == "naan"
    assert candidate(s = "allthesmalllettersofthealphabetarehereeverywhere",k = 8) == "ebgfav"
    assert candidate(s = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",k = 10) == "nrnr"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 13) == "na"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 1) == "zyxwvutsrqponmlkjihgfedcba"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 78) == "n"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 52) == "a"
    assert candidate(s = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",k = 52) == "a"
    assert candidate(s = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",k = 4) == "cksaiqygowemu"
    assert candidate(s = "xyzxyzxyz",k = 3) == "uuu"
    assert candidate(s = "mnopqrxyzuvw",k = 3) == "nwul"
    assert candidate(s = "zyxwvutsrqponmlkjihgfedcba",k = 26) == "n"


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().stringHash)

2025-05-22 05:53:31,036 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.978705167770386,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:53:31,037 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:53:31,037 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:53:31,037 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:53:31,037 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427547760 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:53:31,038 [DEBUG] filelock (_api.py:334): Lock 140657427547760 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:53:31,038 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:53:31,208 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427547760 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:53:31,209 [DEBUG] filelock (_api.py:367): Lock 140657427547760 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:53:31,209 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:53:31,209 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:53:32,382 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/hash-divided-string.json
2025-05-22 05:53:32,382 [INFO] root (run_leetcode_solver.py:373): Processed problem hash-divided-string in 66.65 seconds
2025-05-22 05:53:32,382 [INFO] root (run_leetcode_solver.py:348): Processing problem ID k-th-nearest-obstacle-queries with model deepseek-r1-distill
2025-05-22 05:53:32,505 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem k-th-nearest-obstacle-queries
2025-05-22 05:53:32,506 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:53:32,691 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:32,691 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:32,691 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:32,691 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:49,964 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:49,965 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:49,965 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:49,965 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:49,965 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (558 chars)
2025-05-22 05:53:50,148 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:53:50,149 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:50,149 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:53:50,149 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:05,444 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:05,445 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:05,445 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:05,445 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:05,445 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (509 chars)
2025-05-22 05:54:05,629 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:05,629 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:05,629 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:05,630 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:21,312 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:21,312 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:21,312 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:21,312 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:21,313 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (503 chars)
2025-05-22 05:54:21,313 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
import heapq

class Solution:
    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:
        heap = []
        result = []
        for x, y in queries:
            distance = abs(x) + abs(y)
            heapq.heappush(heap, -distance)  # Using max-heap by pushing negative values
            if len(heap) > k:
                heapq.heappop(heap)
            if len(heap) < k:
                result.append(-1)
            else:
                result.append(-heap[0])  # The smallest in max-heap is the k-th smallest
        return result
2025-05-22 05:54:21,313 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(queries = [[5, 5], [4, 4], [3, 3]],k = 1) == [10, 8, 6]
    assert candidate(queries = [[-1000000000, 1000000000], [1000000000, -1000000000]],k = 1) == [2000000000, 2000000000]
    assert candidate(queries = [[-1, 1], [0, 0], [1, -1]],k = 3) == [-1, -1, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40]],k = 4) == [-1, -1, -1, 80]
    assert candidate(queries = [[1, 2], [3, 4], [2, 3], [-3, 0]],k = 2) == [-1, 7, 5, 3]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 1) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [1000000000, -1000000000], [-1000000000, 1000000000], [-1000000000, -1000000000]],k = 1) == [2000000000, 2000000000, 2000000000, 2000000000]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 1) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-100, -100], [100, -100], [-100, 100], [100, 100]],k = 2) == [-1, 200, 200, 200]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500], [600, 600], [700, 700]],k = 5) == [-1, -1, -1, -1, 1000, 1000, 1000]
    assert candidate(queries = [[-2, -3], [-4, -5], [6, 7], [8, 9], [0, 0]],k = 3) == [-1, -1, 13, 13, 9]
    assert candidate(queries = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [3, 1], [2, 3], [3, 2], [3, 3]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [1, 0], [0, -1], [-1, 0], [2, 1], [1, 2], [1, -2], [-2, 1], [-1, -2], [2, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 7) == [-1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7], [-8, 8], [-9, 9], [-10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[0, 1], [1, 0], [1, 1], [-1, -1], [-1, 0], [0, -1]],k = 3) == [-1, -1, 2, 2, 1, 1]
    assert candidate(queries = [[-5, 5], [5, -5], [0, 10], [10, 0], [-10, -10]],k = 3) == [-1, -1, 10, 10, 10]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 2000000000, 2000000000, 1000000000]
    assert candidate(queries = [[-50, -50], [-50, 50], [50, -50], [50, 50], [0, 0], [0, 100], [0, -100], [100, 0], [-100, 0]],k = 2) == [-1, 100, 100, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[-1, -2], [-2, -3], [-3, -4], [-4, -5], [-5, -6], [-6, -7], [-7, -8], [-8, -9], [-9, -10]],k = 4) == [-1, -1, -1, 9, 9, 9, 9, 9, 9]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 5) == [-1, -1, -1, -1, 5, 5, 5, 5, 5, 5]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 39]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [2, 2], [2, -2], [-2, 2], [-2, -2], [3, 3], [3, -3], [-3, 3], [-3, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[999999999, 999999999], [999999998, 999999998], [999999997, 999999997], [999999996, 999999996], [999999995, 999999995], [999999994, 999999994]],k = 5) == [-1, -1, -1, -1, 1999999998, 1999999996]
    assert candidate(queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]],k = 5) == [-1, -1, -1, -1, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]],k = 5) == [-1, -1, -1, -1, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500]],k = 1) == [200, 200, 200, 200, 200]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 1) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[-1, -1], [1, -1], [-1, 1], [1, 1], [-2, -2], [2, -2], [-2, 2], [2, 2], [-3, -3], [3, -3], [-3, 3], [3, 3]],k = 5) == [-1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 7) == [-1, -1, -1, -1, -1, -1, 7, 7, 7, 7]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14]],k = 7) == [-1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    assert candidate(queries = [[-1000, -2000], [-2000, -3000], [-3000, -4000], [-4000, -5000], [-5000, -6000], [-6000, -7000], [-7000, -8000], [-8000, -9000]],k = 3) == [-1, -1, 7000, 7000, 7000, 7000, 7000, 7000]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]],k = 11) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3]],k = 5) == [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [-10, -10], [10, -10], [-10, 10]],k = 5) == [-1, -1, -1, -1, 20]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 5) == [-1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 6) == [-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 7) == [-1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 5) == [-1, -1, -1, -1, 10, 8, 6, 4, 4, 4, 4]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80], [80, 90], [90, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 150, 150, 150]
    assert candidate(queries = [[1, 2], [2, 1], [1, -2], [-2, 1], [3, -3], [-3, 3], [2, 2], [-2, -2], [1, 1], [-1, -1]],k = 5) == [-1, -1, -1, -1, 6, 6, 4, 4, 3, 3]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3], [3, -3], [-3, 3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 8) == [-1, -1, -1, -1, -1, -1, -1, 160, 160, 160]
    assert candidate(queries = [[1, 0], [0, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13]],k = 7) == [-1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1000000000, 0], [1000000000, 0], [0, -1000000000], [0, 1000000000]],k = 3) == [-1, -1, 1000000000, 1000000000]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [1, 1], [-1, 0], [0, -1], [-1, -1], [-1, 1], [1, -1], [0, 2]],k = 5) == [-1, -1, -1, -1, 2, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 6) == [-1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 7) == [-1, -1, -1, -1, -1, -1, 1500, 1500]
    assert candidate(queries = [[-1, -2], [-3, -4], [-5, -6], [-7, -8], [-9, -10], [-11, -12], [-13, -14], [-15, -16], [-17, -18], [-19, -20]],k = 3) == [-1, -1, 11, 11, 11, 11, 11, 11, 11, 11]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0], [2, 2], [-2, -2], [2, -2], [-2, 2]],k = 4) == [-1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],k = 5) == [-1, -1, -1, -1, 0]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 200]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [0, 0], [2, 0], [0, 2], [-2, 0], [0, -2]],k = 3) == [-1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 4) == [-1, -1, -1, 80, 80, 80, 80, 80, 80, 80]
    assert candidate(queries = [[1000000, 1000000], [2000000, 2000000], [3000000, 3000000], [4000000, 4000000], [5000000, 5000000], [6000000, 6000000], [7000000, 7000000], [8000000, 8000000]],k = 4) == [-1, -1, -1, 8000000, 8000000, 8000000, 8000000, 8000000]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [1, 1], [-1, -1], [2, 2], [-2, -2]],k = 3) == [-1, -1, 2000000000, 2000000000, 2, 2, 2]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 4) == [-1, -1, -1, 8, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[-5, 4], [-4, -5], [4, 5], [5, -4], [2, 3], [3, 2], [-2, -3], [-3, -2]],k = 2) == [-1, 9, 9, 9, 9, 5, 5, 5]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [-1, 1], [1, -1]],k = 2) == [-1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 4) == [-1, -1, -1, 900, 900, 900, 900, 900]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [0, 1], [1, 0]],k = 3) == [-1, -1, 2000000000, 2000000000, 1]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-1, -1], [1, 1], [0, 2], [-2, 0], [2, 0], [0, -2]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-5, 0], [0, 5], [5, 0], [0, -5], [1, 1], [-1, -1], [1, -1], [-1, 1]],k = 3) == [-1, -1, 5, 5, 5, 5, 2, 2]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12]],k = 6) == [-1, -1, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2]],k = 5) == [-1, -1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[100, 1], [1, 100], [10, 10], [1000, 1000], [10000, 10000], [100000, 100000], [1000000, 1000000], [10000000, 10000000], [100000000, 100000000], [1000000000, 1000000000]],k = 7) == [-1, -1, -1, -1, -1, -1, 2000000, 2000000, 2000000, 2000000]
    assert candidate(queries = [[1, 2], [2, 1], [-1, -2], [-2, -1], [1, -2], [2, -1], [-1, 2], [-2, 1]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 3) == [-1, -1, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1000000000, 1000000000], [500000000, -500000000], [-1000000000, 1000000000], [0, 0], [1, 1], [2, 2]],k = 3) == [-1, -1, 2000000000, 2000000000, 1000000000, 4]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 3) == [-1, -1, 10, 8, 6, 4, 2, 2, 2, 2, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 140, 140, 140, 140]

2025-05-22 05:54:21,313 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().resultsArray
2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(queries = [[5, 5], [4, 4], [3, 3]],k = 1) == [10, 8, 6]
    assert candidate(queries = [[-1000000000, 1000000000], [1000000000, -1000000000]],k = 1) == [2000000000, 2000000000]
    assert candidate(queries = [[-1, 1], [0, 0], [1, -1]],k = 3) == [-1, -1, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40]],k = 4) == [-1, -1, -1, 80]
    assert candidate(queries = [[1, 2], [3, 4], [2, 3], [-3, 0]],k = 2) == [-1, 7, 5, 3]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 1) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [1000000000, -1000000000], [-1000000000, 1000000000], [-1000000000, -1000000000]],k = 1) == [2000000000, 2000000000, 2000000000, 2000000000]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 1) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-100, -100], [100, -100], [-100, 100], [100, 100]],k = 2) == [-1, 200, 200, 200]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500], [600, 600], [700, 700]],k = 5) == [-1, -1, -1, -1, 1000, 1000, 1000]
    assert candidate(queries = [[-2, -3], [-4, -5], [6, 7], [8, 9], [0, 0]],k = 3) == [-1, -1, 13, 13, 9]
    assert candidate(queries = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [3, 1], [2, 3], [3, 2], [3, 3]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [1, 0], [0, -1], [-1, 0], [2, 1], [1, 2], [1, -2], [-2, 1], [-1, -2], [2, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 7) == [-1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7], [-8, 8], [-9, 9], [-10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[0, 1], [1, 0], [1, 1], [-1, -1], [-1, 0], [0, -1]],k = 3) == [-1, -1, 2, 2, 1, 1]
    assert candidate(queries = [[-5, 5], [5, -5], [0, 10], [10, 0], [-10, -10]],k = 3) == [-1, -1, 10, 10, 10]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 2000000000, 2000000000, 1000000000]
    assert candidate(queries = [[-50, -50], [-50, 50], [50, -50], [50, 50], [0, 0], [0, 100], [0, -100], [100, 0], [-100, 0]],k = 2) == [-1, 100, 100, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[-1, -2], [-2, -3], [-3, -4], [-4, -5], [-5, -6], [-6, -7], [-7, -8], [-8, -9], [-9, -10]],k = 4) == [-1, -1, -1, 9, 9, 9, 9, 9, 9]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 5) == [-1, -1, -1, -1, 5, 5, 5, 5, 5, 5]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 39]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [2, 2], [2, -2], [-2, 2], [-2, -2], [3, 3], [3, -3], [-3, 3], [-3, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[999999999, 999999999], [999999998, 999999998], [999999997, 999999997], [999999996, 999999996], [999999995, 999999995], [999999994, 999999994]],k = 5) == [-1, -1, -1, -1, 1999999998, 1999999996]
    assert candidate(queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]],k = 5) == [-1, -1, -1, -1, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]],k = 5) == [-1, -1, -1, -1, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500]],k = 1) == [200, 200, 200, 200, 200]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 1) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[-1, -1], [1, -1], [-1, 1], [1, 1], [-2, -2], [2, -2], [-2, 2], [2, 2], [-3, -3], [3, -3], [-3, 3], [3, 3]],k = 5) == [-1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 7) == [-1, -1, -1, -1, -1, -1, 7, 7, 7, 7]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14]],k = 7) == [-1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    assert candidate(queries = [[-1000, -2000], [-2000, -3000], [-3000, -4000], [-4000, -5000], [-5000, -6000], [-6000, -7000], [-7000, -8000], [-8000, -9000]],k = 3) == [-1, -1, 7000, 7000, 7000, 7000, 7000, 7000]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]],k = 11) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3]],k = 5) == [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [-10, -10], [10, -10], [-10, 10]],k = 5) == [-1, -1, -1, -1, 20]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 5) == [-1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 6) == [-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 7) == [-1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 5) == [-1, -1, -1, -1, 10, 8, 6, 4, 4, 4, 4]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80], [80, 90], [90, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 150, 150, 150]
    assert candidate(queries = [[1, 2], [2, 1], [1, -2], [-2, 1], [3, -3], [-3, 3], [2, 2], [-2, -2], [1, 1], [-1, -1]],k = 5) == [-1, -1, -1, -1, 6, 6, 4, 4, 3, 3]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3], [3, -3], [-3, 3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 8) == [-1, -1, -1, -1, -1, -1, -1, 160, 160, 160]
    assert candidate(queries = [[1, 0], [0, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13]],k = 7) == [-1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1000000000, 0], [1000000000, 0], [0, -1000000000], [0, 1000000000]],k = 3) == [-1, -1, 1000000000, 1000000000]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [1, 1], [-1, 0], [0, -1], [-1, -1], [-1, 1], [1, -1], [0, 2]],k = 5) == [-1, -1, -1, -1, 2, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 6) == [-1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 7) == [-1, -1, -1, -1, -1, -1, 1500, 1500]
    assert candidate(queries = [[-1, -2], [-3, -4], [-5, -6], [-7, -8], [-9, -10], [-11, -12], [-13, -14], [-15, -16], [-17, -18], [-19, -20]],k = 3) == [-1, -1, 11, 11, 11, 11, 11, 11, 11, 11]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0], [2, 2], [-2, -2], [2, -2], [-2, 2]],k = 4) == [-1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],k = 5) == [-1, -1, -1, -1, 0]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 200]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [0, 0], [2, 0], [0, 2], [-2, 0], [0, -2]],k = 3) == [-1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 4) == [-1, -1, -1, 80, 80, 80, 80, 80, 80, 80]
    assert candidate(queries = [[1000000, 1000000], [2000000, 2000000], [3000000, 3000000], [4000000, 4000000], [5000000, 5000000], [6000000, 6000000], [7000000, 7000000], [8000000, 8000000]],k = 4) == [-1, -1, -1, 8000000, 8000000, 8000000, 8000000, 8000000]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [1, 1], [-1, -1], [2, 2], [-2, -2]],k = 3) == [-1, -1, 2000000000, 2000000000, 2, 2, 2]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 4) == [-1, -1, -1, 8, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[-5, 4], [-4, -5], [4, 5], [5, -4], [2, 3], [3, 2], [-2, -3], [-3, -2]],k = 2) == [-1, 9, 9, 9, 9, 5, 5, 5]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [-1, 1], [1, -1]],k = 2) == [-1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 4) == [-1, -1, -1, 900, 900, 900, 900, 900]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [0, 1], [1, 0]],k = 3) == [-1, -1, 2000000000, 2000000000, 1]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-1, -1], [1, 1], [0, 2], [-2, 0], [2, 0], [0, -2]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-5, 0], [0, 5], [5, 0], [0, -5], [1, 1], [-1, -1], [1, -1], [-1, 1]],k = 3) == [-1, -1, 5, 5, 5, 5, 2, 2]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12]],k = 6) == [-1, -1, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2]],k = 5) == [-1, -1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[100, 1], [1, 100], [10, 10], [1000, 1000], [10000, 10000], [100000, 100000], [1000000, 1000000], [10000000, 10000000], [100000000, 100000000], [1000000000, 1000000000]],k = 7) == [-1, -1, -1, -1, -1, -1, 2000000, 2000000, 2000000, 2000000]
    assert candidate(queries = [[1, 2], [2, 1], [-1, -2], [-2, -1], [1, -2], [2, -1], [-1, 2], [-2, 1]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 3) == [-1, -1, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1000000000, 1000000000], [500000000, -500000000], [-1000000000, 1000000000], [0, 0], [1, 1], [2, 2]],k = 3) == [-1, -1, 2000000000, 2000000000, 1000000000, 4]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 3) == [-1, -1, 10, 8, 6, 4, 2, 2, 2, 2, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 140, 140, 140, 140]

2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().resultsArray
2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
import heapq

class Solution:
    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:
        heap = []
        result = []
        for x, y in queries:
            distance = abs(x) + abs(y)
            heapq.heappush(heap, -distance)  # Using max-heap by pushing negative values
            if len(heap) > k:
                heapq.heappop(heap)
            if len(heap) < k:
                result.append(-1)
            else:
                result.append(-heap[0])  # The smallest in max-heap is the k-th smallest
        return result
2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
import heapq

class Solution:
    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:
        heap = []
        result = []
        for x, y in queries:
            distance = abs(x) + abs(y)
            heapq.heappush(heap, -distance)  # Using max-heap by pushing negative values
            if len(heap) > k:
                heapq.heappop(heap)
            if len(heap) < k:
                result.append(-1)
            else:
                result.append(-heap[0])  # The smallest in max-heap is the k-th smallest
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(queries = [[5, 5], [4, 4], [3, 3]],k = 1) == [10, 8, 6]
    assert candidate(queries = [[-1000000000, 1000000000], [1000000000, -1000000000]],k = 1) == [2000000000, 2000000000]
    assert candidate(queries = [[-1, 1], [0, 0], [1, -1]],k = 3) == [-1, -1, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40]],k = 4) == [-1, -1, -1, 80]
    assert candidate(queries = [[1, 2], [3, 4], [2, 3], [-3, 0]],k = 2) == [-1, 7, 5, 3]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 1) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [1000000000, -1000000000], [-1000000000, 1000000000], [-1000000000, -1000000000]],k = 1) == [2000000000, 2000000000, 2000000000, 2000000000]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 1) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-100, -100], [100, -100], [-100, 100], [100, 100]],k = 2) == [-1, 200, 200, 200]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500], [600, 600], [700, 700]],k = 5) == [-1, -1, -1, -1, 1000, 1000, 1000]
    assert candidate(queries = [[-2, -3], [-4, -5], [6, 7], [8, 9], [0, 0]],k = 3) == [-1, -1, 13, 13, 9]
    assert candidate(queries = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [3, 1], [2, 3], [3, 2], [3, 3]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [1, 0], [0, -1], [-1, 0], [2, 1], [1, 2], [1, -2], [-2, 1], [-1, -2], [2, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 7) == [-1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7], [-8, 8], [-9, 9], [-10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[0, 1], [1, 0], [1, 1], [-1, -1], [-1, 0], [0, -1]],k = 3) == [-1, -1, 2, 2, 1, 1]
    assert candidate(queries = [[-5, 5], [5, -5], [0, 10], [10, 0], [-10, -10]],k = 3) == [-1, -1, 10, 10, 10]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 2000000000, 2000000000, 1000000000]
    assert candidate(queries = [[-50, -50], [-50, 50], [50, -50], [50, 50], [0, 0], [0, 100], [0, -100], [100, 0], [-100, 0]],k = 2) == [-1, 100, 100, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[-1, -2], [-2, -3], [-3, -4], [-4, -5], [-5, -6], [-6, -7], [-7, -8], [-8, -9], [-9, -10]],k = 4) == [-1, -1, -1, 9, 9, 9, 9, 9, 9]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 5) == [-1, -1, -1, -1, 5, 5, 5, 5, 5, 5]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 39]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [2, 2], [2, -2], [-2, 2], [-2, -2], [3, 3], [3, -3], [-3, 3], [-3, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[999999999, 999999999], [999999998, 999999998], [999999997, 999999997], [999999996, 999999996], [999999995, 999999995], [999999994, 999999994]],k = 5) == [-1, -1, -1, -1, 1999999998, 1999999996]
    assert candidate(queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]],k = 5) == [-1, -1, -1, -1, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]],k = 5) == [-1, -1, -1, -1, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500]],k = 1) == [200, 200, 200, 200, 200]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 1) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[-1, -1], [1, -1], [-1, 1], [1, 1], [-2, -2], [2, -2], [-2, 2], [2, 2], [-3, -3], [3, -3], [-3, 3], [3, 3]],k = 5) == [-1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 7) == [-1, -1, -1, -1, -1, -1, 7, 7, 7, 7]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14]],k = 7) == [-1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    assert candidate(queries = [[-1000, -2000], [-2000, -3000], [-3000, -4000], [-4000, -5000], [-5000, -6000], [-6000, -7000], [-7000, -8000], [-8000, -9000]],k = 3) == [-1, -1, 7000, 7000, 7000, 7000, 7000, 7000]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]],k = 11) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3]],k = 5) == [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [-10, -10], [10, -10], [-10, 10]],k = 5) == [-1, -1, -1, -1, 20]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 5) == [-1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 6) == [-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 7) == [-1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 5) == [-1, -1, -1, -1, 10, 8, 6, 4, 4, 4, 4]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80], [80, 90], [90, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 150, 150, 150]
    assert candidate(queries = [[1, 2], [2, 1], [1, -2], [-2, 1], [3, -3], [-3, 3], [2, 2], [-2, -2], [1, 1], [-1, -1]],k = 5) == [-1, -1, -1, -1, 6, 6, 4, 4, 3, 3]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3], [3, -3], [-3, 3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 8) == [-1, -1, -1, -1, -1, -1, -1, 160, 160, 160]
    assert candidate(queries = [[1, 0], [0, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13]],k = 7) == [-1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1000000000, 0], [1000000000, 0], [0, -1000000000], [0, 1000000000]],k = 3) == [-1, -1, 1000000000, 1000000000]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [1, 1], [-1, 0], [0, -1], [-1, -1], [-1, 1], [1, -1], [0, 2]],k = 5) == [-1, -1, -1, -1, 2, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 6) == [-1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 7) == [-1, -1, -1, -1, -1, -1, 1500, 1500]
    assert candidate(queries = [[-1, -2], [-3, -4], [-5, -6], [-7, -8], [-9, -10], [-11, -12], [-13, -14], [-15, -16], [-17, -18], [-19, -20]],k = 3) == [-1, -1, 11, 11, 11, 11, 11, 11, 11, 11]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0], [2, 2], [-2, -2], [2, -2], [-2, 2]],k = 4) == [-1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],k = 5) == [-1, -1, -1, -1, 0]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 200]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [0, 0], [2, 0], [0, 2], [-2, 0], [0, -2]],k = 3) == [-1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 4) == [-1, -1, -1, 80, 80, 80, 80, 80, 80, 80]
    assert candidate(queries = [[1000000, 1000000], [2000000, 2000000], [3000000, 3000000], [4000000, 4000000], [5000000, 5000000], [6000000, 6000000], [7000000, 7000000], [8000000, 8000000]],k = 4) == [-1, -1, -1, 8000000, 8000000, 8000000, 8000000, 8000000]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [1, 1], [-1, -1], [2, 2], [-2, -2]],k = 3) == [-1, -1, 2000000000, 2000000000, 2, 2, 2]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 4) == [-1, -1, -1, 8, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[-5, 4], [-4, -5], [4, 5], [5, -4], [2, 3], [3, 2], [-2, -3], [-3, -2]],k = 2) == [-1, 9, 9, 9, 9, 5, 5, 5]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [-1, 1], [1, -1]],k = 2) == [-1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 4) == [-1, -1, -1, 900, 900, 900, 900, 900]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [0, 1], [1, 0]],k = 3) == [-1, -1, 2000000000, 2000000000, 1]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-1, -1], [1, 1], [0, 2], [-2, 0], [2, 0], [0, -2]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-5, 0], [0, 5], [5, 0], [0, -5], [1, 1], [-1, -1], [1, -1], [-1, 1]],k = 3) == [-1, -1, 5, 5, 5, 5, 2, 2]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12]],k = 6) == [-1, -1, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2]],k = 5) == [-1, -1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[100, 1], [1, 100], [10, 10], [1000, 1000], [10000, 10000], [100000, 100000], [1000000, 1000000], [10000000, 10000000], [100000000, 100000000], [1000000000, 1000000000]],k = 7) == [-1, -1, -1, -1, -1, -1, 2000000, 2000000, 2000000, 2000000]
    assert candidate(queries = [[1, 2], [2, 1], [-1, -2], [-2, -1], [1, -2], [2, -1], [-1, 2], [-2, 1]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 3) == [-1, -1, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1000000000, 1000000000], [500000000, -500000000], [-1000000000, 1000000000], [0, 0], [1, 1], [2, 2]],k = 3) == [-1, -1, 2000000000, 2000000000, 1000000000, 4]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 3) == [-1, -1, 10, 8, 6, 4, 2, 2, 2, 2, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 140, 140, 140, 140]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:54:21,313 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
import heapq

class Solution:
    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:
        heap = []
        result = []
        for x, y in queries:
            distance = abs(x) + abs(y)
            heapq.heappush(heap, -distance)  # Using max-heap by pushing negative values
            if len(heap) > k:
                heapq.heappop(heap)
            if len(heap) < k:
                result.append(-1)
            else:
                result.append(-heap[0])  # The smallest in max-heap is the k-th smallest
        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(queries = [[5, 5], [4, 4], [3, 3]],k = 1) == [10, 8, 6]
    assert candidate(queries = [[-1000000000, 1000000000], [1000000000, -1000000000]],k = 1) == [2000000000, 2000000000]
    assert candidate(queries = [[-1, 1], [0, 0], [1, -1]],k = 3) == [-1, -1, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40]],k = 4) == [-1, -1, -1, 80]
    assert candidate(queries = [[1, 2], [3, 4], [2, 3], [-3, 0]],k = 2) == [-1, 7, 5, 3]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 1) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [1000000000, -1000000000], [-1000000000, 1000000000], [-1000000000, -1000000000]],k = 1) == [2000000000, 2000000000, 2000000000, 2000000000]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 1) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-100, -100], [100, -100], [-100, 100], [100, 100]],k = 2) == [-1, 200, 200, 200]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500], [600, 600], [700, 700]],k = 5) == [-1, -1, -1, -1, 1000, 1000, 1000]
    assert candidate(queries = [[-2, -3], [-4, -5], [6, 7], [8, 9], [0, 0]],k = 3) == [-1, -1, 13, 13, 9]
    assert candidate(queries = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [3, 1], [2, 3], [3, 2], [3, 3]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [1, 0], [0, -1], [-1, 0], [2, 1], [1, 2], [1, -2], [-2, 1], [-1, -2], [2, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 7) == [-1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7], [-8, 8], [-9, 9], [-10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[0, 1], [1, 0], [1, 1], [-1, -1], [-1, 0], [0, -1]],k = 3) == [-1, -1, 2, 2, 1, 1]
    assert candidate(queries = [[-5, 5], [5, -5], [0, 10], [10, 0], [-10, -10]],k = 3) == [-1, -1, 10, 10, 10]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 2000000000, 2000000000, 1000000000]
    assert candidate(queries = [[-50, -50], [-50, 50], [50, -50], [50, 50], [0, 0], [0, 100], [0, -100], [100, 0], [-100, 0]],k = 2) == [-1, 100, 100, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[-1, -2], [-2, -3], [-3, -4], [-4, -5], [-5, -6], [-6, -7], [-7, -8], [-8, -9], [-9, -10]],k = 4) == [-1, -1, -1, 9, 9, 9, 9, 9, 9]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 5) == [-1, -1, -1, -1, 5, 5, 5, 5, 5, 5]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 39]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [2, 2], [2, -2], [-2, 2], [-2, -2], [3, 3], [3, -3], [-3, 3], [-3, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[999999999, 999999999], [999999998, 999999998], [999999997, 999999997], [999999996, 999999996], [999999995, 999999995], [999999994, 999999994]],k = 5) == [-1, -1, -1, -1, 1999999998, 1999999996]
    assert candidate(queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]],k = 5) == [-1, -1, -1, -1, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]],k = 5) == [-1, -1, -1, -1, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[100, 100], [200, 200], [300, 300], [400, 400], [500, 500]],k = 1) == [200, 200, 200, 200, 200]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 1) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[-1, -1], [1, -1], [-1, 1], [1, 1], [-2, -2], [2, -2], [-2, 2], [2, 2], [-3, -3], [3, -3], [-3, 3], [3, 3]],k = 5) == [-1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]],k = 7) == [-1, -1, -1, -1, -1, -1, 7, 7, 7, 7]
    assert candidate(queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14]],k = 7) == [-1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    assert candidate(queries = [[-1000, -2000], [-2000, -3000], [-3000, -4000], [-4000, -5000], [-5000, -6000], [-6000, -7000], [-7000, -8000], [-8000, -9000]],k = 3) == [-1, -1, 7000, 7000, 7000, 7000, 7000, 7000]
    assert candidate(queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22]],k = 11) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3]],k = 5) == [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [-10, -10], [10, -10], [-10, 10]],k = 5) == [-1, -1, -1, -1, 20]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 5) == [-1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 10]
    assert candidate(queries = [[-1, 0], [0, 1], [1, 0], [0, -1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 6) == [-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 7) == [-1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 5) == [-1, -1, -1, -1, 10, 8, 6, 4, 4, 4, 4]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-2, 0], [0, -2], [2, 0], [0, 2], [-3, 0], [0, -3], [3, 0], [0, 3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80], [80, 90], [90, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 150, 150, 150]
    assert candidate(queries = [[1, 2], [2, 1], [1, -2], [-2, 1], [3, -3], [-3, 3], [2, 2], [-2, -2], [1, 1], [-1, -1]],k = 5) == [-1, -1, -1, -1, 6, 6, 4, 4, 3, 3]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3], [3, -3], [-3, 3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 8) == [-1, -1, -1, -1, -1, -1, -1, 160, 160, 160]
    assert candidate(queries = [[1, 0], [0, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13]],k = 7) == [-1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1000000000, 0], [1000000000, 0], [0, -1000000000], [0, 1000000000]],k = 3) == [-1, -1, 1000000000, 1000000000]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [1, 1], [-1, 0], [0, -1], [-1, -1], [-1, 1], [1, -1], [0, 2]],k = 5) == [-1, -1, -1, -1, 2, 1, 1, 1, 1, 1]
    assert candidate(queries = [[0, 0], [10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 6) == [-1, -1, -1, -1, -1, 100, 100, 100, 100, 100, 100]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 7) == [-1, -1, -1, -1, -1, -1, 1500, 1500]
    assert candidate(queries = [[-1, -2], [-3, -4], [-5, -6], [-7, -8], [-9, -10], [-11, -12], [-13, -14], [-15, -16], [-17, -18], [-19, -20]],k = 3) == [-1, -1, 11, 11, 11, 11, 11, 11, 11, 11]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0], [2, 2], [-2, -2], [2, -2], [-2, 2]],k = 4) == [-1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],k = 5) == [-1, -1, -1, -1, 0]
    assert candidate(queries = [[1000000000, 0], [0, 1000000000], [-1000000000, 0], [0, -1000000000], [500000000, 500000000], [-500000000, -500000000]],k = 2) == [-1, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 200]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [0, 0], [2, 0], [0, 2], [-2, 0], [0, -2]],k = 3) == [-1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-10, -10], [-20, -20], [-30, -30], [-40, -40], [-50, -50], [-60, -60], [-70, -70], [-80, -80], [-90, -90], [-100, -100]],k = 4) == [-1, -1, -1, 80, 80, 80, 80, 80, 80, 80]
    assert candidate(queries = [[1000000, 1000000], [2000000, 2000000], [3000000, 3000000], [4000000, 4000000], [5000000, 5000000], [6000000, 6000000], [7000000, 7000000], [8000000, 8000000]],k = 4) == [-1, -1, -1, 8000000, 8000000, 8000000, 8000000, 8000000]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [1, 1], [-1, -1], [2, 2], [-2, -2]],k = 3) == [-1, -1, 2000000000, 2000000000, 2, 2, 2]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 4) == [-1, -1, -1, 8, 8, 8, 8, 8, 8, 8]
    assert candidate(queries = [[-5, 4], [-4, -5], [4, 5], [5, -4], [2, 3], [3, 2], [-2, -3], [-3, -2]],k = 2) == [-1, 9, 9, 9, 9, 5, 5, 5]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [-1, 1], [1, -1]],k = 2) == [-1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[100, 200], [200, 300], [300, 400], [400, 500], [500, 600], [600, 700], [700, 800], [800, 900]],k = 4) == [-1, -1, -1, 900, 900, 900, 900, 900]
    assert candidate(queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20]],k = 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
    assert candidate(queries = [[1, 2], [2, 1], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],k = 5) == [-1, -1, -1, -1, 10, 10, 10, 10, 10, 10]
    assert candidate(queries = [[1000000000, -1000000000], [-1000000000, 1000000000], [0, 0], [0, 1], [1, 0]],k = 3) == [-1, -1, 2000000000, 2000000000, 1]
    assert candidate(queries = [[1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2], [2, -2], [-2, 2], [3, 3], [-3, -3]],k = 6) == [-1, -1, -1, -1, -1, 4, 4, 4, 4, 4]
    assert candidate(queries = [[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [2, 0], [0, 2], [-2, 0], [0, -2], [3, 0], [0, 3], [-3, 0], [0, -3]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[1000000000, 1000000000], [-1000000000, -1000000000], [500000000, 500000000]],k = 2) == [-1, 2000000000, 2000000000]
    assert candidate(queries = [[-1, 0], [0, -1], [1, 0], [0, 1], [-1, -1], [1, 1], [0, 2], [-2, 0], [2, 0], [0, -2]],k = 4) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]
    assert candidate(queries = [[-5, 0], [0, 5], [5, 0], [0, -5], [1, 1], [-1, -1], [1, -1], [-1, 1]],k = 3) == [-1, -1, 5, 5, 5, 5, 2, 2]
    assert candidate(queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12]],k = 6) == [-1, -1, -1, -1, -1, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1], [2, 2], [-2, -2]],k = 5) == [-1, -1, -1, -1, 2, 2, 2, 2, 2, 2]
    assert candidate(queries = [[100, 1], [1, 100], [10, 10], [1000, 1000], [10000, 10000], [100000, 100000], [1000000, 1000000], [10000000, 10000000], [100000000, 100000000], [1000000000, 1000000000]],k = 7) == [-1, -1, -1, -1, -1, -1, 2000000, 2000000, 2000000, 2000000]
    assert candidate(queries = [[1, 2], [2, 1], [-1, -2], [-2, -1], [1, -2], [2, -1], [-1, 2], [-2, 1]],k = 3) == [-1, -1, 3, 3, 3, 3, 3, 3]
    assert candidate(queries = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]],k = 3) == [-1, -1, 6, 6, 6, 6, 6, 6, 6, 6]
    assert candidate(queries = [[1000000000, 1000000000], [500000000, -500000000], [-1000000000, 1000000000], [0, 0], [1, 1], [2, 2]],k = 3) == [-1, -1, 2000000000, 2000000000, 1000000000, 4]
    assert candidate(queries = [[-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]],k = 3) == [-1, -1, 10, 8, 6, 4, 2, 2, 2, 2, 2]
    assert candidate(queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100]],k = 7) == [-1, -1, -1, -1, -1, -1, 140, 140, 140, 140]


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().resultsArray)

2025-05-22 05:54:35,029 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.715047597885132,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:54:35,029 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:54:35,029 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:54:35,029 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:54:35,030 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427546320 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:54:35,030 [DEBUG] filelock (_api.py:334): Lock 140657427546320 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:54:35,030 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:54:35,204 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427546320 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:54:35,204 [DEBUG] filelock (_api.py:367): Lock 140657427546320 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:54:35,204 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:54:35,205 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:54:37,434 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/k-th-nearest-obstacle-queries.json
2025-05-22 05:54:37,434 [INFO] root (run_leetcode_solver.py:373): Processed problem k-th-nearest-obstacle-queries in 64.94 seconds
2025-05-22 05:54:37,434 [INFO] root (run_leetcode_solver.py:348): Processing problem ID maximize-score-of-numbers-in-ranges with model deepseek-r1-distill
2025-05-22 05:54:37,560 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem maximize-score-of-numbers-in-ranges
2025-05-22 05:54:37,561 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:54:37,745 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:37,745 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:37,745 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:37,745 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:56,824 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:56,825 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:56,825 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:56,825 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:56,825 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (897 chars)
2025-05-22 05:54:57,008 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:54:57,009 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:57,009 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:54:57,009 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:16,712 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:16,712 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:16,712 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:16,713 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:16,713 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (891 chars)
2025-05-22 05:55:16,895 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:16,895 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:16,896 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:16,896 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:34,171 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:34,171 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:34,171 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:34,171 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:34,171 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (914 chars)
2025-05-22 05:55:34,172 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maxPossibleScore(self, start: List[int], d: int) -> int:
        start.sort()
        n = len(start)
        left = 0
        right = (start[-1] + d) - start[0]
        max_score = 0
        
        def is_possible(mid):
            prev = start[0]
            for i in range(1, n):
                current_start = start[i]
                current_end = current_start + d
                if prev + mid <= current_start:
                    prev = current_start
                elif prev + mid <= current_end:
                    prev = prev + mid
                else:
                    return False
            return True
        
        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                max_score = mid
                left = mid + 1
            else:
                right = mid - 1
        return max_score
2025-05-22 05:55:34,172 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6
    assert candidate(start = [1, 10, 20, 30],d = 9) == 12
    assert candidate(start = [10, 20, 30, 40, 50],d = 15) == 13
    assert candidate(start = [100, 200, 300, 400, 500],d = 50) == 112
    assert candidate(start = [2, 6, 13, 13],d = 5) == 5
    assert candidate(start = [1, 1, 1, 1],d = 10) == 3
    assert candidate(start = [5, 5, 5, 5, 5],d = 0) == 0
    assert candidate(start = [10, 20, 30, 40, 50, 60],d = 15) == 13
    assert candidate(start = [1, 2, 3, 4, 5],d = 1) == 1
    assert candidate(start = [1, 5, 9, 14],d = 3) == 5
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 1) == 1
    assert candidate(start = [0, 1000000000],d = 999999999) == 1999999999
    assert candidate(start = [6, 0, 3],d = 2) == 4
    assert candidate(start = [1, 3, 5, 7, 9],d = 2) == 2
    assert candidate(start = [100, 200, 300, 400],d = 50) == 116
    assert candidate(start = [0, 0, 0, 0],d = 10) == 3
    assert candidate(start = [1, 1, 1],d = 10) == 5
    assert candidate(start = [0, 1000000000],d = 1000000000) == 2000000000
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 0) == 1
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 2) == 1
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 50) == 105
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 100) == 111
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],d = 1) == 2
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 1) == 0
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190, 205, 220, 235, 250, 265, 280, 295],d = 15) == 15
    assert candidate(start = [0, 1000000000, 500000000, 750000000, 250000000],d = 1000000000) == 500000000
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 7
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384],d = 1) == 2
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],d = 5) == 5
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1200000000
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700],d = 50) == 108
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 10) == 100
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55],d = 1) == 3
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 1) == 1
    assert candidate(start = [1, 1000000000, 2, 1000000001, 3, 1000000002],d = 100000000) == 50000001
    assert candidate(start = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],d = 1) == 2
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000],d = 100) == 105
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1) == 10
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],d = 10) == 11
    assert candidate(start = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105],d = 1) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [0, 0, 0, 0, 0, 0],d = 50) == 10
    assert candidate(start = [1000000000, 2000000000, 3000000000],d = 1000000000) == 1500000000
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],d = 1) == 1
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000],d = 1000000000) == 1200000000
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 11
    assert candidate(start = [500000000, 1000000000, 1500000000, 2000000000, 2500000000, 3000000000, 3500000000, 4000000000, 4500000000, 5000000000],d = 500000000) == 555555555
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1000000000) == 137499999
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325],d = 1) == 3
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 111111111
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 9) == 10
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 1000000000) == 111111111
    assert candidate(start = [1000000000, 999999900, 999999800, 999999700, 999999600, 999999500],d = 50) == 110
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1250000000
    assert candidate(start = [1, 10, 100, 1000, 10000],d = 999) == 549
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],d = 2) == 1
    assert candidate(start = [1, 5, 10, 20, 25, 30],d = 10) == 7
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 5) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [5, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 257, 263, 269, 275, 281, 287, 293, 299],d = 6) == 6
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 9) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125],d = 10) == 10
    assert candidate(start = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38],d = 3) == 4
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 3) == 4
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 15) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 2) == 2
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],d = 10) == 5
    assert candidate(start = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],d = 2) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95],d = 10) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99],d = 2) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 11
    assert candidate(start = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000],d = 100000) == 1011111
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 10) == 10
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49],d = 4) == 4
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65],d = 20) == 13
    assert candidate(start = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80],d = 10) == 9
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 1) == 2
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57],d = 3) == 4
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 50) == 103
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000],d = 999999999) == 1333333333
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 4) == 4
    assert candidate(start = [10, 12, 15, 18, 22, 26, 30, 35, 40, 45],d = 5) == 4
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 0) == 0
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 7
    assert candidate(start = [0, 1000000000, 500000000, 750000000],d = 1000000000) == 666666666
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77],d = 2) == 4
    assert candidate(start = [100, 250, 400, 550, 700, 850, 1000, 1150, 1300, 1450, 1600, 1750],d = 50) == 154
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 10) == 6
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 5) == 10
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 10) == 0
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 1) == 2
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],d = 1) == 1
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 2) == 2
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],d = 1) == 1
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 5) == 10
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 0) == 5
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2

2025-05-22 05:55:34,172 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maxPossibleScore
2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6
    assert candidate(start = [1, 10, 20, 30],d = 9) == 12
    assert candidate(start = [10, 20, 30, 40, 50],d = 15) == 13
    assert candidate(start = [100, 200, 300, 400, 500],d = 50) == 112
    assert candidate(start = [2, 6, 13, 13],d = 5) == 5
    assert candidate(start = [1, 1, 1, 1],d = 10) == 3
    assert candidate(start = [5, 5, 5, 5, 5],d = 0) == 0
    assert candidate(start = [10, 20, 30, 40, 50, 60],d = 15) == 13
    assert candidate(start = [1, 2, 3, 4, 5],d = 1) == 1
    assert candidate(start = [1, 5, 9, 14],d = 3) == 5
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 1) == 1
    assert candidate(start = [0, 1000000000],d = 999999999) == 1999999999
    assert candidate(start = [6, 0, 3],d = 2) == 4
    assert candidate(start = [1, 3, 5, 7, 9],d = 2) == 2
    assert candidate(start = [100, 200, 300, 400],d = 50) == 116
    assert candidate(start = [0, 0, 0, 0],d = 10) == 3
    assert candidate(start = [1, 1, 1],d = 10) == 5
    assert candidate(start = [0, 1000000000],d = 1000000000) == 2000000000
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 0) == 1
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 2) == 1
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 50) == 105
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 100) == 111
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],d = 1) == 2
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 1) == 0
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190, 205, 220, 235, 250, 265, 280, 295],d = 15) == 15
    assert candidate(start = [0, 1000000000, 500000000, 750000000, 250000000],d = 1000000000) == 500000000
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 7
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384],d = 1) == 2
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],d = 5) == 5
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1200000000
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700],d = 50) == 108
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 10) == 100
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55],d = 1) == 3
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 1) == 1
    assert candidate(start = [1, 1000000000, 2, 1000000001, 3, 1000000002],d = 100000000) == 50000001
    assert candidate(start = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],d = 1) == 2
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000],d = 100) == 105
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1) == 10
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],d = 10) == 11
    assert candidate(start = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105],d = 1) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [0, 0, 0, 0, 0, 0],d = 50) == 10
    assert candidate(start = [1000000000, 2000000000, 3000000000],d = 1000000000) == 1500000000
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],d = 1) == 1
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000],d = 1000000000) == 1200000000
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 11
    assert candidate(start = [500000000, 1000000000, 1500000000, 2000000000, 2500000000, 3000000000, 3500000000, 4000000000, 4500000000, 5000000000],d = 500000000) == 555555555
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1000000000) == 137499999
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325],d = 1) == 3
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 111111111
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 9) == 10
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 1000000000) == 111111111
    assert candidate(start = [1000000000, 999999900, 999999800, 999999700, 999999600, 999999500],d = 50) == 110
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1250000000
    assert candidate(start = [1, 10, 100, 1000, 10000],d = 999) == 549
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],d = 2) == 1
    assert candidate(start = [1, 5, 10, 20, 25, 30],d = 10) == 7
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 5) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [5, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 257, 263, 269, 275, 281, 287, 293, 299],d = 6) == 6
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 9) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125],d = 10) == 10
    assert candidate(start = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38],d = 3) == 4
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 3) == 4
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 15) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 2) == 2
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],d = 10) == 5
    assert candidate(start = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],d = 2) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95],d = 10) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99],d = 2) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 11
    assert candidate(start = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000],d = 100000) == 1011111
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 10) == 10
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49],d = 4) == 4
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65],d = 20) == 13
    assert candidate(start = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80],d = 10) == 9
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 1) == 2
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57],d = 3) == 4
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 50) == 103
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000],d = 999999999) == 1333333333
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 4) == 4
    assert candidate(start = [10, 12, 15, 18, 22, 26, 30, 35, 40, 45],d = 5) == 4
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 0) == 0
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 7
    assert candidate(start = [0, 1000000000, 500000000, 750000000],d = 1000000000) == 666666666
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77],d = 2) == 4
    assert candidate(start = [100, 250, 400, 550, 700, 850, 1000, 1150, 1300, 1450, 1600, 1750],d = 50) == 154
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 10) == 6
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 5) == 10
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 10) == 0
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 1) == 2
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],d = 1) == 1
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 2) == 2
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],d = 1) == 1
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 5) == 10
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 0) == 5
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2

2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maxPossibleScore
2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maxPossibleScore(self, start: List[int], d: int) -> int:
        start.sort()
        n = len(start)
        left = 0
        right = (start[-1] + d) - start[0]
        max_score = 0

        def is_possible(mid):
            prev = start[0]
            for i in range(1, n):
                current_start = start[i]
                current_end = current_start + d
                if prev + mid <= current_start:
                    prev = current_start
                elif prev + mid <= current_end:
                    prev = prev + mid
                else:
                    return False
            return True

        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                max_score = mid
                left = mid + 1
            else:
                right = mid - 1
        return max_score
2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxPossibleScore(self, start: List[int], d: int) -> int:
        start.sort()
        n = len(start)
        left = 0
        right = (start[-1] + d) - start[0]
        max_score = 0

        def is_possible(mid):
            prev = start[0]
            for i in range(1, n):
                current_start = start[i]
                current_end = current_start + d
                if prev + mid <= current_start:
                    prev = current_start
                elif prev + mid <= current_end:
                    prev = prev + mid
                else:
                    return False
            return True

        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                max_score = mid
                left = mid + 1
            else:
                right = mid - 1
        return max_score

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6
    assert candidate(start = [1, 10, 20, 30],d = 9) == 12
    assert candidate(start = [10, 20, 30, 40, 50],d = 15) == 13
    assert candidate(start = [100, 200, 300, 400, 500],d = 50) == 112
    assert candidate(start = [2, 6, 13, 13],d = 5) == 5
    assert candidate(start = [1, 1, 1, 1],d = 10) == 3
    assert candidate(start = [5, 5, 5, 5, 5],d = 0) == 0
    assert candidate(start = [10, 20, 30, 40, 50, 60],d = 15) == 13
    assert candidate(start = [1, 2, 3, 4, 5],d = 1) == 1
    assert candidate(start = [1, 5, 9, 14],d = 3) == 5
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 1) == 1
    assert candidate(start = [0, 1000000000],d = 999999999) == 1999999999
    assert candidate(start = [6, 0, 3],d = 2) == 4
    assert candidate(start = [1, 3, 5, 7, 9],d = 2) == 2
    assert candidate(start = [100, 200, 300, 400],d = 50) == 116
    assert candidate(start = [0, 0, 0, 0],d = 10) == 3
    assert candidate(start = [1, 1, 1],d = 10) == 5
    assert candidate(start = [0, 1000000000],d = 1000000000) == 2000000000
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 0) == 1
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 2) == 1
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 50) == 105
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 100) == 111
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],d = 1) == 2
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 1) == 0
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190, 205, 220, 235, 250, 265, 280, 295],d = 15) == 15
    assert candidate(start = [0, 1000000000, 500000000, 750000000, 250000000],d = 1000000000) == 500000000
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 7
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384],d = 1) == 2
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],d = 5) == 5
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1200000000
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700],d = 50) == 108
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 10) == 100
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55],d = 1) == 3
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 1) == 1
    assert candidate(start = [1, 1000000000, 2, 1000000001, 3, 1000000002],d = 100000000) == 50000001
    assert candidate(start = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],d = 1) == 2
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000],d = 100) == 105
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1) == 10
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],d = 10) == 11
    assert candidate(start = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105],d = 1) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [0, 0, 0, 0, 0, 0],d = 50) == 10
    assert candidate(start = [1000000000, 2000000000, 3000000000],d = 1000000000) == 1500000000
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],d = 1) == 1
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000],d = 1000000000) == 1200000000
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 11
    assert candidate(start = [500000000, 1000000000, 1500000000, 2000000000, 2500000000, 3000000000, 3500000000, 4000000000, 4500000000, 5000000000],d = 500000000) == 555555555
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1000000000) == 137499999
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325],d = 1) == 3
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 111111111
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 9) == 10
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 1000000000) == 111111111
    assert candidate(start = [1000000000, 999999900, 999999800, 999999700, 999999600, 999999500],d = 50) == 110
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1250000000
    assert candidate(start = [1, 10, 100, 1000, 10000],d = 999) == 549
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],d = 2) == 1
    assert candidate(start = [1, 5, 10, 20, 25, 30],d = 10) == 7
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 5) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [5, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 257, 263, 269, 275, 281, 287, 293, 299],d = 6) == 6
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 9) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125],d = 10) == 10
    assert candidate(start = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38],d = 3) == 4
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 3) == 4
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 15) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 2) == 2
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],d = 10) == 5
    assert candidate(start = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],d = 2) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95],d = 10) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99],d = 2) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 11
    assert candidate(start = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000],d = 100000) == 1011111
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 10) == 10
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49],d = 4) == 4
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65],d = 20) == 13
    assert candidate(start = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80],d = 10) == 9
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 1) == 2
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57],d = 3) == 4
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 50) == 103
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000],d = 999999999) == 1333333333
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 4) == 4
    assert candidate(start = [10, 12, 15, 18, 22, 26, 30, 35, 40, 45],d = 5) == 4
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 0) == 0
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 7
    assert candidate(start = [0, 1000000000, 500000000, 750000000],d = 1000000000) == 666666666
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77],d = 2) == 4
    assert candidate(start = [100, 250, 400, 550, 700, 850, 1000, 1150, 1300, 1450, 1600, 1750],d = 50) == 154
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 10) == 6
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 5) == 10
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 10) == 0
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 1) == 2
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],d = 1) == 1
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 2) == 2
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],d = 1) == 1
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 5) == 10
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 0) == 5
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxPossibleScore)

2025-05-22 05:55:34,172 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxPossibleScore(self, start: List[int], d: int) -> int:
        start.sort()
        n = len(start)
        left = 0
        right = (start[-1] + d) - start[0]
        max_score = 0

        def is_possible(mid):
            prev = start[0]
            for i in range(1, n):
                current_start = start[i]
                current_end = current_start + d
                if prev + mid <= current_start:
                    prev = current_start
                elif prev + mid <= current_end:
                    prev = prev + mid
                else:
                    return False
            return True

        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                max_score = mid
                left = mid + 1
            else:
                right = mid - 1
        return max_score

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6
    assert candidate(start = [1, 10, 20, 30],d = 9) == 12
    assert candidate(start = [10, 20, 30, 40, 50],d = 15) == 13
    assert candidate(start = [100, 200, 300, 400, 500],d = 50) == 112
    assert candidate(start = [2, 6, 13, 13],d = 5) == 5
    assert candidate(start = [1, 1, 1, 1],d = 10) == 3
    assert candidate(start = [5, 5, 5, 5, 5],d = 0) == 0
    assert candidate(start = [10, 20, 30, 40, 50, 60],d = 15) == 13
    assert candidate(start = [1, 2, 3, 4, 5],d = 1) == 1
    assert candidate(start = [1, 5, 9, 14],d = 3) == 5
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 1) == 1
    assert candidate(start = [0, 1000000000],d = 999999999) == 1999999999
    assert candidate(start = [6, 0, 3],d = 2) == 4
    assert candidate(start = [1, 3, 5, 7, 9],d = 2) == 2
    assert candidate(start = [100, 200, 300, 400],d = 50) == 116
    assert candidate(start = [0, 0, 0, 0],d = 10) == 3
    assert candidate(start = [1, 1, 1],d = 10) == 5
    assert candidate(start = [0, 1000000000],d = 1000000000) == 2000000000
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 0) == 1
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 2) == 1
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 50) == 105
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],d = 100) == 111
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],d = 1) == 2
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 1) == 0
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190, 205, 220, 235, 250, 265, 280, 295],d = 15) == 15
    assert candidate(start = [0, 1000000000, 500000000, 750000000, 250000000],d = 1000000000) == 500000000
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 7
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384],d = 1) == 2
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],d = 5) == 5
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1200000000
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700],d = 50) == 108
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 10) == 100
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55],d = 1) == 3
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],d = 1) == 1
    assert candidate(start = [1, 1000000000, 2, 1000000001, 3, 1000000002],d = 100000000) == 50000001
    assert candidate(start = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30],d = 1) == 2
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000],d = 100) == 105
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1) == 10
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90],d = 10) == 11
    assert candidate(start = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105],d = 1) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [0, 0, 0, 0, 0, 0],d = 50) == 10
    assert candidate(start = [1000000000, 2000000000, 3000000000],d = 1000000000) == 1500000000
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],d = 1) == 1
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000],d = 1000000000) == 1200000000
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 11
    assert candidate(start = [500000000, 1000000000, 1500000000, 2000000000, 2500000000, 3000000000, 3500000000, 4000000000, 4500000000, 5000000000],d = 500000000) == 555555555
    assert candidate(start = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000],d = 1000000000) == 137499999
    assert candidate(start = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325],d = 1) == 3
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 111111111
    assert candidate(start = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 9) == 10
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 1000000000) == 111111111
    assert candidate(start = [1000000000, 999999900, 999999800, 999999700, 999999600, 999999500],d = 50) == 110
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000],d = 1000000000) == 1250000000
    assert candidate(start = [1, 10, 100, 1000, 10000],d = 999) == 549
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],d = 2) == 1
    assert candidate(start = [1, 5, 10, 20, 25, 30],d = 10) == 7
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 5) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1) == 0
    assert candidate(start = [5, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 257, 263, 269, 275, 281, 287, 293, 299],d = 6) == 6
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],d = 9) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125],d = 10) == 10
    assert candidate(start = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38],d = 3) == 4
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 3) == 4
    assert candidate(start = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 15) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 2) == 2
    assert candidate(start = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512],d = 10) == 5
    assert candidate(start = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40],d = 2) == 2
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95],d = 10) == 11
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99],d = 2) == 2
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 100) == 11
    assert candidate(start = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000],d = 100000) == 1011111
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 10) == 10
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49],d = 4) == 4
    assert candidate(start = [5, 15, 25, 35, 45, 55, 65],d = 20) == 13
    assert candidate(start = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80],d = 10) == 9
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 1) == 2
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57],d = 3) == 4
    assert candidate(start = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],d = 50) == 103
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [0, 1000000000, 2000000000, 3000000000],d = 999999999) == 1333333333
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],d = 10) == 10
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 1000000000) == 52631578
    assert candidate(start = [1, 5, 9, 13, 17, 21],d = 4) == 4
    assert candidate(start = [10, 12, 15, 18, 22, 26, 30, 35, 40, 45],d = 5) == 4
    assert candidate(start = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],d = 0) == 0
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 100) == 7
    assert candidate(start = [0, 1000000000, 500000000, 750000000],d = 1000000000) == 666666666
    assert candidate(start = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77],d = 2) == 4
    assert candidate(start = [100, 250, 400, 550, 700, 850, 1000, 1150, 1300, 1450, 1600, 1750],d = 50) == 154
    assert candidate(start = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],d = 0) == 0
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 10) == 6
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],d = 5) == 10
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 10) == 11
    assert candidate(start = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],d = 10) == 0
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29],d = 1) == 2
    assert candidate(start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],d = 1) == 1
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19],d = 2) == 2
    assert candidate(start = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],d = 1) == 1
    assert candidate(start = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],d = 5) == 10
    assert candidate(start = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],d = 0) == 5
    assert candidate(start = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39],d = 1) == 2


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxPossibleScore)

2025-05-22 05:55:47,891 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.718691349029541,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:55:47,892 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 05:55:47,892 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:55:47,892 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:55:47,892 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427546416 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:55:47,893 [DEBUG] filelock (_api.py:334): Lock 140657427546416 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:55:47,893 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:55:48,068 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427546416 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:55:48,068 [DEBUG] filelock (_api.py:367): Lock 140657427546416 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:55:48,068 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:55:48,069 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:55:50,015 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/maximize-score-of-numbers-in-ranges.json
2025-05-22 05:55:50,015 [INFO] root (run_leetcode_solver.py:373): Processed problem maximize-score-of-numbers-in-ranges in 72.47 seconds
2025-05-22 05:55:50,015 [INFO] root (run_leetcode_solver.py:348): Processing problem ID reach-end-of-array-with-max-score with model deepseek-r1-distill
2025-05-22 05:55:50,141 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem reach-end-of-array-with-max-score
2025-05-22 05:55:50,142 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:55:50,326 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:55:50,326 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:50,327 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:55:50,327 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:17,287 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:17,287 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:17,288 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:17,288 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:17,288 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (558 chars)
2025-05-22 05:56:17,470 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:17,470 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:17,470 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:17,470 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:27,807 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:27,808 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:27,808 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:27,808 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:27,808 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (284 chars)
2025-05-22 05:56:27,991 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:27,991 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:27,991 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:27,991 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:39,455 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:39,455 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:39,455 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:39,455 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:39,455 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (341 chars)
2025-05-22 05:56:39,456 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        max_score = 0
        current = 0
        while current < n - 1:
            max_jump = 0
            best_next = current + 1
            for j in range(current + 1, n):
                if (j - current) * nums[current] > max_jump:
                    max_jump = (j - current) * nums[current]
                    best_next = j
            max_score += max_jump
            current = best_next
        return max_score
2025-05-22 05:56:39,456 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:56:39,456 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        max_score = 0
        current = 0
        while current < n - 1:
            max_jump = 0
            best_next = current + 1
            for j in range(current + 1, n):
                if (j - current) * nums[current] > max_jump:
                    max_jump = (j - current) * nums[current]
                    best_next = j
            max_score += max_jump
            current = best_next
        return max_score
2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        max_score = 0
        current = 0
        while current < n - 1:
            max_jump = 0
            best_next = current + 1
            for j in range(current + 1, n):
                if (j - current) * nums[current] > max_jump:
                    max_jump = (j - current) * nums[current]
                    best_next = j
            max_score += max_jump
            current = best_next
        return max_score

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:56:39,456 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        max_score = 0
        current = 0
        while current < n - 1:
            max_jump = 0
            best_next = current + 1
            for j in range(current + 1, n):
                if (j - current) * nums[current] > max_jump:
                    max_jump = (j - current) * nums[current]
                    best_next = j
            max_score += max_jump
            current = best_next
        return max_score

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:56:53,374 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpnxn3sjj_.py\", line 204, in <module>\n    check(Solution().findMaximumScore)\n  File \"/scratch/local/21926554/tmpnxn3sjj_.py\", line 101, in check\n    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpnxn3sjj_.py` failed. (See above for error)\n",
  "execution_time": 13.916973114013672,
  "failed_tests": [
    {
      "input": "nums = [2, 3, 5, 6, 7, 8]",
      "expected": "23",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpnxn3sjj_.py\", line 204, in <module>\n    check(Solution().findMaximumScore)\n  File \"/scratch/local/21926554/tmpnxn3sjj_.py\", line 101, in check\n    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpnxn3sjj_.py` failed. (See above for error)"
}
2025-05-22 05:56:53,374 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 05:56:53,374 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 05:56:53,577 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:56:53,578 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:53,578 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:56:53,578 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:57:36,235 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:57:36,235 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:57:36,235 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:57:36,236 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:57:36,236 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (473 chars)
2025-05-22 05:57:36,418 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:57:36,418 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:57:36,419 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:57:36,419 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:15,029 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:15,029 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:15,029 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:15,030 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:15,030 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (303 chars)
2025-05-22 05:58:15,212 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:15,213 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:15,213 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:15,213 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:39,563 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:39,563 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:39,564 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:58:39,564 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:58:39,564 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (301 chars)
2025-05-22 05:58:39,564 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        dp[-1] = 0
        for i in range(n-2, -1, -1):
            max_score = 0
            for j in range(i+1, n):
                current_score = (j - i) * nums[i] + dp[j]
                if current_score > max_score:
                    max_score = current_score
            dp[i] = max_score
        return dp[0]
2025-05-22 05:58:39,564 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:58:39,564 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        dp[-1] = 0
        for i in range(n-2, -1, -1):
            max_score = 0
            for j in range(i+1, n):
                current_score = (j - i) * nums[i] + dp[j]
                if current_score > max_score:
                    max_score = current_score
            dp[i] = max_score
        return dp[0]
2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        dp[-1] = 0
        for i in range(n-2, -1, -1):
            max_score = 0
            for j in range(i+1, n):
                current_score = (j - i) * nums[i] + dp[j]
                if current_score > max_score:
                    max_score = current_score
            dp[i] = max_score
        return dp[0]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:58:39,564 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        dp[-1] = 0
        for i in range(n-2, -1, -1):
            max_score = 0
            for j in range(i+1, n):
                current_score = (j - i) * nums[i] + dp[j]
                if current_score > max_score:
                    max_score = current_score
            dp[i] = max_score
        return dp[0]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:58:53,676 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 14.111162185668945,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:58:53,676 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 1_1 (depth 1)
2025-05-22 05:58:53,677 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i + 1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]
2025-05-22 05:58:53,677 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:58:53,677 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i + 1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]
2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i + 1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:58:53,677 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i + 1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:59:07,444 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.765978574752808,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:59:07,444 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 1_2 (depth 1)
2025-05-22 05:59:07,444 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i+1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]
2025-05-22 05:59:07,444 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:59:07,444 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:59:07,444 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 05:59:07,444 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70

2025-05-22 05:59:07,444 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().findMaximumScore
2025-05-22 05:59:07,444 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i+1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]
2025-05-22 05:59:07,445 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i+1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:59:07,445 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        dp = [0] * n
        for i in range(n):
            for j in range(i+1, n):
                dp[j] = max(dp[j], dp[i] + (j - i) * nums[i])
        return dp[-1]

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [2, 3, 5, 6, 7, 8]) == 23
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 90
    assert candidate(nums = [2, 4, 6, 8, 10]) == 20
    assert candidate(nums = [4, 3, 1, 3, 2]) == 16
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [2, 1, 4, 5, 3]) == 13
    assert candidate(nums = [1, 3, 1, 5]) == 7
    assert candidate(nums = [10, 20, 30, 40, 50]) == 100
    assert candidate(nums = [5, 5, 5, 5, 5]) == 20
    assert candidate(nums = [5, 6, 7, 8, 9]) == 26
    assert candidate(nums = [100000, 1, 100000, 1, 100000]) == 400000
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1]) == 6
    assert candidate(nums = [10, 9, 8, 7, 6]) == 40
    assert candidate(nums = [1, 2, 3, 4, 5]) == 10
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [1, 1, 1, 1, 1]) == 4
    assert candidate(nums = [2, 3, 6, 1, 5]) == 17
    assert candidate(nums = [5, 4, 3, 2, 1]) == 20
    assert candidate(nums = [10, 10, 10, 10, 10]) == 40
    assert candidate(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 511
    assert candidate(nums = [1, 10, 100, 1000, 10000, 100000, 1, 1, 1, 1]) == 411111
    assert candidate(nums = [1, 5, 3, 7, 9, 2, 4, 8, 6, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 163
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 380
    assert candidate(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 100
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 72
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]) == 595
    assert candidate(nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(nums = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 875
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 19
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 135
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [100000, 100000, 100000, 100000, 100000]) == 400000
    assert candidate(nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 870
    assert candidate(nums = [100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1900
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 180
    assert candidate(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]) == 88
    assert candidate(nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 171
    assert candidate(nums = [9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1]) == 171
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1]) == 501
    assert candidate(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 100
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 900000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 196
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 19
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 725
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 10]) == 60
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]) == 81
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 235
    assert candidate(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 171
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [2, 3, 5, 1, 4, 6, 2, 3, 1]) == 38
    assert candidate(nums = [50, 25, 12, 6, 3, 1, 1, 1, 1, 1]) == 450
    assert candidate(nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]) == 891
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 435
    assert candidate(nums = [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5]) == 63
    assert candidate(nums = [1, 2, 3, 10, 5, 1, 2, 3, 4, 1]) == 66
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]) == 9
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 95
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1000]) == 95
    assert candidate(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 90
    assert candidate(nums = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1900
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [1, 100, 1, 1, 1, 100, 1, 1, 1, 1]) == 801
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 45, 40, 35, 30, 25]) == 475
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 105
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]) == 3000
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100]) == 210
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 14
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 144
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 29
    assert candidate(nums = [5, 3, 9, 2, 8, 6, 1, 7, 4, 10]) == 73
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 190
    assert candidate(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 60
    assert candidate(nums = [25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 300
    assert candidate(nums = [100, 10, 20, 30, 40, 50, 60, 70, 80, 90]) == 900
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9
    assert candidate(nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 900
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 145
    assert candidate(nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 801
    assert candidate(nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]) == 350
    assert candidate(nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]) == 406
    assert candidate(nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 950
    assert candidate(nums = [1, 5, 3, 4, 2, 6, 8, 7, 9, 10]) == 52
    assert candidate(nums = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1]) == 900
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 361
    assert candidate(nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]) == 181
    assert candidate(nums = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100]) == 801
    assert candidate(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]) == 91
    assert candidate(nums = [10, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 90
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 37
    assert candidate(nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2000
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 450
    assert candidate(nums = [3, 5, 7, 9, 2, 4, 6, 8, 10, 1]) == 70
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100]) == 19
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 70


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findMaximumScore)

2025-05-22 05:59:21,136 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.691329956054688,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 05:59:21,137 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 1_3 (depth 1)
2025-05-22 05:59:21,137 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 1_1
2025-05-22 05:59:21,137 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 1_1), stopping early
2025-05-22 05:59:21,137 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 05:59:21,137 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 5 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 05:59:21,138 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427548432 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:59:21,138 [DEBUG] filelock (_api.py:334): Lock 140657427548432 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:59:21,138 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 05:59:21,507 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427548432 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:59:21,508 [DEBUG] filelock (_api.py:367): Lock 140657427548432 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 05:59:21,508 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 05:59:21,508 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 05:59:21,865 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/reach-end-of-array-with-max-score.json
2025-05-22 05:59:21,865 [INFO] root (run_leetcode_solver.py:373): Processed problem reach-end-of-array-with-max-score in 211.74 seconds
2025-05-22 05:59:21,865 [INFO] root (run_leetcode_solver.py:348): Processing problem ID sum-of-consecutive-subarrays with model deepseek-r1-distill
2025-05-22 05:59:21,991 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem sum-of-consecutive-subarrays
2025-05-22 05:59:21,992 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 05:59:22,176 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:59:22,176 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:22,176 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:22,177 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:59:44,245 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:59:44,246 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:44,246 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:44,246 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:59:44,246 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1045 chars)
2025-05-22 05:59:44,428 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 05:59:44,429 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:44,429 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 05:59:44,429 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:05,305 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:05,305 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:05,305 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:05,305 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:05,306 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (1076 chars)
2025-05-22 06:00:05,488 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:05,488 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:05,488 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:05,489 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:25,752 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:25,752 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:25,752 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:25,753 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:25,753 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (978 chars)
2025-05-22 06:00:25,753 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0
        
        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue
            
            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue
            
            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                window_start = i
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
        
        return total % MOD
2025-05-22 06:00:25,753 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:00:25,753 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().getSum
2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().getSum
2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                window_start = i
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        return total % MOD
2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                window_start = i
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:00:25,753 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                window_start = i
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:00:39,770 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp919nag_m.py\", line 251, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp919nag_m.py\", line 118, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp919nag_m.py` failed. (See above for error)\n",
  "execution_time": 14.014606714248657,
  "failed_tests": [
    {
      "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
      "expected": "72",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp919nag_m.py\", line 251, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp919nag_m.py\", line 118, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp919nag_m.py` failed. (See above for error)"
}
2025-05-22 06:00:39,771 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 06:00:39,771 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 06:00:39,981 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:00:39,981 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:39,982 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:00:39,982 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:01:40,130 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:01:40,130 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:01:40,130 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:01:40,130 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:01:40,131 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1418 chars)
2025-05-22 06:01:40,313 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:01:40,313 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:01:40,314 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:01:40,314 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:02:30,703 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:02:30,704 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:02:30,704 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:02:30,704 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:02:30,705 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (587 chars)
2025-05-22 06:02:30,887 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:02:30,887 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:02:30,887 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:02:30,887 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:03:31,196 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:03:31,196 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:03:31,197 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:03:31,197 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:03:31,197 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (844 chars)
2025-05-22 06:03:31,197 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0
        
        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue
            
            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue
            
            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Check if the new subarray starting at i-1 is valid
                if i - window_start >= 1:
                    # Calculate the sum for the new subarray starting at i-1
                    new_subarray_sum = nums[i-1] + nums[i]
                    total = (total + new_subarray_sum) % MOD
                # Now, check if the single element at i is valid
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
                window_start = i
        
        return total % MOD
2025-05-22 06:03:31,197 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:03:31,197 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().getSum
2025-05-22 06:03:31,197 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:03:31,197 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:03:31,197 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().getSum
2025-05-22 06:03:31,197 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Check if the new subarray starting at i-1 is valid
                if i - window_start >= 1:
                    # Calculate the sum for the new subarray starting at i-1
                    new_subarray_sum = nums[i-1] + nums[i]
                    total = (total + new_subarray_sum) % MOD
                # Now, check if the single element at i is valid
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
                window_start = i

        return total % MOD
2025-05-22 06:03:31,198 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Check if the new subarray starting at i-1 is valid
                if i - window_start >= 1:
                    # Calculate the sum for the new subarray starting at i-1
                    new_subarray_sum = nums[i-1] + nums[i]
                    total = (total + new_subarray_sum) % MOD
                # Now, check if the single element at i is valid
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
                window_start = i

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:03:31,198 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Check if the new subarray starting at i-1 is valid
                if i - window_start >= 1:
                    # Calculate the sum for the new subarray starting at i-1
                    new_subarray_sum = nums[i-1] + nums[i]
                    total = (total + new_subarray_sum) % MOD
                # Now, check if the single element at i is valid
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
                window_start = i

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:03:45,309 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpi3erop65.py\", line 257, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpi3erop65.py\", line 124, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpi3erop65.py` failed. (See above for error)\n",
  "execution_time": 14.110661268234253,
  "failed_tests": [
    {
      "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
      "expected": "72",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpi3erop65.py\", line 257, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpi3erop65.py\", line 124, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpi3erop65.py` failed. (See above for error)"
}
2025-05-22 06:03:45,309 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 06:03:45,309 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 06:03:45,512 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:03:45,512 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:03:45,513 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:03:45,513 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:04:53,844 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:04:53,845 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:04:53,845 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:04:53,845 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:04:53,845 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1632 chars)
2025-05-22 06:04:54,029 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:04:54,029 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:04:54,029 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:04:54,030 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:06:15,665 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:06:15,665 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:06:15,665 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:06:15,665 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:06:15,666 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1811 chars)
2025-05-22 06:06:15,848 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:06:15,848 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:06:15,848 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:06:15,848 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:09:45,834 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:09:45,835 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:09:45,835 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:09:45,835 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:09:45,835 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1418 chars)
2025-05-22 06:09:45,835 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0
        
        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue
            
            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue
            
            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Calculate all possible subarrays ending at i-1
                length = i - window_start
                for l in range(1, length + 1):
                    sub_sum = sum(nums[window_start : window_start + l])
                    total = (total + sub_sum) % MOD
                # Start new window at i-1
                window_start = i - 1
                current_sum = nums[i-1] + nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff
        
        # After loop, add all subarrays in the last window
        length = n - window_start
        for l in range(1, length + 1):
            sub_sum = sum(nums[window_start : window_start + l])
            total = (total + sub_sum) % MOD
        
        return total % MOD
2025-05-22 06:09:45,835 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:09:45,835 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().getSum
2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().getSum
2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Calculate all possible subarrays ending at i-1
                length = i - window_start
                for l in range(1, length + 1):
                    sub_sum = sum(nums[window_start : window_start + l])
                    total = (total + sub_sum) % MOD
                # Start new window at i-1
                window_start = i - 1
                current_sum = nums[i-1] + nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        # After loop, add all subarrays in the last window
        length = n - window_start
        for l in range(1, length + 1):
            sub_sum = sum(nums[window_start : window_start + l])
            total = (total + sub_sum) % MOD

        return total % MOD
2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Calculate all possible subarrays ending at i-1
                length = i - window_start
                for l in range(1, length + 1):
                    sub_sum = sum(nums[window_start : window_start + l])
                    total = (total + sub_sum) % MOD
                # Start new window at i-1
                window_start = i - 1
                current_sum = nums[i-1] + nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        # After loop, add all subarrays in the last window
        length = n - window_start
        for l in range(1, length + 1):
            sub_sum = sum(nums[window_start : window_start + l])
            total = (total + sub_sum) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:09:45,836 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        total = 0
        current_sum = 0
        prev_diff = None
        window_start = 0

        for i in range(n):
            if i == 0:
                current_sum = nums[i]
                total = (total + current_sum) % MOD
                continue

            diff = nums[i] - nums[i-1]
            if prev_diff is None:
                prev_diff = diff
                current_sum += nums[i]
                total = (total + current_sum) % MOD
                continue

            if (prev_diff == 1 and diff == 1) or (prev_diff == -1 and diff == -1):
                current_sum += nums[i]
                total = (total + current_sum) % MOD
            else:
                # Calculate all possible subarrays ending at i-1
                length = i - window_start
                for l in range(1, length + 1):
                    sub_sum = sum(nums[window_start : window_start + l])
                    total = (total + sub_sum) % MOD
                # Start new window at i-1
                window_start = i - 1
                current_sum = nums[i-1] + nums[i]
                total = (total + current_sum) % MOD
                prev_diff = diff

        # After loop, add all subarrays in the last window
        length = n - window_start
        for l in range(1, length + 1):
            sub_sum = sum(nums[window_start : window_start + l])
            total = (total + sub_sum) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:09:59,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp_d972vh7.py\", line 263, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp_d972vh7.py\", line 130, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp_d972vh7.py` failed. (See above for error)\n",
  "execution_time": 13.947545766830444,
  "failed_tests": [
    {
      "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
      "expected": "72",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp_d972vh7.py\", line 263, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp_d972vh7.py\", line 130, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp_d972vh7.py` failed. (See above for error)"
}
2025-05-22 06:09:59,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0
        
        # Arrays to track the lengths of the longest increasing and decreasing consecutive subarrays ending at each index
        inc_length = [1] * n
        dec_length = [1] * n
        
        for i in range(1, n):
            diff = nums[i] - nums[i-1]
            if diff == 1:
                inc_length[i] = inc_length[i-1] + 1
                dec_length[i] = 1  # Reset decreasing length
            elif diff == -1:
                dec_length[i] = dec_length[i-1] + 1
                inc_length[i] = 1  # Reset increasing length
            else:
                inc_length[i] = 1
                dec_length[i] = 1
        
        # Prefix sum array for efficient subarray sum calculation
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i+1] = (prefix[i] + nums[i]) % MOD
        
        total = 0
        for i in range(n):
            max_inc = inc_length[i]
            max_dec = dec_length[i]
            
            # Calculate sum for all increasing subarrays ending at i
            for l in range(1, max_inc + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD
            
            # Calculate sum for all decreasing subarrays ending at i
            for l in range(1, max_dec + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD
            
            # Subtract the single element counted twice (once in increasing and once in decreasing)
            total = (total - nums[i]) % MOD
        
        return total % MOD
2025-05-22 06:09:59,784 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:09:59,785 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().getSum
2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162

2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().getSum
2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0

        # Arrays to track the lengths of the longest increasing and decreasing consecutive subarrays ending at each index
        inc_length = [1] * n
        dec_length = [1] * n

        for i in range(1, n):
            diff = nums[i] - nums[i-1]
            if diff == 1:
                inc_length[i] = inc_length[i-1] + 1
                dec_length[i] = 1  # Reset decreasing length
            elif diff == -1:
                dec_length[i] = dec_length[i-1] + 1
                inc_length[i] = 1  # Reset increasing length
            else:
                inc_length[i] = 1
                dec_length[i] = 1

        # Prefix sum array for efficient subarray sum calculation
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i+1] = (prefix[i] + nums[i]) % MOD

        total = 0
        for i in range(n):
            max_inc = inc_length[i]
            max_dec = dec_length[i]

            # Calculate sum for all increasing subarrays ending at i
            for l in range(1, max_inc + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Calculate sum for all decreasing subarrays ending at i
            for l in range(1, max_dec + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Subtract the single element counted twice (once in increasing and once in decreasing)
            total = (total - nums[i]) % MOD

        return total % MOD
2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0

        # Arrays to track the lengths of the longest increasing and decreasing consecutive subarrays ending at each index
        inc_length = [1] * n
        dec_length = [1] * n

        for i in range(1, n):
            diff = nums[i] - nums[i-1]
            if diff == 1:
                inc_length[i] = inc_length[i-1] + 1
                dec_length[i] = 1  # Reset decreasing length
            elif diff == -1:
                dec_length[i] = dec_length[i-1] + 1
                inc_length[i] = 1  # Reset increasing length
            else:
                inc_length[i] = 1
                dec_length[i] = 1

        # Prefix sum array for efficient subarray sum calculation
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i+1] = (prefix[i] + nums[i]) % MOD

        total = 0
        for i in range(n):
            max_inc = inc_length[i]
            max_dec = dec_length[i]

            # Calculate sum for all increasing subarrays ending at i
            for l in range(1, max_inc + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Calculate sum for all decreasing subarrays ending at i
            for l in range(1, max_dec + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Subtract the single element counted twice (once in increasing and once in decreasing)
            total = (total - nums[i]) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:09:59,785 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def getSum(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        if n == 0:
            return 0

        # Arrays to track the lengths of the longest increasing and decreasing consecutive subarrays ending at each index
        inc_length = [1] * n
        dec_length = [1] * n

        for i in range(1, n):
            diff = nums[i] - nums[i-1]
            if diff == 1:
                inc_length[i] = inc_length[i-1] + 1
                dec_length[i] = 1  # Reset decreasing length
            elif diff == -1:
                dec_length[i] = dec_length[i-1] + 1
                inc_length[i] = 1  # Reset increasing length
            else:
                inc_length[i] = 1
                dec_length[i] = 1

        # Prefix sum array for efficient subarray sum calculation
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i+1] = (prefix[i] + nums[i]) % MOD

        total = 0
        for i in range(n):
            max_inc = inc_length[i]
            max_dec = dec_length[i]

            # Calculate sum for all increasing subarrays ending at i
            for l in range(1, max_inc + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Calculate sum for all decreasing subarrays ending at i
            for l in range(1, max_dec + 1):
                j = i - l + 1
                sub_sum = (prefix[i+1] - prefix[j]) % MOD
                total = (total + sub_sum) % MOD

            # Subtract the single element counted twice (once in increasing and once in decreasing)
            total = (total - nums[i]) % MOD

        return total % MOD

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72
    assert candidate(nums = [7, 6, 1, 2]) == 32
    assert candidate(nums = [1, 3, 2, 4, 5, 7, 6, 8, 9, 10]) == 145
    assert candidate(nums = [1, 2, 4, 5, 6, 8, 9]) == 90
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [10, 11, 12, 13, 14]) == 420
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1210
    assert candidate(nums = [10]) == 10
    assert candidate(nums = [1]) == 1
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [5, 5, 5, 5, 5]) == 25
    assert candidate(nums = [1, 2, 4, 5, 7, 8, 10, 11]) == 96
    assert candidate(nums = [3, 2, 1, 2, 3, 2, 1]) == 56
    assert candidate(nums = [10, 9, 8, 7, 6]) == 280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10
    assert candidate(nums = [1, 2, 2, 3, 4, 4, 5]) == 54
    assert candidate(nums = [1, 1, 1, 1, 1]) == 5
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12]) == 1020
    assert candidate(nums = [100000, 99999, 99998, 99997]) == 1999970
    assert candidate(nums = [5, 4, 3, 2, 1]) == 105
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8]) == 216
    assert candidate(nums = [1, 3, 5, 7]) == 16
    assert candidate(nums = [1, 2, 3]) == 20
    assert candidate(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7]) == 85
    assert candidate(nums = [5]) == 5
    assert candidate(nums = [1, 2, 4, 5, 6, 7, 8, 9]) == 370
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996]) == 3499930
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6]) == 1575
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 30030
    assert candidate(nums = [20, 21, 22, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]) == 6345
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]) == 272
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 256
    assert candidate(nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 114
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 241
    assert candidate(nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92]) == 12470
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12]) == 290
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10]) == 941
    assert candidate(nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 4290
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5476
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 3, 5, 7, 9]) == 1235
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]) == 48230
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 8, 7, 6, 5]) == 550
    assert candidate(nums = [3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12]) == 817
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 8, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1]) == 985
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]) == 7680
    assert candidate(nums = [1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9]) == 383
    assert candidate(nums = [5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 830
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2410
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 309
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 5, 6, 7, 6, 7, 8, 9, 8, 9, 10, 11, 10, 11, 12, 13, 12, 13, 14, 15, 14, 15, 16, 17]) == 1479
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24]) == 426
    assert candidate(nums = [50000, 50001, 50002, 50003, 50002, 50001, 50000, 49999, 49998, 49997]) == 5150027
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3619
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5440
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1315
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20]) == 1718
    assert candidate(nums = [1, 2, 3, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]) == 917
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]) == 1570
    assert candidate(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16]) == 4900
    assert candidate(nums = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9]) == 135
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 21999010
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]) == 320
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 225
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]) == 87720
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 15
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]) == 600
    assert candidate(nums = [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]) == 53130
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13]) == 8645
    assert candidate(nums = [1, 2, 3, 6, 7, 8, 11, 12, 13, 14]) == 340
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 38025
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 109
    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 109
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 1490
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 13060
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2831
    assert candidate(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]) == 181
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995]) == 5599860
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19]) == 500
    assert candidate(nums = [2, 1, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15]) == 225
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]) == 2040
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 7550
    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1210
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]) == 1002
    assert candidate(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8, 10, 12, 11, 13, 15, 14]) == 205
    assert candidate(nums = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16]) == 1518
    assert candidate(nums = [100, 101, 102, 103, 104, 103, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == 21884
    assert candidate(nums = [10, 12, 14, 16, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 2362
    assert candidate(nums = [1, 3, 2, 4, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21]) == 526
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2860
    assert candidate(nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993]) == 11999580
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]) == 413
    assert candidate(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1]) == 191
    assert candidate(nums = [5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == 857
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 169
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 510
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16170
    assert candidate(nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == 14280
    assert candidate(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 25
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10200
    assert candidate(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3]) == 552
    assert candidate(nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]) == 0
    assert candidate(nums = [50000, 50001, 50002, 50001, 50000, 49999, 49998, 49999, 50000, 50001]) == 3150000
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == 400
    assert candidate(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2420
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]) == 1500
    assert candidate(nums = [99999, 100000, 99999, 100000, 99999, 100000, 99999, 100000]) == 2199989
    assert candidate(nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]) == 561
    assert candidate(nums = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7]) == 280
    assert candidate(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14]) == 304
    assert candidate(nums = [3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1368
    assert candidate(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 87
    assert candidate(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550
    assert candidate(nums = [10, 12, 14, 16, 18, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 16240
    assert candidate(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]) == 20380
    assert candidate(nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1314
    assert candidate(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 144
    assert candidate(nums = [1, 2, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1162


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().getSum)

2025-05-22 06:10:13,464 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.678138494491577,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:10:13,464 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 2_3 (depth 2)
2025-05-22 06:10:13,464 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 0cfeb69d
2025-05-22 06:10:13,464 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 2_3
2025-05-22 06:10:13,464 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 2_3), stopping early
2025-05-22 06:10:13,464 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:10:13,464 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 6 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:10:13,465 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427550064 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:10:13,465 [DEBUG] filelock (_api.py:334): Lock 140657427550064 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:10:13,466 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:10:13,881 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427550064 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:10:13,881 [DEBUG] filelock (_api.py:367): Lock 140657427550064 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:10:13,881 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:10:13,881 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:10:13,883 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/sum-of-consecutive-subarrays.json
2025-05-22 06:10:13,883 [INFO] root (run_leetcode_solver.py:373): Processed problem sum-of-consecutive-subarrays in 651.91 seconds
2025-05-22 06:10:13,883 [INFO] root (run_leetcode_solver.py:348): Processing problem ID find-a-safe-walk-through-a-grid with model deepseek-r1-distill
2025-05-22 06:10:14,012 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem find-a-safe-walk-through-a-grid
2025-05-22 06:10:14,013 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:10:14,197 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:10:14,197 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:14,198 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:14,198 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:10:39,821 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:10:39,821 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:39,821 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:39,821 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:10:39,822 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1486 chars)
2025-05-22 06:10:40,004 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:10:40,005 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:40,005 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:10:40,005 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:08,196 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:08,196 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:08,196 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:08,196 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:08,197 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (1722 chars)
2025-05-22 06:11:08,380 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:08,380 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:08,380 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:08,380 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:30,302 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:30,302 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:30,302 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:30,303 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:30,303 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (1205 chars)
2025-05-22 06:11:30,303 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
import heapq

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        m = len(grid)
        n = len(grid[0]) if m > 0 else 0
        if m == 0 or n == 0:
            return False
        
        # Directions: up, down, left, right
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        # Priority queue: (current_health, x, y)
        heap = []
        visited = [[False for _ in range(n)] for _ in range(m)]
        
        # Starting point: (0,0)
        initial_health = health - grid[0][0]
        if initial_health <= 0:
            return False
        heapq.heappush(heap, (-initial_health, 0, 0))
        visited[0][0] = True
        
        while heap:
            current_health, x, y = heapq.heappop(heap)
            current_health = -current_health  # Convert back to positive
            
            # Check if we've reached the destination
            if x == m - 1 and y == n - 1:
                return True
            
            for dx, dy in directions:
                nx = x + dx
                ny = y + dy
                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                    new_health = current_health - grid[nx][ny]
                    if new_health >= 1:
                        visited[nx][ny] = True
                        heapq.heappush(heap, (-new_health, nx, ny))
        
        # If we exhausted all possibilities without reaching destination
        return False
2025-05-22 06:11:30,303 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1) == True
    assert candidate(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],health = 1) == True
    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True
    assert candidate(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0]],health = 3) == False
    assert candidate(grid = [[1, 1], [1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 9) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0]],health = 3) == True
    assert candidate(grid = [[1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1]],health = 9) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 2) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 1, 1], [1, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 15) == True
    assert candidate(grid = [[0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0]],health = 9) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]],health = 15) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0]],health = 12) == True
    assert candidate(grid = [[1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0]],health = 8) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 15) == True

2025-05-22 06:11:30,303 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().findSafeWalk
2025-05-22 06:11:30,303 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:11:30,303 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1) == True
    assert candidate(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],health = 1) == True
    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True
    assert candidate(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0]],health = 3) == False
    assert candidate(grid = [[1, 1], [1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 9) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0]],health = 3) == True
    assert candidate(grid = [[1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1]],health = 9) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 2) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 1, 1], [1, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 15) == True
    assert candidate(grid = [[0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0]],health = 9) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]],health = 15) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0]],health = 12) == True
    assert candidate(grid = [[1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0]],health = 8) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 15) == True

2025-05-22 06:11:30,303 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().findSafeWalk
2025-05-22 06:11:30,303 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
import heapq

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        m = len(grid)
        n = len(grid[0]) if m > 0 else 0
        if m == 0 or n == 0:
            return False

        # Directions: up, down, left, right
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        # Priority queue: (current_health, x, y)
        heap = []
        visited = [[False for _ in range(n)] for _ in range(m)]

        # Starting point: (0,0)
        initial_health = health - grid[0][0]
        if initial_health <= 0:
            return False
        heapq.heappush(heap, (-initial_health, 0, 0))
        visited[0][0] = True

        while heap:
            current_health, x, y = heapq.heappop(heap)
            current_health = -current_health  # Convert back to positive

            # Check if we've reached the destination
            if x == m - 1 and y == n - 1:
                return True

            for dx, dy in directions:
                nx = x + dx
                ny = y + dy
                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                    new_health = current_health - grid[nx][ny]
                    if new_health >= 1:
                        visited[nx][ny] = True
                        heapq.heappush(heap, (-new_health, nx, ny))

        # If we exhausted all possibilities without reaching destination
        return False
2025-05-22 06:11:30,304 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
import heapq

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        m = len(grid)
        n = len(grid[0]) if m > 0 else 0
        if m == 0 or n == 0:
            return False

        # Directions: up, down, left, right
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        # Priority queue: (current_health, x, y)
        heap = []
        visited = [[False for _ in range(n)] for _ in range(m)]

        # Starting point: (0,0)
        initial_health = health - grid[0][0]
        if initial_health <= 0:
            return False
        heapq.heappush(heap, (-initial_health, 0, 0))
        visited[0][0] = True

        while heap:
            current_health, x, y = heapq.heappop(heap)
            current_health = -current_health  # Convert back to positive

            # Check if we've reached the destination
            if x == m - 1 and y == n - 1:
                return True

            for dx, dy in directions:
                nx = x + dx
                ny = y + dy
                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                    new_health = current_health - grid[nx][ny]
                    if new_health >= 1:
                        visited[nx][ny] = True
                        heapq.heappush(heap, (-new_health, nx, ny))

        # If we exhausted all possibilities without reaching destination
        return False

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1) == True
    assert candidate(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],health = 1) == True
    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True
    assert candidate(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0]],health = 3) == False
    assert candidate(grid = [[1, 1], [1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 9) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0]],health = 3) == True
    assert candidate(grid = [[1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1]],health = 9) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 2) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 1, 1], [1, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 15) == True
    assert candidate(grid = [[0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0]],health = 9) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]],health = 15) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0]],health = 12) == True
    assert candidate(grid = [[1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0]],health = 8) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 15) == True


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findSafeWalk)

2025-05-22 06:11:30,304 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
import heapq

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        m = len(grid)
        n = len(grid[0]) if m > 0 else 0
        if m == 0 or n == 0:
            return False

        # Directions: up, down, left, right
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        # Priority queue: (current_health, x, y)
        heap = []
        visited = [[False for _ in range(n)] for _ in range(m)]

        # Starting point: (0,0)
        initial_health = health - grid[0][0]
        if initial_health <= 0:
            return False
        heapq.heappush(heap, (-initial_health, 0, 0))
        visited[0][0] = True

        while heap:
            current_health, x, y = heapq.heappop(heap)
            current_health = -current_health  # Convert back to positive

            # Check if we've reached the destination
            if x == m - 1 and y == n - 1:
                return True

            for dx, dy in directions:
                nx = x + dx
                ny = y + dy
                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                    new_health = current_health - grid[nx][ny]
                    if new_health >= 1:
                        visited[nx][ny] = True
                        heapq.heappush(heap, (-new_health, nx, ny))

        # If we exhausted all possibilities without reaching destination
        return False

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1) == True
    assert candidate(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],health = 1) == True
    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True
    assert candidate(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0]],health = 3) == False
    assert candidate(grid = [[1, 1], [1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1], [0, 1, 1, 0, 0], [1, 0, 0, 0, 1]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 9) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0]],health = 3) == True
    assert candidate(grid = [[1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1]],health = 9) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 2) == True
    assert candidate(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],health = 4) == True
    assert candidate(grid = [[1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 1, 1], [1, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 15) == True
    assert candidate(grid = [[0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]],health = 4) == True
    assert candidate(grid = [[0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0]],health = 6) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]],health = 20) == True
    assert candidate(grid = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],health = 8) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0]],health = 9) == True
    assert candidate(grid = [[0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]],health = 3) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]],health = 8) == True
    assert candidate(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]],health = 15) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 15) == True
    assert candidate(grid = [[0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0]],health = 12) == True
    assert candidate(grid = [[1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0]],health = 7) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]],health = 10) == True
    assert candidate(grid = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 20) == True
    assert candidate(grid = [[0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0]],health = 5) == True
    assert candidate(grid = [[1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0]],health = 8) == True
    assert candidate(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],health = 15) == True


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().findSafeWalk)

2025-05-22 06:11:44,177 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.873324394226074,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:11:44,178 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 06:11:44,178 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:11:44,178 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:11:44,178 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427549440 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:11:44,179 [DEBUG] filelock (_api.py:334): Lock 140657427549440 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:11:44,179 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:11:44,358 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427549440 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:11:44,358 [DEBUG] filelock (_api.py:367): Lock 140657427549440 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:11:44,358 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:11:44,359 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:11:44,360 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/find-a-safe-walk-through-a-grid.json
2025-05-22 06:11:44,360 [INFO] root (run_leetcode_solver.py:373): Processed problem find-a-safe-walk-through-a-grid in 90.36 seconds
2025-05-22 06:11:44,360 [INFO] root (run_leetcode_solver.py:348): Processing problem ID maximum-multiplication-score with model deepseek-r1-distill
2025-05-22 06:11:44,491 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem maximum-multiplication-score
2025-05-22 06:11:44,492 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:11:44,676 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:11:44,676 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:44,677 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:11:44,677 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:12:16,362 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:12:16,362 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:12:16,363 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:12:16,363 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:12:16,363 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (512 chars)
2025-05-22 06:12:16,545 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:12:16,545 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:12:16,546 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:12:16,546 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:07,125 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:07,125 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:07,125 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:07,126 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:07,126 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (512 chars)
2025-05-22 06:13:07,307 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:07,308 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:07,308 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:07,308 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:21,930 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:21,931 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:21,931 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:21,931 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:21,931 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (372 chars)
2025-05-22 06:13:21,931 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        dp = [[-inf] * 4 for _ in range(len(b))]
        dp[0][0] = a[0] * b[0]
        
        for i in range(1, len(b)):
            dp[i][0] = max(dp[i-1][0], a[0] * b[i])
            for j in range(1, 4):
                if dp[i-1][j-1] != -inf:
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[j] * b[i])
        
        return max(dp[-1][3], max(dp[len(b)-1][3], dp[len(b)-2][3], dp[len(b)-3][3], dp[len(b)-4][3]))
2025-05-22 06:13:21,931 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80]) == 700
    assert candidate(a = [10, 20, 30, 40],b = [1, 2, 3, 4]) == 300
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 80
    assert candidate(a = [100000, -100000, 100000, -100000],b = [100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000]) == 40000000000
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -20, -30, -40, -50, -60, -70, -80]) == 700
    assert candidate(a = [10, -10, 10, -10],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -20
    assert candidate(a = [-1, 4, 5, -2],b = [-5, -1, -3, -2, -4]) == -1
    assert candidate(a = [1, 1, 1, 1],b = [1, 2, 3, 4, 5, 6, 7, 8]) == 26
    assert candidate(a = [1, 2, 3, 4],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [-10, -20, -30, -40],b = [-1, -2, -3, -4, -5, -6, -7, -8]) == 700
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0
    assert candidate(a = [3, 2, 5, 6],b = [2, -6, 4, -5, -3, 2, -7]) == 26
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400]) == 1400
    assert candidate(a = [5, 15, 25, 35],b = [-100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000]) == 76500
    assert candidate(a = [100, 200, 300, 400],b = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [1, 3, -2, 4],b = [5, -10, 3, 7, -8, 6, 2, -15, 9, 11]) == 100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == -10
    assert candidate(a = [100, -100, 200, -200],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [5, -3, 2, -1],b = [10, 8, -5, 3, 15, 12, -20, 7, 6, 4, 9, -1]) == 154
    assert candidate(a = [100, -50, 25, -12],b = [-100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100]) == 18700
    assert candidate(a = [10, 20, 30, 40],b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 200000, 300000, 400000, 500000, 600000]) == 50000000
    assert candidate(a = [-5, -10, -15, -20],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -150
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 25000
    assert candidate(a = [1, -2, 3, -4],b = [100, -50, 200, -250, 300, -350, 400, -450, 500]) == 4000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000]) == 0
    assert candidate(a = [5, 3, 1, -2],b = [-100, 50, -20, 10, 0, -5, 3, 8, -15, 7]) == 318
    assert candidate(a = [100, 200, 300, 400],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [0, 0, 0, 0],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(a = [1, 1, 1, 1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, 1, 2, 3, 4]) == 10
    assert candidate(a = [-100000, -200000, -300000, -400000],b = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000]) == -300000000000
    assert candidate(a = [1, -1, 1, -1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -2
    assert candidate(a = [1, 1, 1, 1],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 399994
    assert candidate(a = [5, 15, 25, 35],b = [-10, 5, -20, 15, -30, 25, -40, 35, -50, 45]) == 2900
    assert candidate(a = [-1, 2, -3, 4],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 45000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000]) == 30000000000
    assert candidate(a = [10, 15, -20, 25],b = [3, 7, -5, 8, 2, -1, 10, -4, 6, 12, -3, 9, 11, -6, 15, -8, 14, -7, 13, -2]) == 855
    assert candidate(a = [1, -1, 1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0
    assert candidate(a = [5, -3, 2, 7],b = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25]) == 392
    assert candidate(a = [100, -50, 75, 25],b = [-99999, 50000, 25000, -10000, 30000, -5000, 2000, -3000, 1000, -2000]) == 7800000
    assert candidate(a = [1, 2, 3, 4],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -999920
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == -999920
    assert candidate(a = [100, 200, 300, 400],b = [99999, -99999, 88888, -88888, 77777, -77777, 66666, -66666, 55555, -55555, 44444, -44444, 33333, -33333, 22222, -22222, 11111, -11111, 1, -1]) == 77777000
    assert candidate(a = [500, -500, 1000, -1000],b = [100, -200, 300, -400, 500, -600, 700, -800, 900, -1000, 1100, -1200, 1300, -1400, 1500]) == 3850000
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 900000
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, -500, -600, -700, -800]) == -300000
    assert candidate(a = [10, -10, 10, -10],b = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == 800
    assert candidate(a = [-5, 3, 2, -1],b = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]) == -8000
    assert candidate(a = [-1, -2, -3, -4],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 90
    assert candidate(a = [1, 1, 1, 1],b = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]) == -100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -4
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -20
    assert candidate(a = [1, 1, 1, 1],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34
    assert candidate(a = [0, 0, 0, 0],b = [10000, -10000, 20000, -20000, 30000, -30000, 40000, -40000]) == 0
    assert candidate(a = [1000, 2000, -1500, 500],b = [-100, 200, -300, 400, -500, 600, -700, 800, -900, 1000, -1100, 1200]) == 5050000
    assert candidate(a = [-1000, -2000, -3000, -4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == -30000
    assert candidate(a = [-10, -20, -30, -40],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [1, 1, 1, 1],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000, 600000, -600000, 700000, -700000, 800000, -800000, 900000, -900000, 1000000, -1000000]) == 3400000
    assert candidate(a = [10, 20, 30, 40],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(a = [100, -50, 25, -10],b = [500, -400, 300, -200, 100, -50, 20, -10, 0, 10, 20, 50, 100, 200, 300, 400, 500]) == 79500
    assert candidate(a = [100000, 200000, 300000, 400000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 14000000
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]) == 190000000
    assert candidate(a = [5, -5, 5, -5],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 150000
    assert candidate(a = [1, -2, 3, -4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120, 130, -140, 150, -160, 170]) == 1500
    assert candidate(a = [10, 20, 30, 40],b = [-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000]) == 12000000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]) == 30
    assert candidate(a = [-100, -200, -300, -400],b = [-99999, 99999, -88888, 88888, -77777, 77777, -66666, 66666, -55555, 55555, -44444, 44444, -33333, 33333, -22222, 22222, -11111, 11111, -1, 1]) == 77777000
    assert candidate(a = [1000, -1000, 500, -500],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625]) == 25000000
    assert candidate(a = [0, 0, 0, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 2000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == 38
    assert candidate(a = [-100, 200, -300, 400],b = [-99999, 99998, -99997, 99996, -99995, 99994, -99993, 99992, -99991, 99990]) == 99997000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 0
    assert candidate(a = [1, 1, -1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10]) == 32
    assert candidate(a = [5, -1, 3, 2],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 164
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == -10
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 900
    assert candidate(a = [1, 1, 1, 1],b = [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988]) == -3958
    assert candidate(a = [1, 1, 1, 1],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 340000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-99999, 99999, -99998, 99998, -99997, 99997, -99996, 99996, -99995, 99995]) == 29999450000
    assert candidate(a = [1, -2, 3, -4],b = [-50000, 50000, -25000, 25000, -12500, 12500, -6250, 6250, -3125, 3125, -1562, 1562, -781, 781, -390, 390, -195, 195, -97, 97, -48, 48, -24, 24, -12, 12, -6, 6, -3, 3, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 225000
    assert candidate(a = [10, 0, 5, 0],b = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]) == 140
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [5, 3, 1, 2],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100]) == 560
    assert candidate(a = [1, 2, 3, 4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120]) == 900
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990]) == 9980000
    assert candidate(a = [100, 200, 300, 400],b = [-5000, 6000, -7000, 8000, -9000, 10000, -11000, 12000, -13000, 14000, -15000, 16000, -17000, 18000, -19000, 20000, -21000, 22000, -23000, 24000, -25000, 26000, -27000, 28000, -29000, 30000]) == 28000000
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500, 600, -600, 700, -700, 800, -800, 900, -900, 1000, -1000, 1100, -1100, 1200, -1200, 1300, -1300, 1400, -1400, 1500, -1500]) == 5800
    assert candidate(a = [-5, 3, 7, -2],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 7800
    assert candidate(a = [0, 0, 0, 1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10
    assert candidate(a = [-10, -20, -30, -40],b = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == 90000
    assert candidate(a = [1, 2, 3, 4],b = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -30
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 290000
    assert candidate(a = [1, 1, 1, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 7400
    assert candidate(a = [1, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7
    assert candidate(a = [100000, -100000, 200000, -200000],b = [-50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000, -150000, 160000, -170000, 180000, -190000, 200000, -210000, 220000, -230000, 240000]) == 131000000000
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250, 3125, -3125, 1562, -1562, 781, -781, 390, -390, 195, -195, 97, -97, 48, -48, 24, -24, 12, -12, 6, -6, 3, -3, 1, -1, 0, 0, 0, 0]) == 25000
    assert candidate(a = [1, -1, 1, -1],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]) == -20
    assert candidate(a = [3, 1, -4, 2],b = [5, -7, 12, 3, 1, -9, 8, -1, 10, 4]) == 95
    assert candidate(a = [-5, 2, -3, 1],b = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]) == 132
    assert candidate(a = [1, 2, 3, 4],b = [-5, 4, -3, 2, -1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 71
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, 500, 600, 700, 800, 900, 1000]) == 900000
    assert candidate(a = [1, 1, 1, 1],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 34
    assert candidate(a = [100, -200, 300, -400],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == -1000000
    assert candidate(a = [5, -5, 3, -3],b = [20, -20, 15, -15, 10, -10, 5, -5, 0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25, 30, -30]) == 430

2025-05-22 06:13:21,931 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maxScore
2025-05-22 06:13:21,931 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:13:21,931 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80]) == 700
    assert candidate(a = [10, 20, 30, 40],b = [1, 2, 3, 4]) == 300
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 80
    assert candidate(a = [100000, -100000, 100000, -100000],b = [100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000]) == 40000000000
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -20, -30, -40, -50, -60, -70, -80]) == 700
    assert candidate(a = [10, -10, 10, -10],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -20
    assert candidate(a = [-1, 4, 5, -2],b = [-5, -1, -3, -2, -4]) == -1
    assert candidate(a = [1, 1, 1, 1],b = [1, 2, 3, 4, 5, 6, 7, 8]) == 26
    assert candidate(a = [1, 2, 3, 4],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [-10, -20, -30, -40],b = [-1, -2, -3, -4, -5, -6, -7, -8]) == 700
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0
    assert candidate(a = [3, 2, 5, 6],b = [2, -6, 4, -5, -3, 2, -7]) == 26
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400]) == 1400
    assert candidate(a = [5, 15, 25, 35],b = [-100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000]) == 76500
    assert candidate(a = [100, 200, 300, 400],b = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [1, 3, -2, 4],b = [5, -10, 3, 7, -8, 6, 2, -15, 9, 11]) == 100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == -10
    assert candidate(a = [100, -100, 200, -200],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [5, -3, 2, -1],b = [10, 8, -5, 3, 15, 12, -20, 7, 6, 4, 9, -1]) == 154
    assert candidate(a = [100, -50, 25, -12],b = [-100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100]) == 18700
    assert candidate(a = [10, 20, 30, 40],b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 200000, 300000, 400000, 500000, 600000]) == 50000000
    assert candidate(a = [-5, -10, -15, -20],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -150
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 25000
    assert candidate(a = [1, -2, 3, -4],b = [100, -50, 200, -250, 300, -350, 400, -450, 500]) == 4000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000]) == 0
    assert candidate(a = [5, 3, 1, -2],b = [-100, 50, -20, 10, 0, -5, 3, 8, -15, 7]) == 318
    assert candidate(a = [100, 200, 300, 400],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [0, 0, 0, 0],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(a = [1, 1, 1, 1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, 1, 2, 3, 4]) == 10
    assert candidate(a = [-100000, -200000, -300000, -400000],b = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000]) == -300000000000
    assert candidate(a = [1, -1, 1, -1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -2
    assert candidate(a = [1, 1, 1, 1],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 399994
    assert candidate(a = [5, 15, 25, 35],b = [-10, 5, -20, 15, -30, 25, -40, 35, -50, 45]) == 2900
    assert candidate(a = [-1, 2, -3, 4],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 45000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000]) == 30000000000
    assert candidate(a = [10, 15, -20, 25],b = [3, 7, -5, 8, 2, -1, 10, -4, 6, 12, -3, 9, 11, -6, 15, -8, 14, -7, 13, -2]) == 855
    assert candidate(a = [1, -1, 1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0
    assert candidate(a = [5, -3, 2, 7],b = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25]) == 392
    assert candidate(a = [100, -50, 75, 25],b = [-99999, 50000, 25000, -10000, 30000, -5000, 2000, -3000, 1000, -2000]) == 7800000
    assert candidate(a = [1, 2, 3, 4],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -999920
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == -999920
    assert candidate(a = [100, 200, 300, 400],b = [99999, -99999, 88888, -88888, 77777, -77777, 66666, -66666, 55555, -55555, 44444, -44444, 33333, -33333, 22222, -22222, 11111, -11111, 1, -1]) == 77777000
    assert candidate(a = [500, -500, 1000, -1000],b = [100, -200, 300, -400, 500, -600, 700, -800, 900, -1000, 1100, -1200, 1300, -1400, 1500]) == 3850000
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 900000
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, -500, -600, -700, -800]) == -300000
    assert candidate(a = [10, -10, 10, -10],b = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == 800
    assert candidate(a = [-5, 3, 2, -1],b = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]) == -8000
    assert candidate(a = [-1, -2, -3, -4],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 90
    assert candidate(a = [1, 1, 1, 1],b = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]) == -100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -4
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -20
    assert candidate(a = [1, 1, 1, 1],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34
    assert candidate(a = [0, 0, 0, 0],b = [10000, -10000, 20000, -20000, 30000, -30000, 40000, -40000]) == 0
    assert candidate(a = [1000, 2000, -1500, 500],b = [-100, 200, -300, 400, -500, 600, -700, 800, -900, 1000, -1100, 1200]) == 5050000
    assert candidate(a = [-1000, -2000, -3000, -4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == -30000
    assert candidate(a = [-10, -20, -30, -40],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [1, 1, 1, 1],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000, 600000, -600000, 700000, -700000, 800000, -800000, 900000, -900000, 1000000, -1000000]) == 3400000
    assert candidate(a = [10, 20, 30, 40],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(a = [100, -50, 25, -10],b = [500, -400, 300, -200, 100, -50, 20, -10, 0, 10, 20, 50, 100, 200, 300, 400, 500]) == 79500
    assert candidate(a = [100000, 200000, 300000, 400000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 14000000
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]) == 190000000
    assert candidate(a = [5, -5, 5, -5],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 150000
    assert candidate(a = [1, -2, 3, -4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120, 130, -140, 150, -160, 170]) == 1500
    assert candidate(a = [10, 20, 30, 40],b = [-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000]) == 12000000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]) == 30
    assert candidate(a = [-100, -200, -300, -400],b = [-99999, 99999, -88888, 88888, -77777, 77777, -66666, 66666, -55555, 55555, -44444, 44444, -33333, 33333, -22222, 22222, -11111, 11111, -1, 1]) == 77777000
    assert candidate(a = [1000, -1000, 500, -500],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625]) == 25000000
    assert candidate(a = [0, 0, 0, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 2000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == 38
    assert candidate(a = [-100, 200, -300, 400],b = [-99999, 99998, -99997, 99996, -99995, 99994, -99993, 99992, -99991, 99990]) == 99997000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 0
    assert candidate(a = [1, 1, -1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10]) == 32
    assert candidate(a = [5, -1, 3, 2],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 164
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == -10
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 900
    assert candidate(a = [1, 1, 1, 1],b = [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988]) == -3958
    assert candidate(a = [1, 1, 1, 1],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 340000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-99999, 99999, -99998, 99998, -99997, 99997, -99996, 99996, -99995, 99995]) == 29999450000
    assert candidate(a = [1, -2, 3, -4],b = [-50000, 50000, -25000, 25000, -12500, 12500, -6250, 6250, -3125, 3125, -1562, 1562, -781, 781, -390, 390, -195, 195, -97, 97, -48, 48, -24, 24, -12, 12, -6, 6, -3, 3, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 225000
    assert candidate(a = [10, 0, 5, 0],b = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]) == 140
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [5, 3, 1, 2],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100]) == 560
    assert candidate(a = [1, 2, 3, 4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120]) == 900
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990]) == 9980000
    assert candidate(a = [100, 200, 300, 400],b = [-5000, 6000, -7000, 8000, -9000, 10000, -11000, 12000, -13000, 14000, -15000, 16000, -17000, 18000, -19000, 20000, -21000, 22000, -23000, 24000, -25000, 26000, -27000, 28000, -29000, 30000]) == 28000000
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500, 600, -600, 700, -700, 800, -800, 900, -900, 1000, -1000, 1100, -1100, 1200, -1200, 1300, -1300, 1400, -1400, 1500, -1500]) == 5800
    assert candidate(a = [-5, 3, 7, -2],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 7800
    assert candidate(a = [0, 0, 0, 1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10
    assert candidate(a = [-10, -20, -30, -40],b = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == 90000
    assert candidate(a = [1, 2, 3, 4],b = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -30
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 290000
    assert candidate(a = [1, 1, 1, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 7400
    assert candidate(a = [1, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7
    assert candidate(a = [100000, -100000, 200000, -200000],b = [-50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000, -150000, 160000, -170000, 180000, -190000, 200000, -210000, 220000, -230000, 240000]) == 131000000000
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250, 3125, -3125, 1562, -1562, 781, -781, 390, -390, 195, -195, 97, -97, 48, -48, 24, -24, 12, -12, 6, -6, 3, -3, 1, -1, 0, 0, 0, 0]) == 25000
    assert candidate(a = [1, -1, 1, -1],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]) == -20
    assert candidate(a = [3, 1, -4, 2],b = [5, -7, 12, 3, 1, -9, 8, -1, 10, 4]) == 95
    assert candidate(a = [-5, 2, -3, 1],b = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]) == 132
    assert candidate(a = [1, 2, 3, 4],b = [-5, 4, -3, 2, -1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 71
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, 500, 600, 700, 800, 900, 1000]) == 900000
    assert candidate(a = [1, 1, 1, 1],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 34
    assert candidate(a = [100, -200, 300, -400],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == -1000000
    assert candidate(a = [5, -5, 3, -3],b = [20, -20, 15, -15, 10, -10, 5, -5, 0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25, 30, -30]) == 430

2025-05-22 06:13:21,931 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maxScore
2025-05-22 06:13:21,931 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        dp = [[-inf] * 4 for _ in range(len(b))]
        dp[0][0] = a[0] * b[0]

        for i in range(1, len(b)):
            dp[i][0] = max(dp[i-1][0], a[0] * b[i])
            for j in range(1, 4):
                if dp[i-1][j-1] != -inf:
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[j] * b[i])

        return max(dp[-1][3], max(dp[len(b)-1][3], dp[len(b)-2][3], dp[len(b)-3][3], dp[len(b)-4][3]))
2025-05-22 06:13:21,932 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        dp = [[-inf] * 4 for _ in range(len(b))]
        dp[0][0] = a[0] * b[0]

        for i in range(1, len(b)):
            dp[i][0] = max(dp[i-1][0], a[0] * b[i])
            for j in range(1, 4):
                if dp[i-1][j-1] != -inf:
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[j] * b[i])

        return max(dp[-1][3], max(dp[len(b)-1][3], dp[len(b)-2][3], dp[len(b)-3][3], dp[len(b)-4][3]))

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80]) == 700
    assert candidate(a = [10, 20, 30, 40],b = [1, 2, 3, 4]) == 300
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 80
    assert candidate(a = [100000, -100000, 100000, -100000],b = [100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000]) == 40000000000
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -20, -30, -40, -50, -60, -70, -80]) == 700
    assert candidate(a = [10, -10, 10, -10],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -20
    assert candidate(a = [-1, 4, 5, -2],b = [-5, -1, -3, -2, -4]) == -1
    assert candidate(a = [1, 1, 1, 1],b = [1, 2, 3, 4, 5, 6, 7, 8]) == 26
    assert candidate(a = [1, 2, 3, 4],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [-10, -20, -30, -40],b = [-1, -2, -3, -4, -5, -6, -7, -8]) == 700
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0
    assert candidate(a = [3, 2, 5, 6],b = [2, -6, 4, -5, -3, 2, -7]) == 26
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400]) == 1400
    assert candidate(a = [5, 15, 25, 35],b = [-100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000]) == 76500
    assert candidate(a = [100, 200, 300, 400],b = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [1, 3, -2, 4],b = [5, -10, 3, 7, -8, 6, 2, -15, 9, 11]) == 100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == -10
    assert candidate(a = [100, -100, 200, -200],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [5, -3, 2, -1],b = [10, 8, -5, 3, 15, 12, -20, 7, 6, 4, 9, -1]) == 154
    assert candidate(a = [100, -50, 25, -12],b = [-100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100]) == 18700
    assert candidate(a = [10, 20, 30, 40],b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 200000, 300000, 400000, 500000, 600000]) == 50000000
    assert candidate(a = [-5, -10, -15, -20],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -150
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 25000
    assert candidate(a = [1, -2, 3, -4],b = [100, -50, 200, -250, 300, -350, 400, -450, 500]) == 4000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000]) == 0
    assert candidate(a = [5, 3, 1, -2],b = [-100, 50, -20, 10, 0, -5, 3, 8, -15, 7]) == 318
    assert candidate(a = [100, 200, 300, 400],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [0, 0, 0, 0],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(a = [1, 1, 1, 1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, 1, 2, 3, 4]) == 10
    assert candidate(a = [-100000, -200000, -300000, -400000],b = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000]) == -300000000000
    assert candidate(a = [1, -1, 1, -1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -2
    assert candidate(a = [1, 1, 1, 1],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 399994
    assert candidate(a = [5, 15, 25, 35],b = [-10, 5, -20, 15, -30, 25, -40, 35, -50, 45]) == 2900
    assert candidate(a = [-1, 2, -3, 4],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 45000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000]) == 30000000000
    assert candidate(a = [10, 15, -20, 25],b = [3, 7, -5, 8, 2, -1, 10, -4, 6, 12, -3, 9, 11, -6, 15, -8, 14, -7, 13, -2]) == 855
    assert candidate(a = [1, -1, 1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0
    assert candidate(a = [5, -3, 2, 7],b = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25]) == 392
    assert candidate(a = [100, -50, 75, 25],b = [-99999, 50000, 25000, -10000, 30000, -5000, 2000, -3000, 1000, -2000]) == 7800000
    assert candidate(a = [1, 2, 3, 4],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -999920
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == -999920
    assert candidate(a = [100, 200, 300, 400],b = [99999, -99999, 88888, -88888, 77777, -77777, 66666, -66666, 55555, -55555, 44444, -44444, 33333, -33333, 22222, -22222, 11111, -11111, 1, -1]) == 77777000
    assert candidate(a = [500, -500, 1000, -1000],b = [100, -200, 300, -400, 500, -600, 700, -800, 900, -1000, 1100, -1200, 1300, -1400, 1500]) == 3850000
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 900000
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, -500, -600, -700, -800]) == -300000
    assert candidate(a = [10, -10, 10, -10],b = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == 800
    assert candidate(a = [-5, 3, 2, -1],b = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]) == -8000
    assert candidate(a = [-1, -2, -3, -4],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 90
    assert candidate(a = [1, 1, 1, 1],b = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]) == -100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -4
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -20
    assert candidate(a = [1, 1, 1, 1],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34
    assert candidate(a = [0, 0, 0, 0],b = [10000, -10000, 20000, -20000, 30000, -30000, 40000, -40000]) == 0
    assert candidate(a = [1000, 2000, -1500, 500],b = [-100, 200, -300, 400, -500, 600, -700, 800, -900, 1000, -1100, 1200]) == 5050000
    assert candidate(a = [-1000, -2000, -3000, -4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == -30000
    assert candidate(a = [-10, -20, -30, -40],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [1, 1, 1, 1],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000, 600000, -600000, 700000, -700000, 800000, -800000, 900000, -900000, 1000000, -1000000]) == 3400000
    assert candidate(a = [10, 20, 30, 40],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(a = [100, -50, 25, -10],b = [500, -400, 300, -200, 100, -50, 20, -10, 0, 10, 20, 50, 100, 200, 300, 400, 500]) == 79500
    assert candidate(a = [100000, 200000, 300000, 400000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 14000000
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]) == 190000000
    assert candidate(a = [5, -5, 5, -5],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 150000
    assert candidate(a = [1, -2, 3, -4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120, 130, -140, 150, -160, 170]) == 1500
    assert candidate(a = [10, 20, 30, 40],b = [-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000]) == 12000000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]) == 30
    assert candidate(a = [-100, -200, -300, -400],b = [-99999, 99999, -88888, 88888, -77777, 77777, -66666, 66666, -55555, 55555, -44444, 44444, -33333, 33333, -22222, 22222, -11111, 11111, -1, 1]) == 77777000
    assert candidate(a = [1000, -1000, 500, -500],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625]) == 25000000
    assert candidate(a = [0, 0, 0, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 2000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == 38
    assert candidate(a = [-100, 200, -300, 400],b = [-99999, 99998, -99997, 99996, -99995, 99994, -99993, 99992, -99991, 99990]) == 99997000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 0
    assert candidate(a = [1, 1, -1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10]) == 32
    assert candidate(a = [5, -1, 3, 2],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 164
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == -10
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 900
    assert candidate(a = [1, 1, 1, 1],b = [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988]) == -3958
    assert candidate(a = [1, 1, 1, 1],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 340000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-99999, 99999, -99998, 99998, -99997, 99997, -99996, 99996, -99995, 99995]) == 29999450000
    assert candidate(a = [1, -2, 3, -4],b = [-50000, 50000, -25000, 25000, -12500, 12500, -6250, 6250, -3125, 3125, -1562, 1562, -781, 781, -390, 390, -195, 195, -97, 97, -48, 48, -24, 24, -12, 12, -6, 6, -3, 3, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 225000
    assert candidate(a = [10, 0, 5, 0],b = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]) == 140
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [5, 3, 1, 2],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100]) == 560
    assert candidate(a = [1, 2, 3, 4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120]) == 900
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990]) == 9980000
    assert candidate(a = [100, 200, 300, 400],b = [-5000, 6000, -7000, 8000, -9000, 10000, -11000, 12000, -13000, 14000, -15000, 16000, -17000, 18000, -19000, 20000, -21000, 22000, -23000, 24000, -25000, 26000, -27000, 28000, -29000, 30000]) == 28000000
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500, 600, -600, 700, -700, 800, -800, 900, -900, 1000, -1000, 1100, -1100, 1200, -1200, 1300, -1300, 1400, -1400, 1500, -1500]) == 5800
    assert candidate(a = [-5, 3, 7, -2],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 7800
    assert candidate(a = [0, 0, 0, 1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10
    assert candidate(a = [-10, -20, -30, -40],b = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == 90000
    assert candidate(a = [1, 2, 3, 4],b = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -30
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 290000
    assert candidate(a = [1, 1, 1, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 7400
    assert candidate(a = [1, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7
    assert candidate(a = [100000, -100000, 200000, -200000],b = [-50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000, -150000, 160000, -170000, 180000, -190000, 200000, -210000, 220000, -230000, 240000]) == 131000000000
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250, 3125, -3125, 1562, -1562, 781, -781, 390, -390, 195, -195, 97, -97, 48, -48, 24, -24, 12, -12, 6, -6, 3, -3, 1, -1, 0, 0, 0, 0]) == 25000
    assert candidate(a = [1, -1, 1, -1],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]) == -20
    assert candidate(a = [3, 1, -4, 2],b = [5, -7, 12, 3, 1, -9, 8, -1, 10, 4]) == 95
    assert candidate(a = [-5, 2, -3, 1],b = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]) == 132
    assert candidate(a = [1, 2, 3, 4],b = [-5, 4, -3, 2, -1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 71
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, 500, 600, 700, 800, 900, 1000]) == 900000
    assert candidate(a = [1, 1, 1, 1],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 34
    assert candidate(a = [100, -200, 300, -400],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == -1000000
    assert candidate(a = [5, -5, 3, -3],b = [20, -20, 15, -15, 10, -10, 5, -5, 0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25, 30, -30]) == 430


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxScore)

2025-05-22 06:13:21,932 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        dp = [[-inf] * 4 for _ in range(len(b))]
        dp[0][0] = a[0] * b[0]

        for i in range(1, len(b)):
            dp[i][0] = max(dp[i-1][0], a[0] * b[i])
            for j in range(1, 4):
                if dp[i-1][j-1] != -inf:
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[j] * b[i])

        return max(dp[-1][3], max(dp[len(b)-1][3], dp[len(b)-2][3], dp[len(b)-3][3], dp[len(b)-4][3]))

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80]) == 700
    assert candidate(a = [10, 20, 30, 40],b = [1, 2, 3, 4]) == 300
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 80
    assert candidate(a = [100000, -100000, 100000, -100000],b = [100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000]) == 40000000000
    assert candidate(a = [-1, -2, -3, -4],b = [-10, -20, -30, -40, -50, -60, -70, -80]) == 700
    assert candidate(a = [10, -10, 10, -10],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -20
    assert candidate(a = [-1, 4, 5, -2],b = [-5, -1, -3, -2, -4]) == -1
    assert candidate(a = [1, 1, 1, 1],b = [1, 2, 3, 4, 5, 6, 7, 8]) == 26
    assert candidate(a = [1, 2, 3, 4],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [-10, -20, -30, -40],b = [-1, -2, -3, -4, -5, -6, -7, -8]) == 700
    assert candidate(a = [0, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0
    assert candidate(a = [3, 2, 5, 6],b = [2, -6, 4, -5, -3, 2, -7]) == 26
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400]) == 1400
    assert candidate(a = [5, 15, 25, 35],b = [-100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000]) == 76500
    assert candidate(a = [100, 200, 300, 400],b = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [1, 3, -2, 4],b = [5, -10, 3, 7, -8, 6, 2, -15, 9, 11]) == 100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == -10
    assert candidate(a = [100, -100, 200, -200],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [5, -3, 2, -1],b = [10, 8, -5, 3, 15, 12, -20, 7, 6, 4, 9, -1]) == 154
    assert candidate(a = [100, -50, 25, -12],b = [-100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100, -100, 100]) == 18700
    assert candidate(a = [10, 20, 30, 40],b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000, 200000, 300000, 400000, 500000, 600000]) == 50000000
    assert candidate(a = [-5, -10, -15, -20],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -150
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 25000
    assert candidate(a = [1, -2, 3, -4],b = [100, -50, 200, -250, 300, -350, 400, -450, 500]) == 4000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000]) == 0
    assert candidate(a = [5, 3, 1, -2],b = [-100, 50, -20, 10, 0, -5, 3, 8, -15, 7]) == 318
    assert candidate(a = [100, 200, 300, 400],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19000
    assert candidate(a = [0, 0, 0, 0],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 0
    assert candidate(a = [1, 1, 1, 1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, 1, 2, 3, 4]) == 10
    assert candidate(a = [-100000, -200000, -300000, -400000],b = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000]) == -300000000000
    assert candidate(a = [1, -1, 1, -1],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -2
    assert candidate(a = [1, 1, 1, 1],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == 399994
    assert candidate(a = [5, 15, 25, 35],b = [-10, 5, -20, 15, -30, 25, -40, 35, -50, 45]) == 2900
    assert candidate(a = [-1, 2, -3, 4],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 45000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000]) == 30000000000
    assert candidate(a = [10, 15, -20, 25],b = [3, 7, -5, 8, 2, -1, 10, -4, 6, 12, -3, 9, 11, -6, 15, -8, 14, -7, 13, -2]) == 855
    assert candidate(a = [1, -1, 1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0
    assert candidate(a = [5, -3, 2, 7],b = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25]) == 392
    assert candidate(a = [100, -50, 75, 25],b = [-99999, 50000, 25000, -10000, 30000, -5000, 2000, -3000, 1000, -2000]) == 7800000
    assert candidate(a = [1, 2, 3, 4],b = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]) == -999920
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]) == -999920
    assert candidate(a = [100, 200, 300, 400],b = [99999, -99999, 88888, -88888, 77777, -77777, 66666, -66666, 55555, -55555, 44444, -44444, 33333, -33333, 22222, -22222, 11111, -11111, 1, -1]) == 77777000
    assert candidate(a = [500, -500, 1000, -1000],b = [100, -200, 300, -400, 500, -600, 700, -800, 900, -1000, 1100, -1200, 1300, -1400, 1500]) == 3850000
    assert candidate(a = [-1, -2, -3, -4],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 900000
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, -500, -600, -700, -800]) == -300000
    assert candidate(a = [10, -10, 10, -10],b = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]) == 800
    assert candidate(a = [-5, 3, 2, -1],b = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]) == -8000
    assert candidate(a = [-1, -2, -3, -4],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 90
    assert candidate(a = [1, 1, 1, 1],b = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]) == -100
    assert candidate(a = [-1, -1, -1, -1],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -4
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -20
    assert candidate(a = [1, 1, 1, 1],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34
    assert candidate(a = [0, 0, 0, 0],b = [10000, -10000, 20000, -20000, 30000, -30000, 40000, -40000]) == 0
    assert candidate(a = [1000, 2000, -1500, 500],b = [-100, 200, -300, 400, -500, 600, -700, 800, -900, 1000, -1100, 1200]) == 5050000
    assert candidate(a = [-1000, -2000, -3000, -4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == -30000
    assert candidate(a = [-10, -20, -30, -40],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -300
    assert candidate(a = [1, 1, 1, 1],b = [100000, -100000, 200000, -200000, 300000, -300000, 400000, -400000, 500000, -500000, 600000, -600000, 700000, -700000, 800000, -800000, 900000, -900000, 1000000, -1000000]) == 3400000
    assert candidate(a = [10, 20, 30, 40],b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100
    assert candidate(a = [100, -50, 25, -10],b = [500, -400, 300, -200, 100, -50, 20, -10, 0, 10, 20, 50, 100, 200, 300, 400, 500]) == 79500
    assert candidate(a = [100000, 200000, 300000, 400000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 14000000
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]) == 190000000
    assert candidate(a = [5, -5, 5, -5],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625, 312, -312, 156, -156, 78, -78, 39, -39, 19, -19, 9, -9, 4, -4, 2, -2, 1, -1]) == 150000
    assert candidate(a = [1, -2, 3, -4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120, 130, -140, 150, -160, 170]) == 1500
    assert candidate(a = [10, 20, 30, 40],b = [-10000, 20000, -30000, 40000, -50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000]) == 12000000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]) == 30
    assert candidate(a = [-100, -200, -300, -400],b = [-99999, 99999, -88888, 88888, -77777, 77777, -66666, 66666, -55555, 55555, -44444, 44444, -33333, 33333, -22222, 22222, -11111, 11111, -1, 1]) == 77777000
    assert candidate(a = [1000, -1000, 500, -500],b = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625]) == 25000000
    assert candidate(a = [0, 0, 0, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 2000
    assert candidate(a = [1, -1, 1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == 38
    assert candidate(a = [-100, 200, -300, 400],b = [-99999, 99998, -99997, 99996, -99995, 99994, -99993, 99992, -99991, 99990]) == 99997000
    assert candidate(a = [0, 0, 0, 0],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250]) == 0
    assert candidate(a = [1, 1, -1, -1],b = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10]) == 32
    assert candidate(a = [5, -1, 3, 2],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 164
    assert candidate(a = [-1, -1, -1, -1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == -10
    assert candidate(a = [1, 2, 3, 4],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 900
    assert candidate(a = [1, 1, 1, 1],b = [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, -990, -989, -988]) == -3958
    assert candidate(a = [1, 1, 1, 1],b = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]) == 340000
    assert candidate(a = [100000, -100000, 50000, -50000],b = [-99999, 99999, -99998, 99998, -99997, 99997, -99996, 99996, -99995, 99995]) == 29999450000
    assert candidate(a = [1, -2, 3, -4],b = [-50000, 50000, -25000, 25000, -12500, 12500, -6250, 6250, -3125, 3125, -1562, 1562, -781, 781, -390, 390, -195, 195, -97, 97, -48, 48, -24, 24, -12, 12, -6, 6, -3, 3, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 225000
    assert candidate(a = [10, 0, 5, 0],b = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]) == 140
    assert candidate(a = [1, 2, 3, 4],b = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 90
    assert candidate(a = [5, 3, 1, 2],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100]) == 560
    assert candidate(a = [1, 2, 3, 4],b = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100, 110, -120]) == 900
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990]) == 9980000
    assert candidate(a = [100, 200, 300, 400],b = [-5000, 6000, -7000, 8000, -9000, 10000, -11000, 12000, -13000, 14000, -15000, 16000, -17000, 18000, -19000, 20000, -21000, 22000, -23000, 24000, -25000, 26000, -27000, 28000, -29000, 30000]) == 28000000
    assert candidate(a = [1, -1, 1, -1],b = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500, 600, -600, 700, -700, 800, -800, 900, -900, 1000, -1000, 1100, -1100, 1200, -1200, 1300, -1300, 1400, -1400, 1500, -1500]) == 5800
    assert candidate(a = [-5, 3, 7, -2],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 7800
    assert candidate(a = [0, 0, 0, 1],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10
    assert candidate(a = [-10, -20, -30, -40],b = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == 90000
    assert candidate(a = [1, 2, 3, 4],b = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -30
    assert candidate(a = [1000, 2000, 3000, 4000],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 290000
    assert candidate(a = [1, 1, 1, 1],b = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]) == 7400
    assert candidate(a = [1, 0, 0, 0],b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7
    assert candidate(a = [100000, -100000, 200000, -200000],b = [-50000, 60000, -70000, 80000, -90000, 100000, -110000, 120000, -130000, 140000, -150000, 160000, -170000, 180000, -190000, 200000, -210000, 220000, -230000, 240000]) == 131000000000
    assert candidate(a = [0, 0, 0, 1],b = [100000, -100000, 50000, -50000, 25000, -25000, 12500, -12500, 6250, -6250, 3125, -3125, 1562, -1562, 781, -781, 390, -390, 195, -195, 97, -97, 48, -48, 24, -24, 12, -12, 6, -6, 3, -3, 1, -1, 0, 0, 0, 0]) == 25000
    assert candidate(a = [1, -1, 1, -1],b = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]) == -20
    assert candidate(a = [3, 1, -4, 2],b = [5, -7, 12, 3, 1, -9, 8, -1, 10, 4]) == 95
    assert candidate(a = [-5, 2, -3, 1],b = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14]) == 132
    assert candidate(a = [1, 2, 3, 4],b = [-5, 4, -3, 2, -1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 71
    assert candidate(a = [100, 200, 300, 400],b = [-100, -200, -300, -400, 500, 600, 700, 800, 900, 1000]) == 900000
    assert candidate(a = [1, 1, 1, 1],b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 34
    assert candidate(a = [100, -200, 300, -400],b = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == -1000000
    assert candidate(a = [5, -5, 3, -3],b = [20, -20, 15, -15, 10, -10, 5, -5, 0, 5, -5, 10, -10, 15, -15, 20, -20, 25, -25, 30, -30]) == 430


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maxScore)

2025-05-22 06:13:35,767 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.834370613098145,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:13:35,767 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 06:13:35,767 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:13:35,767 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:13:35,768 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427550160 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:13:35,768 [DEBUG] filelock (_api.py:334): Lock 140657427550160 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:13:35,768 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:13:35,946 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427550160 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:13:35,946 [DEBUG] filelock (_api.py:367): Lock 140657427550160 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:13:35,946 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:13:35,946 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:13:35,948 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/maximum-multiplication-score.json
2025-05-22 06:13:35,948 [INFO] root (run_leetcode_solver.py:373): Processed problem maximum-multiplication-score in 111.47 seconds
2025-05-22 06:13:35,948 [INFO] root (run_leetcode_solver.py:348): Processing problem ID minimum-number-of-valid-strings-to-form-target-i with model deepseek-r1-distill
2025-05-22 06:13:36,085 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem minimum-number-of-valid-strings-to-form-target-i
2025-05-22 06:13:36,085 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:13:36,278 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:13:36,279 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:36,279 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:13:36,279 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:00,328 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:00,329 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:00,329 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:00,329 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:00,329 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1033 chars)
2025-05-22 06:14:00,524 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:00,524 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:00,524 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:00,524 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:24,571 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:24,572 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:24,572 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:24,572 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:24,572 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (937 chars)
2025-05-22 06:14:24,754 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:24,754 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:24,755 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:24,755 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:40,289 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:40,289 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:40,289 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:40,289 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:40,290 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (697 chars)
2025-05-22 06:14:40,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        max_len = max(len(word) for word in words) if words else 0
        prefix_map = {}
        for word in words:
            for i in range(1, len(word)+1):
                prefix = word[:i]
                if prefix not in prefix_map or i > prefix_map[prefix]:
                    prefix_map[prefix] = i
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        for i in range(n):
            if dp[i] == float('inf'):
                continue
            current = target[i:]
            max_possible = min(max_len, len(current))
            for l in range(1, max_possible + 1):
                substr = current[:l]
                if substr in prefix_map:
                    new_len = i + l
                    if new_len > n:
                        continue
                    if dp[new_len] > dp[i] + 1:
                        dp[new_len] = dp[i] + 1
        return dp[n] if dp[n] != float('inf') else -1
2025-05-22 06:14:40,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(words = ['abc'],target = "abcabc") == 2
    assert candidate(words = ['ab', 'ba'],target = "abab") == 2
    assert candidate(words = ['a', 'b', 'c', 'd'],target = "abcdabcdabcd") == 12
    assert candidate(words = ['abcde', 'fghij', 'klmno'],target = "abcdefghijklmno") == 3
    assert candidate(words = ['z'],target = "zzzzzzzzzz") == 10
    assert candidate(words = ['abababab', 'ab'],target = "ababaababa") == 2
    assert candidate(words = ['abc', 'abc', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaa") == 2
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['abcdef'],target = "xyz") == -1
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaaaaaa") == 4
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaa") == 2
    assert candidate(words = ['aa', 'bb', 'cc'],target = "aabbcc") == 3
    assert candidate(words = ['ab', 'bc', 'cd'],target = "abcd") == 2
    assert candidate(words = ['abcd', 'efgh', 'ijkl'],target = "abcdefghijl") == -1
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['hello', 'world'],target = "helloworld") == 2
    assert candidate(words = ['a', 'ab', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['abc', 'def', 'ghi'],target = "abcdef") == 2
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['hello', 'world'],target = "world") == 1
    assert candidate(words = ['a'],target = "aaaaa") == 5
    assert candidate(words = ['a', 'ab', 'abc'],target = "abc") == 1
    assert candidate(words = ['prefix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'aaaaa', 'bcdef'],target = "aabcdabc") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmno") == 5
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'bca', 'cab'],target = "abcabcabcabc") == 4
    assert candidate(words = ['aaa', 'aaaa', 'aaaaa', 'aaaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 3
    assert candidate(words = ['jump', 'jum', 'ju', 'j'],target = "jumpjumpjump") == 3
    assert candidate(words = ['ab', 'ba', 'aba', 'bab', 'abab'],target = "ababbababababa") == 4
    assert candidate(words = ['brown', 'brow', 'bro', 'br', 'b'],target = "brownbrownbrow") == 3
    assert candidate(words = ['aaa', 'aa', 'a', 'aaaa'],target = "aaaaaaaaa") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4
    assert candidate(words = ['abcdefghij', 'jihgfedcba', 'abcdefgh', 'hgfedcba'],target = "abcdefghijhgfedcbahgfedcba") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmnopqrstuvwxyza") == -1
    assert candidate(words = ['lazy', 'laz', 'la', 'l'],target = "lazylazy") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 4
    assert candidate(words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],target = "onetwothreefourfivesixseveneightnineten") == 10
    assert candidate(words = ['repeated', 'repeat', 're', 'rep', 'repe'],target = "repeatedrepeated") == 2
    assert candidate(words = ['abcd', 'bcd', 'cd', 'd'],target = "abcdbcdbcd") == 3
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothree") == 3
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhello") == 3
    assert candidate(words = ['xyz', 'zyx', 'yz', 'zx', 'yx'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx', 'fixxx'],target = "prefixfixfixxxfixfixfixx") == 6
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyzyxzyzyx") == -1
    assert candidate(words = ['longprefix', 'longerprefix', 'longestprefix'],target = "longestprefixlongprefixlongerprefix") == 3
    assert candidate(words = ['dog', 'do', 'd'],target = "dogdogdog") == 3
    assert candidate(words = ['short', 'longer', 'longestword'],target = "shortlongerlongestwordshortlongerlongestwordshortlongerlongestword") == 9
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcabcabcabc") == 4
    assert candidate(words = ['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk'],target = "abcdefghijk") == 2
    assert candidate(words = ['unique', 'words', 'only', 'here'],target = "uniquewordsonlyhere") == 4
    assert candidate(words = ['abcdefgh', 'ijklmnop', 'qrstuvwx', 'yz'],target = "abcdefghijklmnopqrstuvwxyzyz") == 5
    assert candidate(words = ['abab', 'baba', 'abba', 'baab', 'aaaa'],target = "ababbabaabbaab") == 4
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhelloworld") == 4
    assert candidate(words = ['longword', 'longerword', 'longestword'],target = "longwordlongerwordlongestwordlongestwordlongestword") == 5
    assert candidate(words = ['hello', 'hell', 'he', 'h'],target = "hellohello") == 2
    assert candidate(words = ['prefix', 'prefixprefix', 'prefixprefixprefix'],target = "prefixprefixprefixprefix") == 2
    assert candidate(words = ['ab', 'abc', 'abcd'],target = "abcabcdab") == 3
    assert candidate(words = ['aaa', 'aab', 'aac', 'aad'],target = "aaabaaacaaad") == 6
    assert candidate(words = ['small', 'big', 'medium'],target = "smallbigmediumbig") == 4
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['hello', 'world', 'hel', 'lo', 'wor', 'ld'],target = "helloworld") == 2
    assert candidate(words = ['giraffe', 'gira', 'gir', 'gi', 'g'],target = "giraffegiraffe") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['one', 'on', 'o'],target = "ononeone") == 3
    assert candidate(words = ['x', 'y', 'z', 'xy', 'yz', 'xz', 'xyz'],target = "xyzxyzxyz") == 3
    assert candidate(words = ['prefix', 'fix', 'pre', 'prefixfix'],target = "prefixprefix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],target = "abcdefghijklmnopqrstuvwxyz") == 26
    assert candidate(words = ['prefix', 'pre', 'fix', 'prefixfix'],target = "prefixprefixfix") == 2
    assert candidate(words = ['aabb', 'ab', 'aab', 'aa'],target = "aabbabaaababaab") == 6
    assert candidate(words = ['pqr', 'pq', 'p'],target = "pqrpqppqrpqpp") == 7
    assert candidate(words = ['abc', 'abcabc', 'abcabcabc', 'abcabcabcabc'],target = "abcabcabcabcabcabcabcabcabcabc") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxzyz") == -1
    assert candidate(words = ['prefix', 'suffix', 'pre', 'fix', 'postfix'],target = "prefixpostfix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "abcdeabcdeabcde") == 15
    assert candidate(words = ['abcd', 'abcde', 'abcdef', 'abcdefg'],target = "abcdefgabcdefgabcdefg") == 3
    assert candidate(words = ['abcd', 'bcde', 'cdef', 'defg'],target = "abcdefg") == 2
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabc") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdef") == 2
    assert candidate(words = ['hello', 'hellohello', 'hellohellohello'],target = "hellohellohellohellohellohello") == 2
    assert candidate(words = ['quick', 'qui', 'qu', 'q'],target = "quickquick") == 2
    assert candidate(words = ['xyz', 'yz', 'z'],target = "xyzxyz") == 2
    assert candidate(words = ['longword', 'long', 'lo', 'l'],target = "longwordlongwordlongword") == 3
    assert candidate(words = ['panda', 'pan', 'pa', 'p'],target = "pandapanpapanda") == 4
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijkl") == 4
    assert candidate(words = ['abc', 'b', 'c'],target = "abcbabcbabc") == 5
    assert candidate(words = ['repeated', 'repeat', 'rep', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['zebra', 'zeb', 'ze', 'z'],target = "zebrazebrazebra") == 3
    assert candidate(words = ['abc', 'cba', 'bac'],target = "abcbacbac") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['ab', 'a', 'b'],target = "abababababab") == 6
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['longprefix', 'prefix', 'fix', 'suffix'],target = "longprefixsuffix") == 2
    assert candidate(words = ['fox', 'fo', 'f'],target = "foxfoxfoxfox") == 4
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcaba") == 4
    assert candidate(words = ['pqr', 'pq', 'p'],target = "ppppqqqrrr") == -1
    assert candidate(words = ['prefix', 'prefi', 'pref', 'pre', 'pr'],target = "prefixprefix") == 2
    assert candidate(words = ['cat', 'ca', 'c'],target = "catcatcatcat") == 4
    assert candidate(words = ['prefix', 'pref', 'pre', 'p'],target = "prefixprefix") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdefg") == -1
    assert candidate(words = ['apple', 'banana', 'cherry'],target = "applebananaapple") == 3
    assert candidate(words = ['partial', 'part', 'par', 'pa', 'p'],target = "partialpartparpap") == 5
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcab") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx'],target = "prefixprefixfixfixxfix") == 5
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['prefix', 'prefixing', 'pre', 'fix', 'fixing'],target = "prefixprefixfix") == 3
    assert candidate(words = ['qwerty', 'werty', 'erty', 'rty', 'ty', 'y', 'yt', 'tyu'],target = "qwertytyutytutytutytutytutytutytutytutu") == -1
    assert candidate(words = ['abac', 'bac', 'cab', 'abc'],target = "abacbacabc") == 3
    assert candidate(words = ['over', 'ove', 'ov', 'o'],target = "overoverover") == 3
    assert candidate(words = ['aaaaa', 'aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 21
    assert candidate(words = ['abcde', 'cdefg', 'efghi', 'fghij'],target = "abcdefghij") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "edcba") == 5
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothreeonetwo") == 5
    assert candidate(words = ['abc', 'ab', 'a'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcd") == 2
    assert candidate(words = ['hello', 'hi', 'h', 'he', 'hel'],target = "hellohellohi") == 3
    assert candidate(words = ['xyz', 'zyx', 'yyz', 'xzy'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['same', 'same', 'same'],target = "samesamesamesamesame") == 5
    assert candidate(words = ['pqr', 'pr', 'qr', 'r', 'pq', 'q'],target = "pqrprqrpqr") == 4
    assert candidate(words = ['test', 'testing', 'testcase'],target = "testtestingtestcase") == 3
    assert candidate(words = ['abcd', 'bcd', 'cde', 'def', 'efg', 'fgh'],target = "abcdefg") == 2
    assert candidate(words = ['abc', 'abcd', 'abcde'],target = "abcdeabcdeabcde") == 3
    assert candidate(words = ['complex', 'words', 'example'],target = "complexwordscomplex") == 3
    assert candidate(words = ['elephant', 'elepha', 'eleph', 'elep', 'ele', 'el', 'e'],target = "elephantelephant") == 2
    assert candidate(words = ['abc', 'bc', 'c', 'abcd'],target = "abcabcabc") == 3
    assert candidate(words = ['xyz', 'zyx', 'yzx'],target = "xyzzyxyzzyx") == 4
    assert candidate(words = ['xy', 'xyz', 'xyza', 'xyzabc'],target = "xyzabcxyzabcxyz") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxyzyx") == -1
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],target = "abcdefghij") == 10
    assert candidate(words = ['aaa', 'bbb', 'ccc'],target = "aaabbbccc") == 3
    assert candidate(words = ['abc', 'abcd', 'ab', 'bcde'],target = "abcdabcde") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd', 'abcde'],target = "abcdeabcde") == 2
    assert candidate(words = ['xyz', 'zyx', 'yxz', 'yxzyx'],target = "xyzzyxzyxzyxzyxzyx") == 6
    assert candidate(words = ['zzz', 'zz', 'z'],target = "zzzzzzzzzzzzzzzzzzzz") == 7
    assert candidate(words = ['z', 'yz', 'xyz', 'wxyz'],target = "wxyzwxyzwxyz") == 3
    assert candidate(words = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'],target = "abcacbabcabc") == 4
    assert candidate(words = ['abcde', 'bcd', 'cde', 'efg'],target = "abcdecdefg") == 3
    assert candidate(words = ['repeated', 'repeate', 'repea', 'repe', 'rep', 're', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['aaaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['onetwo', 'one', 'two', 'three'],target = "onetwothreeonetwo") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4

2025-05-22 06:14:40,290 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().minValidStrings
2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(words = ['abc'],target = "abcabc") == 2
    assert candidate(words = ['ab', 'ba'],target = "abab") == 2
    assert candidate(words = ['a', 'b', 'c', 'd'],target = "abcdabcdabcd") == 12
    assert candidate(words = ['abcde', 'fghij', 'klmno'],target = "abcdefghijklmno") == 3
    assert candidate(words = ['z'],target = "zzzzzzzzzz") == 10
    assert candidate(words = ['abababab', 'ab'],target = "ababaababa") == 2
    assert candidate(words = ['abc', 'abc', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaa") == 2
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['abcdef'],target = "xyz") == -1
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaaaaaa") == 4
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaa") == 2
    assert candidate(words = ['aa', 'bb', 'cc'],target = "aabbcc") == 3
    assert candidate(words = ['ab', 'bc', 'cd'],target = "abcd") == 2
    assert candidate(words = ['abcd', 'efgh', 'ijkl'],target = "abcdefghijl") == -1
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['hello', 'world'],target = "helloworld") == 2
    assert candidate(words = ['a', 'ab', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['abc', 'def', 'ghi'],target = "abcdef") == 2
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['hello', 'world'],target = "world") == 1
    assert candidate(words = ['a'],target = "aaaaa") == 5
    assert candidate(words = ['a', 'ab', 'abc'],target = "abc") == 1
    assert candidate(words = ['prefix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'aaaaa', 'bcdef'],target = "aabcdabc") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmno") == 5
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'bca', 'cab'],target = "abcabcabcabc") == 4
    assert candidate(words = ['aaa', 'aaaa', 'aaaaa', 'aaaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 3
    assert candidate(words = ['jump', 'jum', 'ju', 'j'],target = "jumpjumpjump") == 3
    assert candidate(words = ['ab', 'ba', 'aba', 'bab', 'abab'],target = "ababbababababa") == 4
    assert candidate(words = ['brown', 'brow', 'bro', 'br', 'b'],target = "brownbrownbrow") == 3
    assert candidate(words = ['aaa', 'aa', 'a', 'aaaa'],target = "aaaaaaaaa") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4
    assert candidate(words = ['abcdefghij', 'jihgfedcba', 'abcdefgh', 'hgfedcba'],target = "abcdefghijhgfedcbahgfedcba") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmnopqrstuvwxyza") == -1
    assert candidate(words = ['lazy', 'laz', 'la', 'l'],target = "lazylazy") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 4
    assert candidate(words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],target = "onetwothreefourfivesixseveneightnineten") == 10
    assert candidate(words = ['repeated', 'repeat', 're', 'rep', 'repe'],target = "repeatedrepeated") == 2
    assert candidate(words = ['abcd', 'bcd', 'cd', 'd'],target = "abcdbcdbcd") == 3
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothree") == 3
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhello") == 3
    assert candidate(words = ['xyz', 'zyx', 'yz', 'zx', 'yx'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx', 'fixxx'],target = "prefixfixfixxxfixfixfixx") == 6
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyzyxzyzyx") == -1
    assert candidate(words = ['longprefix', 'longerprefix', 'longestprefix'],target = "longestprefixlongprefixlongerprefix") == 3
    assert candidate(words = ['dog', 'do', 'd'],target = "dogdogdog") == 3
    assert candidate(words = ['short', 'longer', 'longestword'],target = "shortlongerlongestwordshortlongerlongestwordshortlongerlongestword") == 9
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcabcabcabc") == 4
    assert candidate(words = ['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk'],target = "abcdefghijk") == 2
    assert candidate(words = ['unique', 'words', 'only', 'here'],target = "uniquewordsonlyhere") == 4
    assert candidate(words = ['abcdefgh', 'ijklmnop', 'qrstuvwx', 'yz'],target = "abcdefghijklmnopqrstuvwxyzyz") == 5
    assert candidate(words = ['abab', 'baba', 'abba', 'baab', 'aaaa'],target = "ababbabaabbaab") == 4
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhelloworld") == 4
    assert candidate(words = ['longword', 'longerword', 'longestword'],target = "longwordlongerwordlongestwordlongestwordlongestword") == 5
    assert candidate(words = ['hello', 'hell', 'he', 'h'],target = "hellohello") == 2
    assert candidate(words = ['prefix', 'prefixprefix', 'prefixprefixprefix'],target = "prefixprefixprefixprefix") == 2
    assert candidate(words = ['ab', 'abc', 'abcd'],target = "abcabcdab") == 3
    assert candidate(words = ['aaa', 'aab', 'aac', 'aad'],target = "aaabaaacaaad") == 6
    assert candidate(words = ['small', 'big', 'medium'],target = "smallbigmediumbig") == 4
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['hello', 'world', 'hel', 'lo', 'wor', 'ld'],target = "helloworld") == 2
    assert candidate(words = ['giraffe', 'gira', 'gir', 'gi', 'g'],target = "giraffegiraffe") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['one', 'on', 'o'],target = "ononeone") == 3
    assert candidate(words = ['x', 'y', 'z', 'xy', 'yz', 'xz', 'xyz'],target = "xyzxyzxyz") == 3
    assert candidate(words = ['prefix', 'fix', 'pre', 'prefixfix'],target = "prefixprefix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],target = "abcdefghijklmnopqrstuvwxyz") == 26
    assert candidate(words = ['prefix', 'pre', 'fix', 'prefixfix'],target = "prefixprefixfix") == 2
    assert candidate(words = ['aabb', 'ab', 'aab', 'aa'],target = "aabbabaaababaab") == 6
    assert candidate(words = ['pqr', 'pq', 'p'],target = "pqrpqppqrpqpp") == 7
    assert candidate(words = ['abc', 'abcabc', 'abcabcabc', 'abcabcabcabc'],target = "abcabcabcabcabcabcabcabcabcabc") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxzyz") == -1
    assert candidate(words = ['prefix', 'suffix', 'pre', 'fix', 'postfix'],target = "prefixpostfix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "abcdeabcdeabcde") == 15
    assert candidate(words = ['abcd', 'abcde', 'abcdef', 'abcdefg'],target = "abcdefgabcdefgabcdefg") == 3
    assert candidate(words = ['abcd', 'bcde', 'cdef', 'defg'],target = "abcdefg") == 2
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabc") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdef") == 2
    assert candidate(words = ['hello', 'hellohello', 'hellohellohello'],target = "hellohellohellohellohellohello") == 2
    assert candidate(words = ['quick', 'qui', 'qu', 'q'],target = "quickquick") == 2
    assert candidate(words = ['xyz', 'yz', 'z'],target = "xyzxyz") == 2
    assert candidate(words = ['longword', 'long', 'lo', 'l'],target = "longwordlongwordlongword") == 3
    assert candidate(words = ['panda', 'pan', 'pa', 'p'],target = "pandapanpapanda") == 4
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijkl") == 4
    assert candidate(words = ['abc', 'b', 'c'],target = "abcbabcbabc") == 5
    assert candidate(words = ['repeated', 'repeat', 'rep', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['zebra', 'zeb', 'ze', 'z'],target = "zebrazebrazebra") == 3
    assert candidate(words = ['abc', 'cba', 'bac'],target = "abcbacbac") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['ab', 'a', 'b'],target = "abababababab") == 6
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['longprefix', 'prefix', 'fix', 'suffix'],target = "longprefixsuffix") == 2
    assert candidate(words = ['fox', 'fo', 'f'],target = "foxfoxfoxfox") == 4
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcaba") == 4
    assert candidate(words = ['pqr', 'pq', 'p'],target = "ppppqqqrrr") == -1
    assert candidate(words = ['prefix', 'prefi', 'pref', 'pre', 'pr'],target = "prefixprefix") == 2
    assert candidate(words = ['cat', 'ca', 'c'],target = "catcatcatcat") == 4
    assert candidate(words = ['prefix', 'pref', 'pre', 'p'],target = "prefixprefix") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdefg") == -1
    assert candidate(words = ['apple', 'banana', 'cherry'],target = "applebananaapple") == 3
    assert candidate(words = ['partial', 'part', 'par', 'pa', 'p'],target = "partialpartparpap") == 5
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcab") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx'],target = "prefixprefixfixfixxfix") == 5
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['prefix', 'prefixing', 'pre', 'fix', 'fixing'],target = "prefixprefixfix") == 3
    assert candidate(words = ['qwerty', 'werty', 'erty', 'rty', 'ty', 'y', 'yt', 'tyu'],target = "qwertytyutytutytutytutytutytutytutytutu") == -1
    assert candidate(words = ['abac', 'bac', 'cab', 'abc'],target = "abacbacabc") == 3
    assert candidate(words = ['over', 'ove', 'ov', 'o'],target = "overoverover") == 3
    assert candidate(words = ['aaaaa', 'aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 21
    assert candidate(words = ['abcde', 'cdefg', 'efghi', 'fghij'],target = "abcdefghij") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "edcba") == 5
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothreeonetwo") == 5
    assert candidate(words = ['abc', 'ab', 'a'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcd") == 2
    assert candidate(words = ['hello', 'hi', 'h', 'he', 'hel'],target = "hellohellohi") == 3
    assert candidate(words = ['xyz', 'zyx', 'yyz', 'xzy'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['same', 'same', 'same'],target = "samesamesamesamesame") == 5
    assert candidate(words = ['pqr', 'pr', 'qr', 'r', 'pq', 'q'],target = "pqrprqrpqr") == 4
    assert candidate(words = ['test', 'testing', 'testcase'],target = "testtestingtestcase") == 3
    assert candidate(words = ['abcd', 'bcd', 'cde', 'def', 'efg', 'fgh'],target = "abcdefg") == 2
    assert candidate(words = ['abc', 'abcd', 'abcde'],target = "abcdeabcdeabcde") == 3
    assert candidate(words = ['complex', 'words', 'example'],target = "complexwordscomplex") == 3
    assert candidate(words = ['elephant', 'elepha', 'eleph', 'elep', 'ele', 'el', 'e'],target = "elephantelephant") == 2
    assert candidate(words = ['abc', 'bc', 'c', 'abcd'],target = "abcabcabc") == 3
    assert candidate(words = ['xyz', 'zyx', 'yzx'],target = "xyzzyxyzzyx") == 4
    assert candidate(words = ['xy', 'xyz', 'xyza', 'xyzabc'],target = "xyzabcxyzabcxyz") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxyzyx") == -1
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],target = "abcdefghij") == 10
    assert candidate(words = ['aaa', 'bbb', 'ccc'],target = "aaabbbccc") == 3
    assert candidate(words = ['abc', 'abcd', 'ab', 'bcde'],target = "abcdabcde") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd', 'abcde'],target = "abcdeabcde") == 2
    assert candidate(words = ['xyz', 'zyx', 'yxz', 'yxzyx'],target = "xyzzyxzyxzyxzyxzyx") == 6
    assert candidate(words = ['zzz', 'zz', 'z'],target = "zzzzzzzzzzzzzzzzzzzz") == 7
    assert candidate(words = ['z', 'yz', 'xyz', 'wxyz'],target = "wxyzwxyzwxyz") == 3
    assert candidate(words = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'],target = "abcacbabcabc") == 4
    assert candidate(words = ['abcde', 'bcd', 'cde', 'efg'],target = "abcdecdefg") == 3
    assert candidate(words = ['repeated', 'repeate', 'repea', 'repe', 'rep', 're', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['aaaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['onetwo', 'one', 'two', 'three'],target = "onetwothreeonetwo") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4

2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().minValidStrings
2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        max_len = max(len(word) for word in words) if words else 0
        prefix_map = {}
        for word in words:
            for i in range(1, len(word)+1):
                prefix = word[:i]
                if prefix not in prefix_map or i > prefix_map[prefix]:
                    prefix_map[prefix] = i
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        for i in range(n):
            if dp[i] == float('inf'):
                continue
            current = target[i:]
            max_possible = min(max_len, len(current))
            for l in range(1, max_possible + 1):
                substr = current[:l]
                if substr in prefix_map:
                    new_len = i + l
                    if new_len > n:
                        continue
                    if dp[new_len] > dp[i] + 1:
                        dp[new_len] = dp[i] + 1
        return dp[n] if dp[n] != float('inf') else -1
2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        max_len = max(len(word) for word in words) if words else 0
        prefix_map = {}
        for word in words:
            for i in range(1, len(word)+1):
                prefix = word[:i]
                if prefix not in prefix_map or i > prefix_map[prefix]:
                    prefix_map[prefix] = i
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        for i in range(n):
            if dp[i] == float('inf'):
                continue
            current = target[i:]
            max_possible = min(max_len, len(current))
            for l in range(1, max_possible + 1):
                substr = current[:l]
                if substr in prefix_map:
                    new_len = i + l
                    if new_len > n:
                        continue
                    if dp[new_len] > dp[i] + 1:
                        dp[new_len] = dp[i] + 1
        return dp[n] if dp[n] != float('inf') else -1

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(words = ['abc'],target = "abcabc") == 2
    assert candidate(words = ['ab', 'ba'],target = "abab") == 2
    assert candidate(words = ['a', 'b', 'c', 'd'],target = "abcdabcdabcd") == 12
    assert candidate(words = ['abcde', 'fghij', 'klmno'],target = "abcdefghijklmno") == 3
    assert candidate(words = ['z'],target = "zzzzzzzzzz") == 10
    assert candidate(words = ['abababab', 'ab'],target = "ababaababa") == 2
    assert candidate(words = ['abc', 'abc', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaa") == 2
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['abcdef'],target = "xyz") == -1
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaaaaaa") == 4
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaa") == 2
    assert candidate(words = ['aa', 'bb', 'cc'],target = "aabbcc") == 3
    assert candidate(words = ['ab', 'bc', 'cd'],target = "abcd") == 2
    assert candidate(words = ['abcd', 'efgh', 'ijkl'],target = "abcdefghijl") == -1
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['hello', 'world'],target = "helloworld") == 2
    assert candidate(words = ['a', 'ab', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['abc', 'def', 'ghi'],target = "abcdef") == 2
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['hello', 'world'],target = "world") == 1
    assert candidate(words = ['a'],target = "aaaaa") == 5
    assert candidate(words = ['a', 'ab', 'abc'],target = "abc") == 1
    assert candidate(words = ['prefix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'aaaaa', 'bcdef'],target = "aabcdabc") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmno") == 5
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'bca', 'cab'],target = "abcabcabcabc") == 4
    assert candidate(words = ['aaa', 'aaaa', 'aaaaa', 'aaaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 3
    assert candidate(words = ['jump', 'jum', 'ju', 'j'],target = "jumpjumpjump") == 3
    assert candidate(words = ['ab', 'ba', 'aba', 'bab', 'abab'],target = "ababbababababa") == 4
    assert candidate(words = ['brown', 'brow', 'bro', 'br', 'b'],target = "brownbrownbrow") == 3
    assert candidate(words = ['aaa', 'aa', 'a', 'aaaa'],target = "aaaaaaaaa") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4
    assert candidate(words = ['abcdefghij', 'jihgfedcba', 'abcdefgh', 'hgfedcba'],target = "abcdefghijhgfedcbahgfedcba") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmnopqrstuvwxyza") == -1
    assert candidate(words = ['lazy', 'laz', 'la', 'l'],target = "lazylazy") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 4
    assert candidate(words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],target = "onetwothreefourfivesixseveneightnineten") == 10
    assert candidate(words = ['repeated', 'repeat', 're', 'rep', 'repe'],target = "repeatedrepeated") == 2
    assert candidate(words = ['abcd', 'bcd', 'cd', 'd'],target = "abcdbcdbcd") == 3
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothree") == 3
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhello") == 3
    assert candidate(words = ['xyz', 'zyx', 'yz', 'zx', 'yx'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx', 'fixxx'],target = "prefixfixfixxxfixfixfixx") == 6
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyzyxzyzyx") == -1
    assert candidate(words = ['longprefix', 'longerprefix', 'longestprefix'],target = "longestprefixlongprefixlongerprefix") == 3
    assert candidate(words = ['dog', 'do', 'd'],target = "dogdogdog") == 3
    assert candidate(words = ['short', 'longer', 'longestword'],target = "shortlongerlongestwordshortlongerlongestwordshortlongerlongestword") == 9
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcabcabcabc") == 4
    assert candidate(words = ['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk'],target = "abcdefghijk") == 2
    assert candidate(words = ['unique', 'words', 'only', 'here'],target = "uniquewordsonlyhere") == 4
    assert candidate(words = ['abcdefgh', 'ijklmnop', 'qrstuvwx', 'yz'],target = "abcdefghijklmnopqrstuvwxyzyz") == 5
    assert candidate(words = ['abab', 'baba', 'abba', 'baab', 'aaaa'],target = "ababbabaabbaab") == 4
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhelloworld") == 4
    assert candidate(words = ['longword', 'longerword', 'longestword'],target = "longwordlongerwordlongestwordlongestwordlongestword") == 5
    assert candidate(words = ['hello', 'hell', 'he', 'h'],target = "hellohello") == 2
    assert candidate(words = ['prefix', 'prefixprefix', 'prefixprefixprefix'],target = "prefixprefixprefixprefix") == 2
    assert candidate(words = ['ab', 'abc', 'abcd'],target = "abcabcdab") == 3
    assert candidate(words = ['aaa', 'aab', 'aac', 'aad'],target = "aaabaaacaaad") == 6
    assert candidate(words = ['small', 'big', 'medium'],target = "smallbigmediumbig") == 4
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['hello', 'world', 'hel', 'lo', 'wor', 'ld'],target = "helloworld") == 2
    assert candidate(words = ['giraffe', 'gira', 'gir', 'gi', 'g'],target = "giraffegiraffe") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['one', 'on', 'o'],target = "ononeone") == 3
    assert candidate(words = ['x', 'y', 'z', 'xy', 'yz', 'xz', 'xyz'],target = "xyzxyzxyz") == 3
    assert candidate(words = ['prefix', 'fix', 'pre', 'prefixfix'],target = "prefixprefix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],target = "abcdefghijklmnopqrstuvwxyz") == 26
    assert candidate(words = ['prefix', 'pre', 'fix', 'prefixfix'],target = "prefixprefixfix") == 2
    assert candidate(words = ['aabb', 'ab', 'aab', 'aa'],target = "aabbabaaababaab") == 6
    assert candidate(words = ['pqr', 'pq', 'p'],target = "pqrpqppqrpqpp") == 7
    assert candidate(words = ['abc', 'abcabc', 'abcabcabc', 'abcabcabcabc'],target = "abcabcabcabcabcabcabcabcabcabc") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxzyz") == -1
    assert candidate(words = ['prefix', 'suffix', 'pre', 'fix', 'postfix'],target = "prefixpostfix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "abcdeabcdeabcde") == 15
    assert candidate(words = ['abcd', 'abcde', 'abcdef', 'abcdefg'],target = "abcdefgabcdefgabcdefg") == 3
    assert candidate(words = ['abcd', 'bcde', 'cdef', 'defg'],target = "abcdefg") == 2
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabc") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdef") == 2
    assert candidate(words = ['hello', 'hellohello', 'hellohellohello'],target = "hellohellohellohellohellohello") == 2
    assert candidate(words = ['quick', 'qui', 'qu', 'q'],target = "quickquick") == 2
    assert candidate(words = ['xyz', 'yz', 'z'],target = "xyzxyz") == 2
    assert candidate(words = ['longword', 'long', 'lo', 'l'],target = "longwordlongwordlongword") == 3
    assert candidate(words = ['panda', 'pan', 'pa', 'p'],target = "pandapanpapanda") == 4
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijkl") == 4
    assert candidate(words = ['abc', 'b', 'c'],target = "abcbabcbabc") == 5
    assert candidate(words = ['repeated', 'repeat', 'rep', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['zebra', 'zeb', 'ze', 'z'],target = "zebrazebrazebra") == 3
    assert candidate(words = ['abc', 'cba', 'bac'],target = "abcbacbac") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['ab', 'a', 'b'],target = "abababababab") == 6
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['longprefix', 'prefix', 'fix', 'suffix'],target = "longprefixsuffix") == 2
    assert candidate(words = ['fox', 'fo', 'f'],target = "foxfoxfoxfox") == 4
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcaba") == 4
    assert candidate(words = ['pqr', 'pq', 'p'],target = "ppppqqqrrr") == -1
    assert candidate(words = ['prefix', 'prefi', 'pref', 'pre', 'pr'],target = "prefixprefix") == 2
    assert candidate(words = ['cat', 'ca', 'c'],target = "catcatcatcat") == 4
    assert candidate(words = ['prefix', 'pref', 'pre', 'p'],target = "prefixprefix") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdefg") == -1
    assert candidate(words = ['apple', 'banana', 'cherry'],target = "applebananaapple") == 3
    assert candidate(words = ['partial', 'part', 'par', 'pa', 'p'],target = "partialpartparpap") == 5
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcab") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx'],target = "prefixprefixfixfixxfix") == 5
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['prefix', 'prefixing', 'pre', 'fix', 'fixing'],target = "prefixprefixfix") == 3
    assert candidate(words = ['qwerty', 'werty', 'erty', 'rty', 'ty', 'y', 'yt', 'tyu'],target = "qwertytyutytutytutytutytutytutytutytutu") == -1
    assert candidate(words = ['abac', 'bac', 'cab', 'abc'],target = "abacbacabc") == 3
    assert candidate(words = ['over', 'ove', 'ov', 'o'],target = "overoverover") == 3
    assert candidate(words = ['aaaaa', 'aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 21
    assert candidate(words = ['abcde', 'cdefg', 'efghi', 'fghij'],target = "abcdefghij") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "edcba") == 5
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothreeonetwo") == 5
    assert candidate(words = ['abc', 'ab', 'a'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcd") == 2
    assert candidate(words = ['hello', 'hi', 'h', 'he', 'hel'],target = "hellohellohi") == 3
    assert candidate(words = ['xyz', 'zyx', 'yyz', 'xzy'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['same', 'same', 'same'],target = "samesamesamesamesame") == 5
    assert candidate(words = ['pqr', 'pr', 'qr', 'r', 'pq', 'q'],target = "pqrprqrpqr") == 4
    assert candidate(words = ['test', 'testing', 'testcase'],target = "testtestingtestcase") == 3
    assert candidate(words = ['abcd', 'bcd', 'cde', 'def', 'efg', 'fgh'],target = "abcdefg") == 2
    assert candidate(words = ['abc', 'abcd', 'abcde'],target = "abcdeabcdeabcde") == 3
    assert candidate(words = ['complex', 'words', 'example'],target = "complexwordscomplex") == 3
    assert candidate(words = ['elephant', 'elepha', 'eleph', 'elep', 'ele', 'el', 'e'],target = "elephantelephant") == 2
    assert candidate(words = ['abc', 'bc', 'c', 'abcd'],target = "abcabcabc") == 3
    assert candidate(words = ['xyz', 'zyx', 'yzx'],target = "xyzzyxyzzyx") == 4
    assert candidate(words = ['xy', 'xyz', 'xyza', 'xyzabc'],target = "xyzabcxyzabcxyz") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxyzyx") == -1
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],target = "abcdefghij") == 10
    assert candidate(words = ['aaa', 'bbb', 'ccc'],target = "aaabbbccc") == 3
    assert candidate(words = ['abc', 'abcd', 'ab', 'bcde'],target = "abcdabcde") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd', 'abcde'],target = "abcdeabcde") == 2
    assert candidate(words = ['xyz', 'zyx', 'yxz', 'yxzyx'],target = "xyzzyxzyxzyxzyxzyx") == 6
    assert candidate(words = ['zzz', 'zz', 'z'],target = "zzzzzzzzzzzzzzzzzzzz") == 7
    assert candidate(words = ['z', 'yz', 'xyz', 'wxyz'],target = "wxyzwxyzwxyz") == 3
    assert candidate(words = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'],target = "abcacbabcabc") == 4
    assert candidate(words = ['abcde', 'bcd', 'cde', 'efg'],target = "abcdecdefg") == 3
    assert candidate(words = ['repeated', 'repeate', 'repea', 'repe', 'rep', 're', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['aaaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['onetwo', 'one', 'two', 'three'],target = "onetwothreeonetwo") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minValidStrings)

2025-05-22 06:14:40,290 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        max_len = max(len(word) for word in words) if words else 0
        prefix_map = {}
        for word in words:
            for i in range(1, len(word)+1):
                prefix = word[:i]
                if prefix not in prefix_map or i > prefix_map[prefix]:
                    prefix_map[prefix] = i
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        for i in range(n):
            if dp[i] == float('inf'):
                continue
            current = target[i:]
            max_possible = min(max_len, len(current))
            for l in range(1, max_possible + 1):
                substr = current[:l]
                if substr in prefix_map:
                    new_len = i + l
                    if new_len > n:
                        continue
                    if dp[new_len] > dp[i] + 1:
                        dp[new_len] = dp[i] + 1
        return dp[n] if dp[n] != float('inf') else -1

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(words = ['abc'],target = "abcabc") == 2
    assert candidate(words = ['ab', 'ba'],target = "abab") == 2
    assert candidate(words = ['a', 'b', 'c', 'd'],target = "abcdabcdabcd") == 12
    assert candidate(words = ['abcde', 'fghij', 'klmno'],target = "abcdefghijklmno") == 3
    assert candidate(words = ['z'],target = "zzzzzzzzzz") == 10
    assert candidate(words = ['abababab', 'ab'],target = "ababaababa") == 2
    assert candidate(words = ['abc', 'abc', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaa") == 2
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['abcdef'],target = "xyz") == -1
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['a', 'aa', 'aaa'],target = "aaaaaaaaaa") == 4
    assert candidate(words = ['hello', 'world'],target = "hello") == 1
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaa") == 2
    assert candidate(words = ['aa', 'bb', 'cc'],target = "aabbcc") == 3
    assert candidate(words = ['ab', 'bc', 'cd'],target = "abcd") == 2
    assert candidate(words = ['abcd', 'efgh', 'ijkl'],target = "abcdefghijl") == -1
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['hello', 'world'],target = "helloworld") == 2
    assert candidate(words = ['a', 'ab', 'abc'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'b', 'c'],target = "abc") == 3
    assert candidate(words = ['abc', 'def', 'ghi'],target = "abcdef") == 2
    assert candidate(words = ['prefix', 'pre', 'fix'],target = "prefixfix") == 2
    assert candidate(words = ['hello', 'world'],target = "world") == 1
    assert candidate(words = ['a'],target = "aaaaa") == 5
    assert candidate(words = ['a', 'ab', 'abc'],target = "abc") == 1
    assert candidate(words = ['prefix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'aaaaa', 'bcdef'],target = "aabcdabc") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmno") == 5
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'suffix'],target = "prefixsuffix") == 2
    assert candidate(words = ['abc', 'bca', 'cab'],target = "abcabcabcabc") == 4
    assert candidate(words = ['aaa', 'aaaa', 'aaaaa', 'aaaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 3
    assert candidate(words = ['jump', 'jum', 'ju', 'j'],target = "jumpjumpjump") == 3
    assert candidate(words = ['ab', 'ba', 'aba', 'bab', 'abab'],target = "ababbababababa") == 4
    assert candidate(words = ['brown', 'brow', 'bro', 'br', 'b'],target = "brownbrownbrow") == 3
    assert candidate(words = ['aaa', 'aa', 'a', 'aaaa'],target = "aaaaaaaaa") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4
    assert candidate(words = ['abcdefghij', 'jihgfedcba', 'abcdefgh', 'hgfedcba'],target = "abcdefghijhgfedcbahgfedcba") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl', 'mno'],target = "abcdefghijklmnopqrstuvwxyza") == -1
    assert candidate(words = ['lazy', 'laz', 'la', 'l'],target = "lazylazy") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaa") == 4
    assert candidate(words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],target = "onetwothreefourfivesixseveneightnineten") == 10
    assert candidate(words = ['repeated', 'repeat', 're', 'rep', 'repe'],target = "repeatedrepeated") == 2
    assert candidate(words = ['abcd', 'bcd', 'cd', 'd'],target = "abcdbcdbcd") == 3
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothree") == 3
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhello") == 3
    assert candidate(words = ['xyz', 'zyx', 'yz', 'zx', 'yx'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx', 'fixxx'],target = "prefixfixfixxxfixfixfixx") == 6
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyzyxzyzyx") == -1
    assert candidate(words = ['longprefix', 'longerprefix', 'longestprefix'],target = "longestprefixlongprefixlongerprefix") == 3
    assert candidate(words = ['dog', 'do', 'd'],target = "dogdogdog") == 3
    assert candidate(words = ['short', 'longer', 'longestword'],target = "shortlongerlongestwordshortlongerlongestwordshortlongerlongestword") == 9
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcabcabcabc") == 4
    assert candidate(words = ['abcdefg', 'bcdefgh', 'cdefghi', 'defghij', 'efghijk'],target = "abcdefghijk") == 2
    assert candidate(words = ['unique', 'words', 'only', 'here'],target = "uniquewordsonlyhere") == 4
    assert candidate(words = ['abcdefgh', 'ijklmnop', 'qrstuvwx', 'yz'],target = "abcdefghijklmnopqrstuvwxyzyz") == 5
    assert candidate(words = ['abab', 'baba', 'abba', 'baab', 'aaaa'],target = "ababbabaabbaab") == 4
    assert candidate(words = ['hello', 'world', 'hello', 'world'],target = "helloworldhelloworld") == 4
    assert candidate(words = ['longword', 'longerword', 'longestword'],target = "longwordlongerwordlongestwordlongestwordlongestword") == 5
    assert candidate(words = ['hello', 'hell', 'he', 'h'],target = "hellohello") == 2
    assert candidate(words = ['prefix', 'prefixprefix', 'prefixprefixprefix'],target = "prefixprefixprefixprefix") == 2
    assert candidate(words = ['ab', 'abc', 'abcd'],target = "abcabcdab") == 3
    assert candidate(words = ['aaa', 'aab', 'aac', 'aad'],target = "aaabaaacaaad") == 6
    assert candidate(words = ['small', 'big', 'medium'],target = "smallbigmediumbig") == 4
    assert candidate(words = ['one', 'two', 'three', 'four'],target = "onetwothreefour") == 4
    assert candidate(words = ['hello', 'world', 'hel', 'lo', 'wor', 'ld'],target = "helloworld") == 2
    assert candidate(words = ['giraffe', 'gira', 'gir', 'gi', 'g'],target = "giraffegiraffe") == 2
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa', 'aaaaa'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['one', 'on', 'o'],target = "ononeone") == 3
    assert candidate(words = ['x', 'y', 'z', 'xy', 'yz', 'xz', 'xyz'],target = "xyzxyzxyz") == 3
    assert candidate(words = ['prefix', 'fix', 'pre', 'prefixfix'],target = "prefixprefix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],target = "abcdefghijklmnopqrstuvwxyz") == 26
    assert candidate(words = ['prefix', 'pre', 'fix', 'prefixfix'],target = "prefixprefixfix") == 2
    assert candidate(words = ['aabb', 'ab', 'aab', 'aa'],target = "aabbabaaababaab") == 6
    assert candidate(words = ['pqr', 'pq', 'p'],target = "pqrpqppqrpqpp") == 7
    assert candidate(words = ['abc', 'abcabc', 'abcabcabc', 'abcabcabcabc'],target = "abcabcabcabcabcabcabcabcabcabc") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxzyz") == -1
    assert candidate(words = ['prefix', 'suffix', 'pre', 'fix', 'postfix'],target = "prefixpostfix") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "abcdeabcdeabcde") == 15
    assert candidate(words = ['abcd', 'abcde', 'abcdef', 'abcdefg'],target = "abcdefgabcdefgabcdefg") == 3
    assert candidate(words = ['abcd', 'bcde', 'cdef', 'defg'],target = "abcdefg") == 2
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabc") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdef") == 2
    assert candidate(words = ['hello', 'hellohello', 'hellohellohello'],target = "hellohellohellohellohellohello") == 2
    assert candidate(words = ['quick', 'qui', 'qu', 'q'],target = "quickquick") == 2
    assert candidate(words = ['xyz', 'yz', 'z'],target = "xyzxyz") == 2
    assert candidate(words = ['longword', 'long', 'lo', 'l'],target = "longwordlongwordlongword") == 3
    assert candidate(words = ['panda', 'pan', 'pa', 'p'],target = "pandapanpapanda") == 4
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijkl") == 4
    assert candidate(words = ['abc', 'b', 'c'],target = "abcbabcbabc") == 5
    assert candidate(words = ['repeated', 'repeat', 'rep', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['zebra', 'zeb', 'ze', 'z'],target = "zebrazebrazebra") == 3
    assert candidate(words = ['abc', 'cba', 'bac'],target = "abcbacbac") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcdabcd") == 3
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 8
    assert candidate(words = ['a', 'aa', 'aaa', 'aaaa'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['ab', 'a', 'b'],target = "abababababab") == 6
    assert candidate(words = ['aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaa") == 3
    assert candidate(words = ['longprefix', 'prefix', 'fix', 'suffix'],target = "longprefixsuffix") == 2
    assert candidate(words = ['fox', 'fo', 'f'],target = "foxfoxfoxfox") == 4
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcaba") == 4
    assert candidate(words = ['pqr', 'pq', 'p'],target = "ppppqqqrrr") == -1
    assert candidate(words = ['prefix', 'prefi', 'pref', 'pre', 'pr'],target = "prefixprefix") == 2
    assert candidate(words = ['cat', 'ca', 'c'],target = "catcatcatcat") == 4
    assert candidate(words = ['prefix', 'pref', 'pre', 'p'],target = "prefixprefix") == 2
    assert candidate(words = ['abc', 'bcd', 'cde', 'def'],target = "abcdefg") == -1
    assert candidate(words = ['apple', 'banana', 'cherry'],target = "applebananaapple") == 3
    assert candidate(words = ['partial', 'part', 'par', 'pa', 'p'],target = "partialpartparpap") == 5
    assert candidate(words = ['abcd', 'abc', 'ab', 'a'],target = "abcdabcab") == 3
    assert candidate(words = ['prefix', 'pre', 'fix', 'fixx'],target = "prefixprefixfixfixxfix") == 5
    assert candidate(words = ['aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['prefix', 'prefixing', 'pre', 'fix', 'fixing'],target = "prefixprefixfix") == 3
    assert candidate(words = ['qwerty', 'werty', 'erty', 'rty', 'ty', 'y', 'yt', 'tyu'],target = "qwertytyutytutytutytutytutytutytutytutu") == -1
    assert candidate(words = ['abac', 'bac', 'cab', 'abc'],target = "abacbacabc") == 3
    assert candidate(words = ['over', 'ove', 'ov', 'o'],target = "overoverover") == 3
    assert candidate(words = ['aaaaa', 'aaaa', 'aaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") == 21
    assert candidate(words = ['abcde', 'cdefg', 'efghi', 'fghij'],target = "abcdefghij") == 2
    assert candidate(words = ['a', 'b', 'c', 'd', 'e'],target = "edcba") == 5
    assert candidate(words = ['one', 'two', 'three'],target = "onetwothreeonetwo") == 5
    assert candidate(words = ['abc', 'ab', 'a'],target = "abcabcabc") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd'],target = "abcdabcd") == 2
    assert candidate(words = ['hello', 'hi', 'h', 'he', 'hel'],target = "hellohellohi") == 3
    assert candidate(words = ['xyz', 'zyx', 'yyz', 'xzy'],target = "zyxzyxzyx") == 3
    assert candidate(words = ['same', 'same', 'same'],target = "samesamesamesamesame") == 5
    assert candidate(words = ['pqr', 'pr', 'qr', 'r', 'pq', 'q'],target = "pqrprqrpqr") == 4
    assert candidate(words = ['test', 'testing', 'testcase'],target = "testtestingtestcase") == 3
    assert candidate(words = ['abcd', 'bcd', 'cde', 'def', 'efg', 'fgh'],target = "abcdefg") == 2
    assert candidate(words = ['abc', 'abcd', 'abcde'],target = "abcdeabcdeabcde") == 3
    assert candidate(words = ['complex', 'words', 'example'],target = "complexwordscomplex") == 3
    assert candidate(words = ['elephant', 'elepha', 'eleph', 'elep', 'ele', 'el', 'e'],target = "elephantelephant") == 2
    assert candidate(words = ['abc', 'bc', 'c', 'abcd'],target = "abcabcabc") == 3
    assert candidate(words = ['xyz', 'zyx', 'yzx'],target = "xyzzyxyzzyx") == 4
    assert candidate(words = ['xy', 'xyz', 'xyza', 'xyzabc'],target = "xyzabcxyzabcxyz") == 3
    assert candidate(words = ['xyz', 'xy', 'x'],target = "xyzyxyzyx") == -1
    assert candidate(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],target = "abcdefghij") == 10
    assert candidate(words = ['aaa', 'bbb', 'ccc'],target = "aaabbbccc") == 3
    assert candidate(words = ['abc', 'abcd', 'ab', 'bcde'],target = "abcdabcde") == 3
    assert candidate(words = ['a', 'ab', 'abc', 'abcd', 'abcde'],target = "abcdeabcde") == 2
    assert candidate(words = ['xyz', 'zyx', 'yxz', 'yxzyx'],target = "xyzzyxzyxzyxzyxzyx") == 6
    assert candidate(words = ['zzz', 'zz', 'z'],target = "zzzzzzzzzzzzzzzzzzzz") == 7
    assert candidate(words = ['z', 'yz', 'xyz', 'wxyz'],target = "wxyzwxyzwxyz") == 3
    assert candidate(words = ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'],target = "abcacbabcabc") == 4
    assert candidate(words = ['abcde', 'bcd', 'cde', 'efg'],target = "abcdecdefg") == 3
    assert candidate(words = ['repeated', 'repeate', 'repea', 'repe', 'rep', 're', 'r'],target = "repeatedrepeatedrepeated") == 3
    assert candidate(words = ['aaaa', 'aa', 'a'],target = "aaaaaaaaaaaaaaaaaaaaaaaa") == 6
    assert candidate(words = ['onetwo', 'one', 'two', 'three'],target = "onetwothreeonetwo") == 3
    assert candidate(words = ['abc', 'def', 'ghi', 'jkl'],target = "abcdefghijk") == 4


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minValidStrings)

2025-05-22 06:14:54,140 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.849529027938843,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:14:54,141 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 06:14:54,141 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:14:54,141 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:14:54,141 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657428112240 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:14:54,142 [DEBUG] filelock (_api.py:334): Lock 140657428112240 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:14:54,142 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:14:54,316 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657428112240 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:14:54,316 [DEBUG] filelock (_api.py:367): Lock 140657428112240 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:14:54,316 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:14:54,317 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:14:54,318 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/minimum-number-of-valid-strings-to-form-target-i.json
2025-05-22 06:14:54,318 [INFO] root (run_leetcode_solver.py:373): Processed problem minimum-number-of-valid-strings-to-form-target-i in 78.25 seconds
2025-05-22 06:14:54,318 [INFO] root (run_leetcode_solver.py:348): Processing problem ID report-spam-message with model deepseek-r1-distill
2025-05-22 06:14:54,449 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem report-spam-message
2025-05-22 06:14:54,449 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:14:54,633 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:14:54,633 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:54,634 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:14:54,634 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:04,747 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:04,747 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:04,747 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:04,747 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:04,748 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (316 chars)
2025-05-22 06:15:04,929 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:04,929 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:04,929 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:04,929 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:15,348 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:15,348 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:15,349 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:15,349 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:15,349 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (316 chars)
2025-05-22 06:15:15,532 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:15,532 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:15,533 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:15,533 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:26,005 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:26,005 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:26,005 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:26,006 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:26,006 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (316 chars)
2025-05-22 06:15:26,006 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:
        banned = set(bannedWords)
        count = 0
        for word in message:
            if word in banned:
                count += 1
                if count >= 2:
                    return True
        return False
2025-05-22 06:15:26,006 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(message = ['spam', 'egg', 'ham'],bannedWords = ['spam', 'bacon', 'egg']) == True
    assert candidate(message = ['spam', 'eggs', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'spam', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'egg', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'swift']) == False
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['java', 'c#', 'ruby']) == False
    assert candidate(message = ['hello', 'programming', 'fun'],bannedWords = ['world', 'programming', 'leetcode']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e'],bannedWords = ['a', 'b']) == True
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['date', 'fig', 'grape']) == False
    assert candidate(message = ['code', 'is', 'fun'],bannedWords = ['code', 'cool']) == False
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['mango', 'pineapple']) == False
    assert candidate(message = ['coding', 'is', 'fun'],bannedWords = ['fun', 'coding', 'is', 'cool']) == True
    assert candidate(message = ['code', 'code', 'code'],bannedWords = ['code']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go', 'swift']) == False
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']) == True
    assert candidate(message = ['python', 'java', 'c++', 'python', 'java'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'c#', 'swift']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['three', 'four', 'five', 'six']) == True
    assert candidate(message = ['python', 'java', 'c++', 'ruby', 'go', 'swift'],bannedWords = ['python', 'swift', 'java', 'c++', 'go', 'ruby']) == True
    assert candidate(message = ['same', 'same', 'same', 'different', 'same'],bannedWords = ['same', 'different']) == True
    assert candidate(message = ['coding', 'fun', 'coding', 'learning'],bannedWords = ['coding', 'fun', 'hello']) == True
    assert candidate(message = ['cat', 'dog', 'mouse', 'cat'],bannedWords = ['dog', 'cat', 'bird']) == True
    assert candidate(message = ['this', 'is', 'a', 'test', 'case'],bannedWords = ['test', 'case', 'example', 'input']) == True
    assert candidate(message = ['short', 'longer', 'words', 'in', 'the', 'message'],bannedWords = ['longer', 'words', 'phrase']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['duplicate', 'words', 'overlap']) == False
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'programming']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['data', 'science']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'],bannedWords = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'sample']) == True
    assert candidate(message = ['hello', 'hello', 'hello', 'hello'],bannedWords = ['world', 'hello', 'programming']) == True
    assert candidate(message = ['example', 'test', 'case', 'example', 'test'],bannedWords = ['example', 'test', 'case', 'input']) == True
    assert candidate(message = ['python', 'programming', 'code', 'python'],bannedWords = ['python', 'java', 'c++']) == True
    assert candidate(message = ['data', 'science', 'and', 'ai'],bannedWords = ['ai', 'machine', 'learning']) == False
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['lets', 'go', 'for', 'a', 'walk', 'in', 'the', 'park'],bannedWords = ['walk', 'run', 'jog']) == False
    assert candidate(message = ['coding', 'python', 'java', 'coding'],bannedWords = ['java', 'coding', 'ruby']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['fox', 'dog', 'lazy']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'world', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['test', 'test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['python', 'java', 'python'],bannedWords = ['python', 'ruby']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['happy', 'birthday', 'to', 'you'],bannedWords = ['birthday', 'to', 'you', 'happy']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['two', 'three', 'four', 'five']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True
    assert candidate(message = ['spam', 'egg', 'ham', 'spam', 'egg', 'ham', 'spam'],bannedWords = ['spam', 'egg', 'ham']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['test', 'sample', 'example']) == False
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'swift']) == True
    assert candidate(message = ['spam', 'spam', 'eggs'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['secure', 'your', 'data', 'with', 'encryption'],bannedWords = ['data', 'with', 'secure']) == True
    assert candidate(message = ['spam', 'eggs', 'ham', 'spam'],bannedWords = ['spam', 'bacon']) == True
    assert candidate(message = ['alice', 'bob', 'charlie', 'david', 'eve'],bannedWords = ['bob', 'charlie', 'frank']) == True
    assert candidate(message = ['unique', 'words', 'here', 'no', 'matches'],bannedWords = ['match', 'found', 'here']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['ruby', 'go', 'c++', 'python']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm'],bannedWords = ['data', 'algorithm', 'structure', 'code']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'duplicate']) == True
    assert candidate(message = ['programming', 'is', 'fun', 'and', 'challenging'],bannedWords = ['boring', 'difficult']) == False
    assert candidate(message = ['spam', 'is', 'bad', 'spam'],bannedWords = ['spam', 'junk', 'garbage']) == True
    assert candidate(message = ['python', 'java', 'python', 'java'],bannedWords = ['c', 'c++', 'java', 'python']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'apple', 'banana'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['leetcode', 'world', 'hello', 'code']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm', 'data'],bannedWords = ['algorithm', 'graph', 'tree', 'data']) == True
    assert candidate(message = ['apple', 'banana', 'apple', 'cherry'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['first', 'second', 'third', 'fourth', 'fifth'],bannedWords = ['third', 'fourth', 'fifth', 'sixth']) == True
    assert candidate(message = ['spam', 'eggs', 'spam', 'ham'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['python', 'java', 'python', 'c++', 'java'],bannedWords = ['java', 'python', 'c#']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'fish'],bannedWords = ['dog', 'fish', 'cat', 'bird']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'again', 'once']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'cat', 'dog'],bannedWords = ['cat', 'dog', 'fish']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'unique'],bannedWords = ['repeat', 'distinct', 'clone']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['deep', 'learning', 'data']) == True
    assert candidate(message = ['lets', 'play', 'some', 'games'],bannedWords = ['play', 'games', 'watch']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['three', 'six', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'programming'],bannedWords = ['world', 'programming', 'leetcode']) == True
    assert candidate(message = ['spam', 'spam', 'spam', 'spam'],bannedWords = ['ham', 'spam', 'eggs']) == True
    assert candidate(message = ['hello', 'world'],bannedWords = ['hello', 'world', 'hello', 'world']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'three', 'five', 'seven', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world', 'hello'],bannedWords = ['hello', 'world', 'test']) == True
    assert candidate(message = ['spam', 'is', 'bad', 'for', 'health'],bannedWords = ['spam', 'junk', 'rubbish']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'goodbye']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e']) == True
    assert candidate(message = ['coding', 'is', 'awesome'],bannedWords = ['coding', 'programming', 'hacking']) == False
    assert candidate(message = ['longwordexample', 'anotherlongword', 'shortword', 'averylongwordindeed'],bannedWords = ['longwordexample', 'averylongwordindeed']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['four', 'six', 'seven']) == False
    assert candidate(message = ['red', 'blue', 'green', 'yellow'],bannedWords = ['blue', 'green', 'purple']) == True
    assert candidate(message = ['unique', 'words', 'only'],bannedWords = ['different', 'words', 'unique']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['hello', 'test', 'example']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'any']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['world', 'hello', 'code']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'different', 'words']) == True
    assert candidate(message = ['banana', 'apple', 'cherry', 'mango', 'pineapple', 'kiwi'],bannedWords = ['banana', 'apple', 'cherry', 'mango', 'pineapple']) == True
    assert candidate(message = ['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz'],bannedWords = ['mnopqr', 'stuvwx', 'yz', 'abcdef']) == True
    assert candidate(message = ['optimize', 'code', 'efficiency', 'optimize'],bannedWords = ['optimize', 'performance', 'speed']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'found', 'words', 'unique']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java', 'python'],bannedWords = ['java', 'python', 'swift']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'code'],bannedWords = ['code', 'data', 'algorithm', 'structure']) == True
    assert candidate(message = ['find', 'me', 'if', 'you', 'can'],bannedWords = ['me', 'can', 'find', 'you', 'if']) == True
    assert candidate(message = ['fast', 'and', 'furious'],bannedWords = ['slow', 'steady', 'fast']) == False
    assert candidate(message = ['spam', 'ham', 'eggs', 'spam', 'eggs', 'spam'],bannedWords = ['spam', 'eggs', 'bacon']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['quick', 'lazy', 'cat', 'dog']) == True

2025-05-22 06:15:26,006 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().reportSpam
2025-05-22 06:15:26,006 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:15:26,006 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(message = ['spam', 'egg', 'ham'],bannedWords = ['spam', 'bacon', 'egg']) == True
    assert candidate(message = ['spam', 'eggs', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'spam', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'egg', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'swift']) == False
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['java', 'c#', 'ruby']) == False
    assert candidate(message = ['hello', 'programming', 'fun'],bannedWords = ['world', 'programming', 'leetcode']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e'],bannedWords = ['a', 'b']) == True
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['date', 'fig', 'grape']) == False
    assert candidate(message = ['code', 'is', 'fun'],bannedWords = ['code', 'cool']) == False
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['mango', 'pineapple']) == False
    assert candidate(message = ['coding', 'is', 'fun'],bannedWords = ['fun', 'coding', 'is', 'cool']) == True
    assert candidate(message = ['code', 'code', 'code'],bannedWords = ['code']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go', 'swift']) == False
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']) == True
    assert candidate(message = ['python', 'java', 'c++', 'python', 'java'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'c#', 'swift']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['three', 'four', 'five', 'six']) == True
    assert candidate(message = ['python', 'java', 'c++', 'ruby', 'go', 'swift'],bannedWords = ['python', 'swift', 'java', 'c++', 'go', 'ruby']) == True
    assert candidate(message = ['same', 'same', 'same', 'different', 'same'],bannedWords = ['same', 'different']) == True
    assert candidate(message = ['coding', 'fun', 'coding', 'learning'],bannedWords = ['coding', 'fun', 'hello']) == True
    assert candidate(message = ['cat', 'dog', 'mouse', 'cat'],bannedWords = ['dog', 'cat', 'bird']) == True
    assert candidate(message = ['this', 'is', 'a', 'test', 'case'],bannedWords = ['test', 'case', 'example', 'input']) == True
    assert candidate(message = ['short', 'longer', 'words', 'in', 'the', 'message'],bannedWords = ['longer', 'words', 'phrase']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['duplicate', 'words', 'overlap']) == False
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'programming']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['data', 'science']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'],bannedWords = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'sample']) == True
    assert candidate(message = ['hello', 'hello', 'hello', 'hello'],bannedWords = ['world', 'hello', 'programming']) == True
    assert candidate(message = ['example', 'test', 'case', 'example', 'test'],bannedWords = ['example', 'test', 'case', 'input']) == True
    assert candidate(message = ['python', 'programming', 'code', 'python'],bannedWords = ['python', 'java', 'c++']) == True
    assert candidate(message = ['data', 'science', 'and', 'ai'],bannedWords = ['ai', 'machine', 'learning']) == False
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['lets', 'go', 'for', 'a', 'walk', 'in', 'the', 'park'],bannedWords = ['walk', 'run', 'jog']) == False
    assert candidate(message = ['coding', 'python', 'java', 'coding'],bannedWords = ['java', 'coding', 'ruby']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['fox', 'dog', 'lazy']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'world', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['test', 'test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['python', 'java', 'python'],bannedWords = ['python', 'ruby']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['happy', 'birthday', 'to', 'you'],bannedWords = ['birthday', 'to', 'you', 'happy']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['two', 'three', 'four', 'five']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True
    assert candidate(message = ['spam', 'egg', 'ham', 'spam', 'egg', 'ham', 'spam'],bannedWords = ['spam', 'egg', 'ham']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['test', 'sample', 'example']) == False
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'swift']) == True
    assert candidate(message = ['spam', 'spam', 'eggs'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['secure', 'your', 'data', 'with', 'encryption'],bannedWords = ['data', 'with', 'secure']) == True
    assert candidate(message = ['spam', 'eggs', 'ham', 'spam'],bannedWords = ['spam', 'bacon']) == True
    assert candidate(message = ['alice', 'bob', 'charlie', 'david', 'eve'],bannedWords = ['bob', 'charlie', 'frank']) == True
    assert candidate(message = ['unique', 'words', 'here', 'no', 'matches'],bannedWords = ['match', 'found', 'here']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['ruby', 'go', 'c++', 'python']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm'],bannedWords = ['data', 'algorithm', 'structure', 'code']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'duplicate']) == True
    assert candidate(message = ['programming', 'is', 'fun', 'and', 'challenging'],bannedWords = ['boring', 'difficult']) == False
    assert candidate(message = ['spam', 'is', 'bad', 'spam'],bannedWords = ['spam', 'junk', 'garbage']) == True
    assert candidate(message = ['python', 'java', 'python', 'java'],bannedWords = ['c', 'c++', 'java', 'python']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'apple', 'banana'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['leetcode', 'world', 'hello', 'code']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm', 'data'],bannedWords = ['algorithm', 'graph', 'tree', 'data']) == True
    assert candidate(message = ['apple', 'banana', 'apple', 'cherry'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['first', 'second', 'third', 'fourth', 'fifth'],bannedWords = ['third', 'fourth', 'fifth', 'sixth']) == True
    assert candidate(message = ['spam', 'eggs', 'spam', 'ham'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['python', 'java', 'python', 'c++', 'java'],bannedWords = ['java', 'python', 'c#']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'fish'],bannedWords = ['dog', 'fish', 'cat', 'bird']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'again', 'once']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'cat', 'dog'],bannedWords = ['cat', 'dog', 'fish']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'unique'],bannedWords = ['repeat', 'distinct', 'clone']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['deep', 'learning', 'data']) == True
    assert candidate(message = ['lets', 'play', 'some', 'games'],bannedWords = ['play', 'games', 'watch']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['three', 'six', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'programming'],bannedWords = ['world', 'programming', 'leetcode']) == True
    assert candidate(message = ['spam', 'spam', 'spam', 'spam'],bannedWords = ['ham', 'spam', 'eggs']) == True
    assert candidate(message = ['hello', 'world'],bannedWords = ['hello', 'world', 'hello', 'world']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'three', 'five', 'seven', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world', 'hello'],bannedWords = ['hello', 'world', 'test']) == True
    assert candidate(message = ['spam', 'is', 'bad', 'for', 'health'],bannedWords = ['spam', 'junk', 'rubbish']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'goodbye']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e']) == True
    assert candidate(message = ['coding', 'is', 'awesome'],bannedWords = ['coding', 'programming', 'hacking']) == False
    assert candidate(message = ['longwordexample', 'anotherlongword', 'shortword', 'averylongwordindeed'],bannedWords = ['longwordexample', 'averylongwordindeed']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['four', 'six', 'seven']) == False
    assert candidate(message = ['red', 'blue', 'green', 'yellow'],bannedWords = ['blue', 'green', 'purple']) == True
    assert candidate(message = ['unique', 'words', 'only'],bannedWords = ['different', 'words', 'unique']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['hello', 'test', 'example']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'any']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['world', 'hello', 'code']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'different', 'words']) == True
    assert candidate(message = ['banana', 'apple', 'cherry', 'mango', 'pineapple', 'kiwi'],bannedWords = ['banana', 'apple', 'cherry', 'mango', 'pineapple']) == True
    assert candidate(message = ['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz'],bannedWords = ['mnopqr', 'stuvwx', 'yz', 'abcdef']) == True
    assert candidate(message = ['optimize', 'code', 'efficiency', 'optimize'],bannedWords = ['optimize', 'performance', 'speed']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'found', 'words', 'unique']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java', 'python'],bannedWords = ['java', 'python', 'swift']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'code'],bannedWords = ['code', 'data', 'algorithm', 'structure']) == True
    assert candidate(message = ['find', 'me', 'if', 'you', 'can'],bannedWords = ['me', 'can', 'find', 'you', 'if']) == True
    assert candidate(message = ['fast', 'and', 'furious'],bannedWords = ['slow', 'steady', 'fast']) == False
    assert candidate(message = ['spam', 'ham', 'eggs', 'spam', 'eggs', 'spam'],bannedWords = ['spam', 'eggs', 'bacon']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['quick', 'lazy', 'cat', 'dog']) == True

2025-05-22 06:15:26,006 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().reportSpam
2025-05-22 06:15:26,006 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:
        banned = set(bannedWords)
        count = 0
        for word in message:
            if word in banned:
                count += 1
                if count >= 2:
                    return True
        return False
2025-05-22 06:15:26,006 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:
        banned = set(bannedWords)
        count = 0
        for word in message:
            if word in banned:
                count += 1
                if count >= 2:
                    return True
        return False

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(message = ['spam', 'egg', 'ham'],bannedWords = ['spam', 'bacon', 'egg']) == True
    assert candidate(message = ['spam', 'eggs', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'spam', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'egg', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'swift']) == False
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['java', 'c#', 'ruby']) == False
    assert candidate(message = ['hello', 'programming', 'fun'],bannedWords = ['world', 'programming', 'leetcode']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e'],bannedWords = ['a', 'b']) == True
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['date', 'fig', 'grape']) == False
    assert candidate(message = ['code', 'is', 'fun'],bannedWords = ['code', 'cool']) == False
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['mango', 'pineapple']) == False
    assert candidate(message = ['coding', 'is', 'fun'],bannedWords = ['fun', 'coding', 'is', 'cool']) == True
    assert candidate(message = ['code', 'code', 'code'],bannedWords = ['code']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go', 'swift']) == False
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']) == True
    assert candidate(message = ['python', 'java', 'c++', 'python', 'java'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'c#', 'swift']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['three', 'four', 'five', 'six']) == True
    assert candidate(message = ['python', 'java', 'c++', 'ruby', 'go', 'swift'],bannedWords = ['python', 'swift', 'java', 'c++', 'go', 'ruby']) == True
    assert candidate(message = ['same', 'same', 'same', 'different', 'same'],bannedWords = ['same', 'different']) == True
    assert candidate(message = ['coding', 'fun', 'coding', 'learning'],bannedWords = ['coding', 'fun', 'hello']) == True
    assert candidate(message = ['cat', 'dog', 'mouse', 'cat'],bannedWords = ['dog', 'cat', 'bird']) == True
    assert candidate(message = ['this', 'is', 'a', 'test', 'case'],bannedWords = ['test', 'case', 'example', 'input']) == True
    assert candidate(message = ['short', 'longer', 'words', 'in', 'the', 'message'],bannedWords = ['longer', 'words', 'phrase']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['duplicate', 'words', 'overlap']) == False
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'programming']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['data', 'science']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'],bannedWords = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'sample']) == True
    assert candidate(message = ['hello', 'hello', 'hello', 'hello'],bannedWords = ['world', 'hello', 'programming']) == True
    assert candidate(message = ['example', 'test', 'case', 'example', 'test'],bannedWords = ['example', 'test', 'case', 'input']) == True
    assert candidate(message = ['python', 'programming', 'code', 'python'],bannedWords = ['python', 'java', 'c++']) == True
    assert candidate(message = ['data', 'science', 'and', 'ai'],bannedWords = ['ai', 'machine', 'learning']) == False
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['lets', 'go', 'for', 'a', 'walk', 'in', 'the', 'park'],bannedWords = ['walk', 'run', 'jog']) == False
    assert candidate(message = ['coding', 'python', 'java', 'coding'],bannedWords = ['java', 'coding', 'ruby']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['fox', 'dog', 'lazy']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'world', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['test', 'test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['python', 'java', 'python'],bannedWords = ['python', 'ruby']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['happy', 'birthday', 'to', 'you'],bannedWords = ['birthday', 'to', 'you', 'happy']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['two', 'three', 'four', 'five']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True
    assert candidate(message = ['spam', 'egg', 'ham', 'spam', 'egg', 'ham', 'spam'],bannedWords = ['spam', 'egg', 'ham']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['test', 'sample', 'example']) == False
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'swift']) == True
    assert candidate(message = ['spam', 'spam', 'eggs'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['secure', 'your', 'data', 'with', 'encryption'],bannedWords = ['data', 'with', 'secure']) == True
    assert candidate(message = ['spam', 'eggs', 'ham', 'spam'],bannedWords = ['spam', 'bacon']) == True
    assert candidate(message = ['alice', 'bob', 'charlie', 'david', 'eve'],bannedWords = ['bob', 'charlie', 'frank']) == True
    assert candidate(message = ['unique', 'words', 'here', 'no', 'matches'],bannedWords = ['match', 'found', 'here']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['ruby', 'go', 'c++', 'python']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm'],bannedWords = ['data', 'algorithm', 'structure', 'code']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'duplicate']) == True
    assert candidate(message = ['programming', 'is', 'fun', 'and', 'challenging'],bannedWords = ['boring', 'difficult']) == False
    assert candidate(message = ['spam', 'is', 'bad', 'spam'],bannedWords = ['spam', 'junk', 'garbage']) == True
    assert candidate(message = ['python', 'java', 'python', 'java'],bannedWords = ['c', 'c++', 'java', 'python']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'apple', 'banana'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['leetcode', 'world', 'hello', 'code']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm', 'data'],bannedWords = ['algorithm', 'graph', 'tree', 'data']) == True
    assert candidate(message = ['apple', 'banana', 'apple', 'cherry'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['first', 'second', 'third', 'fourth', 'fifth'],bannedWords = ['third', 'fourth', 'fifth', 'sixth']) == True
    assert candidate(message = ['spam', 'eggs', 'spam', 'ham'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['python', 'java', 'python', 'c++', 'java'],bannedWords = ['java', 'python', 'c#']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'fish'],bannedWords = ['dog', 'fish', 'cat', 'bird']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'again', 'once']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'cat', 'dog'],bannedWords = ['cat', 'dog', 'fish']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'unique'],bannedWords = ['repeat', 'distinct', 'clone']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['deep', 'learning', 'data']) == True
    assert candidate(message = ['lets', 'play', 'some', 'games'],bannedWords = ['play', 'games', 'watch']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['three', 'six', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'programming'],bannedWords = ['world', 'programming', 'leetcode']) == True
    assert candidate(message = ['spam', 'spam', 'spam', 'spam'],bannedWords = ['ham', 'spam', 'eggs']) == True
    assert candidate(message = ['hello', 'world'],bannedWords = ['hello', 'world', 'hello', 'world']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'three', 'five', 'seven', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world', 'hello'],bannedWords = ['hello', 'world', 'test']) == True
    assert candidate(message = ['spam', 'is', 'bad', 'for', 'health'],bannedWords = ['spam', 'junk', 'rubbish']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'goodbye']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e']) == True
    assert candidate(message = ['coding', 'is', 'awesome'],bannedWords = ['coding', 'programming', 'hacking']) == False
    assert candidate(message = ['longwordexample', 'anotherlongword', 'shortword', 'averylongwordindeed'],bannedWords = ['longwordexample', 'averylongwordindeed']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['four', 'six', 'seven']) == False
    assert candidate(message = ['red', 'blue', 'green', 'yellow'],bannedWords = ['blue', 'green', 'purple']) == True
    assert candidate(message = ['unique', 'words', 'only'],bannedWords = ['different', 'words', 'unique']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['hello', 'test', 'example']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'any']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['world', 'hello', 'code']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'different', 'words']) == True
    assert candidate(message = ['banana', 'apple', 'cherry', 'mango', 'pineapple', 'kiwi'],bannedWords = ['banana', 'apple', 'cherry', 'mango', 'pineapple']) == True
    assert candidate(message = ['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz'],bannedWords = ['mnopqr', 'stuvwx', 'yz', 'abcdef']) == True
    assert candidate(message = ['optimize', 'code', 'efficiency', 'optimize'],bannedWords = ['optimize', 'performance', 'speed']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'found', 'words', 'unique']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java', 'python'],bannedWords = ['java', 'python', 'swift']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'code'],bannedWords = ['code', 'data', 'algorithm', 'structure']) == True
    assert candidate(message = ['find', 'me', 'if', 'you', 'can'],bannedWords = ['me', 'can', 'find', 'you', 'if']) == True
    assert candidate(message = ['fast', 'and', 'furious'],bannedWords = ['slow', 'steady', 'fast']) == False
    assert candidate(message = ['spam', 'ham', 'eggs', 'spam', 'eggs', 'spam'],bannedWords = ['spam', 'eggs', 'bacon']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['quick', 'lazy', 'cat', 'dog']) == True


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().reportSpam)

2025-05-22 06:15:26,007 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:
        banned = set(bannedWords)
        count = 0
        for word in message:
            if word in banned:
                count += 1
                if count >= 2:
                    return True
        return False

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(message = ['spam', 'egg', 'ham'],bannedWords = ['spam', 'bacon', 'egg']) == True
    assert candidate(message = ['spam', 'eggs', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'spam', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['spam', 'egg', 'spam'],bannedWords = ['spam']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'swift']) == False
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['java', 'c#', 'ruby']) == False
    assert candidate(message = ['hello', 'programming', 'fun'],bannedWords = ['world', 'programming', 'leetcode']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e'],bannedWords = ['a', 'b']) == True
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['date', 'fig', 'grape']) == False
    assert candidate(message = ['code', 'is', 'fun'],bannedWords = ['code', 'cool']) == False
    assert candidate(message = ['apple', 'banana', 'cherry'],bannedWords = ['mango', 'pineapple']) == False
    assert candidate(message = ['coding', 'is', 'fun'],bannedWords = ['fun', 'coding', 'is', 'cool']) == True
    assert candidate(message = ['code', 'code', 'code'],bannedWords = ['code']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go', 'swift']) == False
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['python', 'java', 'c++'],bannedWords = ['ruby', 'go']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']) == True
    assert candidate(message = ['python', 'java', 'c++', 'python', 'java'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'c#', 'swift']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['three', 'four', 'five', 'six']) == True
    assert candidate(message = ['python', 'java', 'c++', 'ruby', 'go', 'swift'],bannedWords = ['python', 'swift', 'java', 'c++', 'go', 'ruby']) == True
    assert candidate(message = ['same', 'same', 'same', 'different', 'same'],bannedWords = ['same', 'different']) == True
    assert candidate(message = ['coding', 'fun', 'coding', 'learning'],bannedWords = ['coding', 'fun', 'hello']) == True
    assert candidate(message = ['cat', 'dog', 'mouse', 'cat'],bannedWords = ['dog', 'cat', 'bird']) == True
    assert candidate(message = ['this', 'is', 'a', 'test', 'case'],bannedWords = ['test', 'case', 'example', 'input']) == True
    assert candidate(message = ['short', 'longer', 'words', 'in', 'the', 'message'],bannedWords = ['longer', 'words', 'phrase']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['duplicate', 'words', 'overlap']) == False
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'programming']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['data', 'science']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape'],bannedWords = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'sample']) == True
    assert candidate(message = ['hello', 'hello', 'hello', 'hello'],bannedWords = ['world', 'hello', 'programming']) == True
    assert candidate(message = ['example', 'test', 'case', 'example', 'test'],bannedWords = ['example', 'test', 'case', 'input']) == True
    assert candidate(message = ['python', 'programming', 'code', 'python'],bannedWords = ['python', 'java', 'c++']) == True
    assert candidate(message = ['data', 'science', 'and', 'ai'],bannedWords = ['ai', 'machine', 'learning']) == False
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['lets', 'go', 'for', 'a', 'walk', 'in', 'the', 'park'],bannedWords = ['walk', 'run', 'jog']) == False
    assert candidate(message = ['coding', 'python', 'java', 'coding'],bannedWords = ['java', 'coding', 'ruby']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['fox', 'dog', 'lazy']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'world', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['test', 'test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['python', 'java', 'python'],bannedWords = ['python', 'ruby']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['happy', 'birthday', 'to', 'you'],bannedWords = ['birthday', 'to', 'you', 'happy']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['two', 'three', 'four', 'five']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == True
    assert candidate(message = ['spam', 'egg', 'ham', 'spam', 'egg', 'ham', 'spam'],bannedWords = ['spam', 'egg', 'ham']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['test', 'sample', 'example']) == False
    assert candidate(message = ['python', 'java', 'c++', 'java'],bannedWords = ['java', 'swift']) == True
    assert candidate(message = ['spam', 'spam', 'eggs'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['secure', 'your', 'data', 'with', 'encryption'],bannedWords = ['data', 'with', 'secure']) == True
    assert candidate(message = ['spam', 'eggs', 'ham', 'spam'],bannedWords = ['spam', 'bacon']) == True
    assert candidate(message = ['alice', 'bob', 'charlie', 'david', 'eve'],bannedWords = ['bob', 'charlie', 'frank']) == True
    assert candidate(message = ['unique', 'words', 'here', 'no', 'matches'],bannedWords = ['match', 'found', 'here']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['ruby', 'go', 'c++', 'python']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm'],bannedWords = ['data', 'algorithm', 'structure', 'code']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'two', 'three', 'four', 'five']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'duplicate']) == True
    assert candidate(message = ['programming', 'is', 'fun', 'and', 'challenging'],bannedWords = ['boring', 'difficult']) == False
    assert candidate(message = ['spam', 'is', 'bad', 'spam'],bannedWords = ['spam', 'junk', 'garbage']) == True
    assert candidate(message = ['python', 'java', 'python', 'java'],bannedWords = ['c', 'c++', 'java', 'python']) == True
    assert candidate(message = ['apple', 'banana', 'cherry', 'apple', 'banana'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['hello', 'world', 'leetcode'],bannedWords = ['leetcode', 'world', 'hello', 'code']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'algorithm', 'data'],bannedWords = ['algorithm', 'graph', 'tree', 'data']) == True
    assert candidate(message = ['apple', 'banana', 'apple', 'cherry'],bannedWords = ['banana', 'cherry', 'apple']) == True
    assert candidate(message = ['first', 'second', 'third', 'fourth', 'fifth'],bannedWords = ['third', 'fourth', 'fifth', 'sixth']) == True
    assert candidate(message = ['spam', 'eggs', 'spam', 'ham'],bannedWords = ['spam', 'bacon', 'eggs']) == True
    assert candidate(message = ['python', 'java', 'python', 'c++', 'java'],bannedWords = ['java', 'python', 'c#']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'fish'],bannedWords = ['dog', 'fish', 'cat', 'bird']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'again', 'once']) == True
    assert candidate(message = ['cat', 'dog', 'bird', 'cat', 'dog'],bannedWords = ['cat', 'dog', 'fish']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'unique'],bannedWords = ['repeat', 'distinct', 'clone']) == True
    assert candidate(message = ['data', 'science', 'machine', 'learning'],bannedWords = ['deep', 'learning', 'data']) == True
    assert candidate(message = ['lets', 'play', 'some', 'games'],bannedWords = ['play', 'games', 'watch']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'],bannedWords = ['three', 'six', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'programming'],bannedWords = ['world', 'programming', 'leetcode']) == True
    assert candidate(message = ['spam', 'spam', 'spam', 'spam'],bannedWords = ['ham', 'spam', 'eggs']) == True
    assert candidate(message = ['hello', 'world'],bannedWords = ['hello', 'world', 'hello', 'world']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five', 'six'],bannedWords = ['one', 'three', 'five', 'seven', 'nine']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world', 'hello'],bannedWords = ['hello', 'world', 'test']) == True
    assert candidate(message = ['spam', 'is', 'bad', 'for', 'health'],bannedWords = ['spam', 'junk', 'rubbish']) == False
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],bannedWords = ['a', 'b', 'c']) == True
    assert candidate(message = ['test', 'test', 'test', 'test'],bannedWords = ['test', 'example', 'case']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world', 'goodbye']) == True
    assert candidate(message = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],bannedWords = ['a', 'b', 'c', 'd', 'e']) == True
    assert candidate(message = ['coding', 'is', 'awesome'],bannedWords = ['coding', 'programming', 'hacking']) == False
    assert candidate(message = ['longwordexample', 'anotherlongword', 'shortword', 'averylongwordindeed'],bannedWords = ['longwordexample', 'averylongwordindeed']) == True
    assert candidate(message = ['one', 'two', 'three', 'four', 'five'],bannedWords = ['four', 'six', 'seven']) == False
    assert candidate(message = ['red', 'blue', 'green', 'yellow'],bannedWords = ['blue', 'green', 'purple']) == True
    assert candidate(message = ['unique', 'words', 'only'],bannedWords = ['different', 'words', 'unique']) == True
    assert candidate(message = ['hello', 'world', 'this', 'is', 'a', 'test'],bannedWords = ['hello', 'test', 'example']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'any']) == False
    assert candidate(message = ['python', 'java', 'c++', 'python'],bannedWords = ['python', 'java', 'c#']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['world', 'hello', 'code']) == True
    assert candidate(message = ['repeat', 'repeat', 'repeat', 'repeat', 'repeat'],bannedWords = ['repeat', 'different', 'words']) == True
    assert candidate(message = ['banana', 'apple', 'cherry', 'mango', 'pineapple', 'kiwi'],bannedWords = ['banana', 'apple', 'cherry', 'mango', 'pineapple']) == True
    assert candidate(message = ['abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz'],bannedWords = ['mnopqr', 'stuvwx', 'yz', 'abcdef']) == True
    assert candidate(message = ['optimize', 'code', 'efficiency', 'optimize'],bannedWords = ['optimize', 'performance', 'speed']) == True
    assert candidate(message = ['unique', 'words', 'only', 'here'],bannedWords = ['not', 'here', 'found', 'words', 'unique']) == True
    assert candidate(message = ['python', 'java', 'c++', 'java', 'python'],bannedWords = ['java', 'python', 'swift']) == True
    assert candidate(message = ['hello', 'world', 'leetcode', 'hello'],bannedWords = ['world', 'hello']) == True
    assert candidate(message = ['hello', 'world', 'hello', 'world'],bannedWords = ['hello', 'world']) == True
    assert candidate(message = ['algorithm', 'data', 'structure', 'code'],bannedWords = ['code', 'data', 'algorithm', 'structure']) == True
    assert candidate(message = ['find', 'me', 'if', 'you', 'can'],bannedWords = ['me', 'can', 'find', 'you', 'if']) == True
    assert candidate(message = ['fast', 'and', 'furious'],bannedWords = ['slow', 'steady', 'fast']) == False
    assert candidate(message = ['spam', 'ham', 'eggs', 'spam', 'eggs', 'spam'],bannedWords = ['spam', 'eggs', 'bacon']) == True
    assert candidate(message = ['quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog'],bannedWords = ['quick', 'lazy', 'cat', 'dog']) == True


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().reportSpam)

2025-05-22 06:15:39,811 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.804189920425415,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:15:39,811 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 06:15:39,811 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:15:39,812 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:15:39,812 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427546656 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:15:39,813 [DEBUG] filelock (_api.py:334): Lock 140657427546656 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:15:39,813 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:15:39,992 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427546656 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:15:39,993 [DEBUG] filelock (_api.py:367): Lock 140657427546656 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:15:39,993 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:15:39,993 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:15:39,995 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/report-spam-message.json
2025-05-22 06:15:39,995 [INFO] root (run_leetcode_solver.py:373): Processed problem report-spam-message in 45.57 seconds
2025-05-22 06:15:39,995 [INFO] root (run_leetcode_solver.py:348): Processing problem ID minimum-number-of-seconds-to-make-mountain-height-zero with model deepseek-r1-distill
2025-05-22 06:15:40,127 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem minimum-number-of-seconds-to-make-mountain-height-zero
2025-05-22 06:15:40,127 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:15:40,312 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:15:40,312 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:40,312 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:15:40,312 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:02,402 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:02,403 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:02,403 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:02,403 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:02,403 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1122 chars)
2025-05-22 06:16:02,586 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:02,586 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:02,586 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:02,586 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:22,277 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:22,278 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:22,278 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:22,278 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:22,278 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (876 chars)
2025-05-22 06:16:22,460 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:22,461 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:22,461 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:22,461 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:42,862 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:42,863 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:42,863 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:42,863 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:42,863 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (1008 chars)
2025-05-22 06:16:42,863 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        if mountainHeight == 0:
            return 0
        
        workerTimes.sort()
        left = 0
        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time
        
        def is_possible(time):
            total = 0
            for t in workerTimes:
                if t == 0:
                    continue
                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2
                k = int(max_k)
                while k * (k + 1) * t / 2 <= time:
                    k += 1
                k -= 1
                if k <= 0:
                    continue
                total += k
                if total >= mountainHeight:
                    return True
            return total >= mountainHeight
        
        answer = right
        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer
2025-05-22 06:16:42,863 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(mountainHeight = 15,workerTimes = [5, 5, 5]) == 75
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3]) == 30
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3, 4, 5]) == 18
    assert candidate(mountainHeight = 1,workerTimes = [100]) == 100
    assert candidate(mountainHeight = 50,workerTimes = [1, 2, 3, 4, 5]) == 140
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 30,workerTimes = [3, 3, 3]) == 165
    assert candidate(mountainHeight = 100,workerTimes = [10, 10, 10, 10]) == 3250
    assert candidate(mountainHeight = 100000,workerTimes = [1]) == 5000050000
    assert candidate(mountainHeight = 10,workerTimes = [3, 2, 2, 4]) == 12
    assert candidate(mountainHeight = 5,workerTimes = [1]) == 15
    assert candidate(mountainHeight = 7,workerTimes = [2, 3]) == 20
    assert candidate(mountainHeight = 1,workerTimes = [100000]) == 100000
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 1,workerTimes = [1000000]) == 1000000
    assert candidate(mountainHeight = 100,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 234
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5]) == 140
    assert candidate(mountainHeight = 7,workerTimes = [7]) == 196
    assert candidate(mountainHeight = 30,workerTimes = [2, 3, 4]) == 165
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30]) == 2720
    assert candidate(mountainHeight = 4,workerTimes = [2, 1, 1]) == 3
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 500,workerTimes = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]) == 257550
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800]) == 1703000
    assert candidate(mountainHeight = 50,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 200000, 300000]) == 95812470300000
    assert candidate(mountainHeight = 50,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 140
    assert candidate(mountainHeight = 50000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 49602375000
    assert candidate(mountainHeight = 300,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 5673
    assert candidate(mountainHeight = 75000,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 269335050000
    assert candidate(mountainHeight = 90,workerTimes = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 135
    assert candidate(mountainHeight = 50000,workerTimes = [50000, 25000, 10000, 5000]) == 1024120650000
    assert candidate(mountainHeight = 99999,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 54452541
    assert candidate(mountainHeight = 300,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 1050
    assert candidate(mountainHeight = 7500,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 111826000
    assert candidate(mountainHeight = 30000,workerTimes = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 210504421
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 23595
    assert candidate(mountainHeight = 250,workerTimes = [10000, 20000, 30000, 40000, 50000]) == 31050000
    assert candidate(mountainHeight = 120,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]) == 1100
    assert candidate(mountainHeight = 400,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 33210000
    assert candidate(mountainHeight = 10000,workerTimes = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]) == 8794190
    assert candidate(mountainHeight = 75,workerTimes = [1000, 2000, 3000, 4000]) == 406000
    assert candidate(mountainHeight = 200,workerTimes = [1, 2, 4, 8, 16, 32, 64]) == 2208
    assert candidate(mountainHeight = 100,workerTimes = [10, 20, 30, 40, 50]) == 5250
    assert candidate(mountainHeight = 120000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]) == 621255624
    assert candidate(mountainHeight = 50,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 140000
    assert candidate(mountainHeight = 15000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 4468554000
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 210
    assert candidate(mountainHeight = 30000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 17662788
    assert candidate(mountainHeight = 300,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 2601
    assert candidate(mountainHeight = 120,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 22000
    assert candidate(mountainHeight = 90000,workerTimes = [100, 150, 200, 250, 300, 350, 400, 450, 500]) == 12526645950
    assert candidate(mountainHeight = 30,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 90
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]) == 980
    assert candidate(mountainHeight = 65000,workerTimes = [500, 400, 300, 200, 100, 50, 25, 10, 5, 1]) == 358439550
    assert candidate(mountainHeight = 200,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 8610
    assert candidate(mountainHeight = 10000,workerTimes = [999999, 999998, 999997, 999996, 999995]) == 2000997999000
    assert candidate(mountainHeight = 300,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1891000
    assert candidate(mountainHeight = 300,workerTimes = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 5775
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 600,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 465
    assert candidate(mountainHeight = 75000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 257157181
    assert candidate(mountainHeight = 45000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 246276030
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 50000,workerTimes = [100000, 50000, 25000, 12500, 6250]) == 989124000000
    assert candidate(mountainHeight = 80000,workerTimes = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111]) == 16066085933898
    assert candidate(mountainHeight = 5000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]) == 2183000
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 10000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1987020000
    assert candidate(mountainHeight = 200,workerTimes = [1, 10, 100, 1000, 10000]) == 9900
    assert candidate(mountainHeight = 80,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 252
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 20100
    assert candidate(mountainHeight = 45000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 3217223100
    assert candidate(mountainHeight = 7500,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 4895150
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20]) == 3465
    assert candidate(mountainHeight = 1000,workerTimes = [500, 400, 300, 200, 100]) == 4833000
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1296000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 595
    assert candidate(mountainHeight = 75,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 280
    assert candidate(mountainHeight = 50,workerTimes = [5, 15, 25, 35]) == 1260
    assert candidate(mountainHeight = 50,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 4800
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 1170
    assert candidate(mountainHeight = 99,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 153
    assert candidate(mountainHeight = 1000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 202000
    assert candidate(mountainHeight = 120,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 3300
    assert candidate(mountainHeight = 90000,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 140466750
    assert candidate(mountainHeight = 30000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 178622640
    assert candidate(mountainHeight = 99999,workerTimes = [99999]) == 499990000050000
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1250250000000
    assert candidate(mountainHeight = 300,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1200
    assert candidate(mountainHeight = 5000,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 1091500
    assert candidate(mountainHeight = 90,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 196000
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25]) == 2625
    assert candidate(mountainHeight = 150,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 495
    assert candidate(mountainHeight = 60000,workerTimes = [10000, 15000, 20000, 25000, 30000]) == 1291626280000
    assert candidate(mountainHeight = 25000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1240518000
    assert candidate(mountainHeight = 80000,workerTimes = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 31747590
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 12502500
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49]) == 1470
    assert candidate(mountainHeight = 200,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 4305
    assert candidate(mountainHeight = 500,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) == 5456
    assert candidate(mountainHeight = 25000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5425125
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1]) == 200010000
    assert candidate(mountainHeight = 500,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 51510000
    assert candidate(mountainHeight = 90000,workerTimes = [90000, 45000, 30000, 22500, 18000, 15000, 12857, 11250, 10000, 9000, 8182, 7500, 7000, 6667, 6316, 6000, 5714, 5455, 5217, 5000]) == 99351014202
    assert candidate(mountainHeight = 500,workerTimes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 650
    assert candidate(mountainHeight = 600,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 41000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 8976
    assert candidate(mountainHeight = 80000,workerTimes = [80000, 40000, 20000, 10000, 5000, 2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1]) == 292563920
    assert candidate(mountainHeight = 80000,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 40010000
    assert candidate(mountainHeight = 20000,workerTimes = [300, 200, 150, 100, 50]) == 981466500
    assert candidate(mountainHeight = 200,workerTimes = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 630
    assert candidate(mountainHeight = 250,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 133200
    assert candidate(mountainHeight = 50000,workerTimes = [1000000, 500000, 250000, 125000, 62500]) == 9891240000000
    assert candidate(mountainHeight = 50,workerTimes = [1, 10, 100, 1000, 10000]) == 666
    assert candidate(mountainHeight = 50000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5559445

2025-05-22 06:16:42,863 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().minNumberOfSeconds
2025-05-22 06:16:42,863 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:16:42,863 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(mountainHeight = 15,workerTimes = [5, 5, 5]) == 75
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3]) == 30
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3, 4, 5]) == 18
    assert candidate(mountainHeight = 1,workerTimes = [100]) == 100
    assert candidate(mountainHeight = 50,workerTimes = [1, 2, 3, 4, 5]) == 140
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 30,workerTimes = [3, 3, 3]) == 165
    assert candidate(mountainHeight = 100,workerTimes = [10, 10, 10, 10]) == 3250
    assert candidate(mountainHeight = 100000,workerTimes = [1]) == 5000050000
    assert candidate(mountainHeight = 10,workerTimes = [3, 2, 2, 4]) == 12
    assert candidate(mountainHeight = 5,workerTimes = [1]) == 15
    assert candidate(mountainHeight = 7,workerTimes = [2, 3]) == 20
    assert candidate(mountainHeight = 1,workerTimes = [100000]) == 100000
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 1,workerTimes = [1000000]) == 1000000
    assert candidate(mountainHeight = 100,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 234
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5]) == 140
    assert candidate(mountainHeight = 7,workerTimes = [7]) == 196
    assert candidate(mountainHeight = 30,workerTimes = [2, 3, 4]) == 165
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30]) == 2720
    assert candidate(mountainHeight = 4,workerTimes = [2, 1, 1]) == 3
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 500,workerTimes = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]) == 257550
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800]) == 1703000
    assert candidate(mountainHeight = 50,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 200000, 300000]) == 95812470300000
    assert candidate(mountainHeight = 50,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 140
    assert candidate(mountainHeight = 50000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 49602375000
    assert candidate(mountainHeight = 300,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 5673
    assert candidate(mountainHeight = 75000,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 269335050000
    assert candidate(mountainHeight = 90,workerTimes = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 135
    assert candidate(mountainHeight = 50000,workerTimes = [50000, 25000, 10000, 5000]) == 1024120650000
    assert candidate(mountainHeight = 99999,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 54452541
    assert candidate(mountainHeight = 300,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 1050
    assert candidate(mountainHeight = 7500,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 111826000
    assert candidate(mountainHeight = 30000,workerTimes = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 210504421
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 23595
    assert candidate(mountainHeight = 250,workerTimes = [10000, 20000, 30000, 40000, 50000]) == 31050000
    assert candidate(mountainHeight = 120,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]) == 1100
    assert candidate(mountainHeight = 400,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 33210000
    assert candidate(mountainHeight = 10000,workerTimes = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]) == 8794190
    assert candidate(mountainHeight = 75,workerTimes = [1000, 2000, 3000, 4000]) == 406000
    assert candidate(mountainHeight = 200,workerTimes = [1, 2, 4, 8, 16, 32, 64]) == 2208
    assert candidate(mountainHeight = 100,workerTimes = [10, 20, 30, 40, 50]) == 5250
    assert candidate(mountainHeight = 120000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]) == 621255624
    assert candidate(mountainHeight = 50,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 140000
    assert candidate(mountainHeight = 15000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 4468554000
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 210
    assert candidate(mountainHeight = 30000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 17662788
    assert candidate(mountainHeight = 300,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 2601
    assert candidate(mountainHeight = 120,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 22000
    assert candidate(mountainHeight = 90000,workerTimes = [100, 150, 200, 250, 300, 350, 400, 450, 500]) == 12526645950
    assert candidate(mountainHeight = 30,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 90
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]) == 980
    assert candidate(mountainHeight = 65000,workerTimes = [500, 400, 300, 200, 100, 50, 25, 10, 5, 1]) == 358439550
    assert candidate(mountainHeight = 200,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 8610
    assert candidate(mountainHeight = 10000,workerTimes = [999999, 999998, 999997, 999996, 999995]) == 2000997999000
    assert candidate(mountainHeight = 300,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1891000
    assert candidate(mountainHeight = 300,workerTimes = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 5775
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 600,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 465
    assert candidate(mountainHeight = 75000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 257157181
    assert candidate(mountainHeight = 45000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 246276030
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 50000,workerTimes = [100000, 50000, 25000, 12500, 6250]) == 989124000000
    assert candidate(mountainHeight = 80000,workerTimes = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111]) == 16066085933898
    assert candidate(mountainHeight = 5000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]) == 2183000
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 10000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1987020000
    assert candidate(mountainHeight = 200,workerTimes = [1, 10, 100, 1000, 10000]) == 9900
    assert candidate(mountainHeight = 80,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 252
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 20100
    assert candidate(mountainHeight = 45000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 3217223100
    assert candidate(mountainHeight = 7500,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 4895150
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20]) == 3465
    assert candidate(mountainHeight = 1000,workerTimes = [500, 400, 300, 200, 100]) == 4833000
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1296000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 595
    assert candidate(mountainHeight = 75,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 280
    assert candidate(mountainHeight = 50,workerTimes = [5, 15, 25, 35]) == 1260
    assert candidate(mountainHeight = 50,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 4800
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 1170
    assert candidate(mountainHeight = 99,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 153
    assert candidate(mountainHeight = 1000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 202000
    assert candidate(mountainHeight = 120,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 3300
    assert candidate(mountainHeight = 90000,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 140466750
    assert candidate(mountainHeight = 30000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 178622640
    assert candidate(mountainHeight = 99999,workerTimes = [99999]) == 499990000050000
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1250250000000
    assert candidate(mountainHeight = 300,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1200
    assert candidate(mountainHeight = 5000,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 1091500
    assert candidate(mountainHeight = 90,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 196000
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25]) == 2625
    assert candidate(mountainHeight = 150,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 495
    assert candidate(mountainHeight = 60000,workerTimes = [10000, 15000, 20000, 25000, 30000]) == 1291626280000
    assert candidate(mountainHeight = 25000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1240518000
    assert candidate(mountainHeight = 80000,workerTimes = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 31747590
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 12502500
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49]) == 1470
    assert candidate(mountainHeight = 200,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 4305
    assert candidate(mountainHeight = 500,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) == 5456
    assert candidate(mountainHeight = 25000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5425125
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1]) == 200010000
    assert candidate(mountainHeight = 500,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 51510000
    assert candidate(mountainHeight = 90000,workerTimes = [90000, 45000, 30000, 22500, 18000, 15000, 12857, 11250, 10000, 9000, 8182, 7500, 7000, 6667, 6316, 6000, 5714, 5455, 5217, 5000]) == 99351014202
    assert candidate(mountainHeight = 500,workerTimes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 650
    assert candidate(mountainHeight = 600,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 41000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 8976
    assert candidate(mountainHeight = 80000,workerTimes = [80000, 40000, 20000, 10000, 5000, 2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1]) == 292563920
    assert candidate(mountainHeight = 80000,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 40010000
    assert candidate(mountainHeight = 20000,workerTimes = [300, 200, 150, 100, 50]) == 981466500
    assert candidate(mountainHeight = 200,workerTimes = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 630
    assert candidate(mountainHeight = 250,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 133200
    assert candidate(mountainHeight = 50000,workerTimes = [1000000, 500000, 250000, 125000, 62500]) == 9891240000000
    assert candidate(mountainHeight = 50,workerTimes = [1, 10, 100, 1000, 10000]) == 666
    assert candidate(mountainHeight = 50000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5559445

2025-05-22 06:16:42,863 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().minNumberOfSeconds
2025-05-22 06:16:42,864 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        if mountainHeight == 0:
            return 0

        workerTimes.sort()
        left = 0
        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time

        def is_possible(time):
            total = 0
            for t in workerTimes:
                if t == 0:
                    continue
                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2
                k = int(max_k)
                while k * (k + 1) * t / 2 <= time:
                    k += 1
                k -= 1
                if k <= 0:
                    continue
                total += k
                if total >= mountainHeight:
                    return True
            return total >= mountainHeight

        answer = right
        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer
2025-05-22 06:16:42,864 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        if mountainHeight == 0:
            return 0

        workerTimes.sort()
        left = 0
        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time

        def is_possible(time):
            total = 0
            for t in workerTimes:
                if t == 0:
                    continue
                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2
                k = int(max_k)
                while k * (k + 1) * t / 2 <= time:
                    k += 1
                k -= 1
                if k <= 0:
                    continue
                total += k
                if total >= mountainHeight:
                    return True
            return total >= mountainHeight

        answer = right
        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(mountainHeight = 15,workerTimes = [5, 5, 5]) == 75
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3]) == 30
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3, 4, 5]) == 18
    assert candidate(mountainHeight = 1,workerTimes = [100]) == 100
    assert candidate(mountainHeight = 50,workerTimes = [1, 2, 3, 4, 5]) == 140
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 30,workerTimes = [3, 3, 3]) == 165
    assert candidate(mountainHeight = 100,workerTimes = [10, 10, 10, 10]) == 3250
    assert candidate(mountainHeight = 100000,workerTimes = [1]) == 5000050000
    assert candidate(mountainHeight = 10,workerTimes = [3, 2, 2, 4]) == 12
    assert candidate(mountainHeight = 5,workerTimes = [1]) == 15
    assert candidate(mountainHeight = 7,workerTimes = [2, 3]) == 20
    assert candidate(mountainHeight = 1,workerTimes = [100000]) == 100000
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 1,workerTimes = [1000000]) == 1000000
    assert candidate(mountainHeight = 100,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 234
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5]) == 140
    assert candidate(mountainHeight = 7,workerTimes = [7]) == 196
    assert candidate(mountainHeight = 30,workerTimes = [2, 3, 4]) == 165
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30]) == 2720
    assert candidate(mountainHeight = 4,workerTimes = [2, 1, 1]) == 3
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 500,workerTimes = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]) == 257550
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800]) == 1703000
    assert candidate(mountainHeight = 50,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 200000, 300000]) == 95812470300000
    assert candidate(mountainHeight = 50,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 140
    assert candidate(mountainHeight = 50000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 49602375000
    assert candidate(mountainHeight = 300,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 5673
    assert candidate(mountainHeight = 75000,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 269335050000
    assert candidate(mountainHeight = 90,workerTimes = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 135
    assert candidate(mountainHeight = 50000,workerTimes = [50000, 25000, 10000, 5000]) == 1024120650000
    assert candidate(mountainHeight = 99999,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 54452541
    assert candidate(mountainHeight = 300,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 1050
    assert candidate(mountainHeight = 7500,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 111826000
    assert candidate(mountainHeight = 30000,workerTimes = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 210504421
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 23595
    assert candidate(mountainHeight = 250,workerTimes = [10000, 20000, 30000, 40000, 50000]) == 31050000
    assert candidate(mountainHeight = 120,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]) == 1100
    assert candidate(mountainHeight = 400,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 33210000
    assert candidate(mountainHeight = 10000,workerTimes = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]) == 8794190
    assert candidate(mountainHeight = 75,workerTimes = [1000, 2000, 3000, 4000]) == 406000
    assert candidate(mountainHeight = 200,workerTimes = [1, 2, 4, 8, 16, 32, 64]) == 2208
    assert candidate(mountainHeight = 100,workerTimes = [10, 20, 30, 40, 50]) == 5250
    assert candidate(mountainHeight = 120000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]) == 621255624
    assert candidate(mountainHeight = 50,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 140000
    assert candidate(mountainHeight = 15000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 4468554000
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 210
    assert candidate(mountainHeight = 30000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 17662788
    assert candidate(mountainHeight = 300,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 2601
    assert candidate(mountainHeight = 120,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 22000
    assert candidate(mountainHeight = 90000,workerTimes = [100, 150, 200, 250, 300, 350, 400, 450, 500]) == 12526645950
    assert candidate(mountainHeight = 30,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 90
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]) == 980
    assert candidate(mountainHeight = 65000,workerTimes = [500, 400, 300, 200, 100, 50, 25, 10, 5, 1]) == 358439550
    assert candidate(mountainHeight = 200,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 8610
    assert candidate(mountainHeight = 10000,workerTimes = [999999, 999998, 999997, 999996, 999995]) == 2000997999000
    assert candidate(mountainHeight = 300,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1891000
    assert candidate(mountainHeight = 300,workerTimes = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 5775
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 600,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 465
    assert candidate(mountainHeight = 75000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 257157181
    assert candidate(mountainHeight = 45000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 246276030
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 50000,workerTimes = [100000, 50000, 25000, 12500, 6250]) == 989124000000
    assert candidate(mountainHeight = 80000,workerTimes = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111]) == 16066085933898
    assert candidate(mountainHeight = 5000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]) == 2183000
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 10000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1987020000
    assert candidate(mountainHeight = 200,workerTimes = [1, 10, 100, 1000, 10000]) == 9900
    assert candidate(mountainHeight = 80,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 252
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 20100
    assert candidate(mountainHeight = 45000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 3217223100
    assert candidate(mountainHeight = 7500,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 4895150
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20]) == 3465
    assert candidate(mountainHeight = 1000,workerTimes = [500, 400, 300, 200, 100]) == 4833000
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1296000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 595
    assert candidate(mountainHeight = 75,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 280
    assert candidate(mountainHeight = 50,workerTimes = [5, 15, 25, 35]) == 1260
    assert candidate(mountainHeight = 50,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 4800
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 1170
    assert candidate(mountainHeight = 99,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 153
    assert candidate(mountainHeight = 1000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 202000
    assert candidate(mountainHeight = 120,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 3300
    assert candidate(mountainHeight = 90000,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 140466750
    assert candidate(mountainHeight = 30000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 178622640
    assert candidate(mountainHeight = 99999,workerTimes = [99999]) == 499990000050000
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1250250000000
    assert candidate(mountainHeight = 300,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1200
    assert candidate(mountainHeight = 5000,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 1091500
    assert candidate(mountainHeight = 90,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 196000
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25]) == 2625
    assert candidate(mountainHeight = 150,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 495
    assert candidate(mountainHeight = 60000,workerTimes = [10000, 15000, 20000, 25000, 30000]) == 1291626280000
    assert candidate(mountainHeight = 25000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1240518000
    assert candidate(mountainHeight = 80000,workerTimes = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 31747590
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 12502500
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49]) == 1470
    assert candidate(mountainHeight = 200,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 4305
    assert candidate(mountainHeight = 500,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) == 5456
    assert candidate(mountainHeight = 25000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5425125
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1]) == 200010000
    assert candidate(mountainHeight = 500,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 51510000
    assert candidate(mountainHeight = 90000,workerTimes = [90000, 45000, 30000, 22500, 18000, 15000, 12857, 11250, 10000, 9000, 8182, 7500, 7000, 6667, 6316, 6000, 5714, 5455, 5217, 5000]) == 99351014202
    assert candidate(mountainHeight = 500,workerTimes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 650
    assert candidate(mountainHeight = 600,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 41000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 8976
    assert candidate(mountainHeight = 80000,workerTimes = [80000, 40000, 20000, 10000, 5000, 2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1]) == 292563920
    assert candidate(mountainHeight = 80000,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 40010000
    assert candidate(mountainHeight = 20000,workerTimes = [300, 200, 150, 100, 50]) == 981466500
    assert candidate(mountainHeight = 200,workerTimes = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 630
    assert candidate(mountainHeight = 250,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 133200
    assert candidate(mountainHeight = 50000,workerTimes = [1000000, 500000, 250000, 125000, 62500]) == 9891240000000
    assert candidate(mountainHeight = 50,workerTimes = [1, 10, 100, 1000, 10000]) == 666
    assert candidate(mountainHeight = 50000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5559445


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minNumberOfSeconds)

2025-05-22 06:16:42,864 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        if mountainHeight == 0:
            return 0

        workerTimes.sort()
        left = 0
        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time

        def is_possible(time):
            total = 0
            for t in workerTimes:
                if t == 0:
                    continue
                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2
                k = int(max_k)
                while k * (k + 1) * t / 2 <= time:
                    k += 1
                k -= 1
                if k <= 0:
                    continue
                total += k
                if total >= mountainHeight:
                    return True
            return total >= mountainHeight

        answer = right
        while left <= right:
            mid = (left + right) // 2
            if is_possible(mid):
                answer = mid
                right = mid - 1
            else:
                left = mid + 1
        return answer

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(mountainHeight = 15,workerTimes = [5, 5, 5]) == 75
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3]) == 30
    assert candidate(mountainHeight = 15,workerTimes = [1, 2, 3, 4, 5]) == 18
    assert candidate(mountainHeight = 1,workerTimes = [100]) == 100
    assert candidate(mountainHeight = 50,workerTimes = [1, 2, 3, 4, 5]) == 140
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 30,workerTimes = [3, 3, 3]) == 165
    assert candidate(mountainHeight = 100,workerTimes = [10, 10, 10, 10]) == 3250
    assert candidate(mountainHeight = 100000,workerTimes = [1]) == 5000050000
    assert candidate(mountainHeight = 10,workerTimes = [3, 2, 2, 4]) == 12
    assert candidate(mountainHeight = 5,workerTimes = [1]) == 15
    assert candidate(mountainHeight = 7,workerTimes = [2, 3]) == 20
    assert candidate(mountainHeight = 1,workerTimes = [100000]) == 100000
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 1,workerTimes = [1000000]) == 1000000
    assert candidate(mountainHeight = 100,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 234
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5]) == 140
    assert candidate(mountainHeight = 7,workerTimes = [7]) == 196
    assert candidate(mountainHeight = 30,workerTimes = [2, 3, 4]) == 165
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30]) == 2720
    assert candidate(mountainHeight = 4,workerTimes = [2, 1, 1]) == 3
    assert candidate(mountainHeight = 20,workerTimes = [5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 500,workerTimes = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]) == 257550
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800]) == 1703000
    assert candidate(mountainHeight = 50,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 75
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 200000, 300000]) == 95812470300000
    assert candidate(mountainHeight = 50,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 140
    assert candidate(mountainHeight = 50000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 49602375000
    assert candidate(mountainHeight = 300,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 5673
    assert candidate(mountainHeight = 75000,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 269335050000
    assert candidate(mountainHeight = 90,workerTimes = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 135
    assert candidate(mountainHeight = 50000,workerTimes = [50000, 25000, 10000, 5000]) == 1024120650000
    assert candidate(mountainHeight = 99999,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 54452541
    assert candidate(mountainHeight = 300,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 1050
    assert candidate(mountainHeight = 7500,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 111826000
    assert candidate(mountainHeight = 30000,workerTimes = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]) == 210504421
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 23595
    assert candidate(mountainHeight = 250,workerTimes = [10000, 20000, 30000, 40000, 50000]) == 31050000
    assert candidate(mountainHeight = 120,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]) == 1100
    assert candidate(mountainHeight = 400,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 33210000
    assert candidate(mountainHeight = 10000,workerTimes = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]) == 8794190
    assert candidate(mountainHeight = 75,workerTimes = [1000, 2000, 3000, 4000]) == 406000
    assert candidate(mountainHeight = 200,workerTimes = [1, 2, 4, 8, 16, 32, 64]) == 2208
    assert candidate(mountainHeight = 100,workerTimes = [10, 20, 30, 40, 50]) == 5250
    assert candidate(mountainHeight = 120000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]) == 621255624
    assert candidate(mountainHeight = 50,workerTimes = [1000, 2000, 3000, 4000, 5000]) == 140000
    assert candidate(mountainHeight = 15000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 4468554000
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 210
    assert candidate(mountainHeight = 30000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 17662788
    assert candidate(mountainHeight = 300,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]) == 2601
    assert candidate(mountainHeight = 120,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 22000
    assert candidate(mountainHeight = 90000,workerTimes = [100, 150, 200, 250, 300, 350, 400, 450, 500]) == 12526645950
    assert candidate(mountainHeight = 30,workerTimes = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 90
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]) == 980
    assert candidate(mountainHeight = 65000,workerTimes = [500, 400, 300, 200, 100, 50, 25, 10, 5, 1]) == 358439550
    assert candidate(mountainHeight = 200,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 8610
    assert candidate(mountainHeight = 10000,workerTimes = [999999, 999998, 999997, 999996, 999995]) == 2000997999000
    assert candidate(mountainHeight = 300,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1891000
    assert candidate(mountainHeight = 300,workerTimes = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]) == 5775
    assert candidate(mountainHeight = 200,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 600,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 465
    assert candidate(mountainHeight = 75000,workerTimes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 257157181
    assert candidate(mountainHeight = 45000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 246276030
    assert candidate(mountainHeight = 100,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 55
    assert candidate(mountainHeight = 50000,workerTimes = [100000, 50000, 25000, 12500, 6250]) == 989124000000
    assert candidate(mountainHeight = 80000,workerTimes = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111]) == 16066085933898
    assert candidate(mountainHeight = 5000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]) == 2183000
    assert candidate(mountainHeight = 50,workerTimes = [10, 20, 30, 40, 50]) == 1400
    assert candidate(mountainHeight = 10000,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1987020000
    assert candidate(mountainHeight = 200,workerTimes = [1, 10, 100, 1000, 10000]) == 9900
    assert candidate(mountainHeight = 80,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 252
    assert candidate(mountainHeight = 1000,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 20100
    assert candidate(mountainHeight = 45000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]) == 3217223100
    assert candidate(mountainHeight = 7500,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 4895150
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20]) == 3465
    assert candidate(mountainHeight = 1000,workerTimes = [500, 400, 300, 200, 100]) == 4833000
    assert candidate(mountainHeight = 800,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1296000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 595
    assert candidate(mountainHeight = 75,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 280
    assert candidate(mountainHeight = 50,workerTimes = [5, 15, 25, 35]) == 1260
    assert candidate(mountainHeight = 50,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]) == 4800
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 1170
    assert candidate(mountainHeight = 99,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 153
    assert candidate(mountainHeight = 1000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 202000
    assert candidate(mountainHeight = 120,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 3300
    assert candidate(mountainHeight = 90000,workerTimes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 140466750
    assert candidate(mountainHeight = 30000,workerTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 178622640
    assert candidate(mountainHeight = 99999,workerTimes = [99999]) == 499990000050000
    assert candidate(mountainHeight = 100000,workerTimes = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]) == 1250250000000
    assert candidate(mountainHeight = 300,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1200
    assert candidate(mountainHeight = 5000,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 1091500
    assert candidate(mountainHeight = 90,workerTimes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 196000
    assert candidate(mountainHeight = 100,workerTimes = [5, 10, 15, 20, 25]) == 2625
    assert candidate(mountainHeight = 150,workerTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 495
    assert candidate(mountainHeight = 60000,workerTimes = [10000, 15000, 20000, 25000, 30000]) == 1291626280000
    assert candidate(mountainHeight = 25000,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1240518000
    assert candidate(mountainHeight = 80000,workerTimes = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 31747590
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 12502500
    assert candidate(mountainHeight = 75,workerTimes = [7, 14, 21, 28, 35, 42, 49]) == 1470
    assert candidate(mountainHeight = 200,workerTimes = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 4305
    assert candidate(mountainHeight = 500,workerTimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) == 5456
    assert candidate(mountainHeight = 25000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5425125
    assert candidate(mountainHeight = 100000,workerTimes = [1, 1, 1, 1, 1]) == 200010000
    assert candidate(mountainHeight = 500,workerTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]) == 51510000
    assert candidate(mountainHeight = 90000,workerTimes = [90000, 45000, 30000, 22500, 18000, 15000, 12857, 11250, 10000, 9000, 8182, 7500, 7000, 6667, 6316, 6000, 5714, 5455, 5217, 5000]) == 99351014202
    assert candidate(mountainHeight = 500,workerTimes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 650
    assert candidate(mountainHeight = 600,workerTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 41000
    assert candidate(mountainHeight = 1000,workerTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 8976
    assert candidate(mountainHeight = 80000,workerTimes = [80000, 40000, 20000, 10000, 5000, 2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1]) == 292563920
    assert candidate(mountainHeight = 80000,workerTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 40010000
    assert candidate(mountainHeight = 20000,workerTimes = [300, 200, 150, 100, 50]) == 981466500
    assert candidate(mountainHeight = 200,workerTimes = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 630
    assert candidate(mountainHeight = 250,workerTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 133200
    assert candidate(mountainHeight = 50000,workerTimes = [1000000, 500000, 250000, 125000, 62500]) == 9891240000000
    assert candidate(mountainHeight = 50,workerTimes = [1, 10, 100, 1000, 10000]) == 666
    assert candidate(mountainHeight = 50000,workerTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5559445


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().minNumberOfSeconds)

2025-05-22 06:16:57,080 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 14.215714693069458,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:16:57,080 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:192): Solution found in initial generation (node 0_0), stopping early
2025-05-22 06:16:57,080 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:16:57,081 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 2 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:16:57,081 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427549104 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:16:57,082 [DEBUG] filelock (_api.py:334): Lock 140657427549104 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:16:57,082 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:16:57,274 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427549104 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:16:57,274 [DEBUG] filelock (_api.py:367): Lock 140657427549104 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:16:57,274 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:16:57,274 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:16:57,276 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/minimum-number-of-seconds-to-make-mountain-height-zero.json
2025-05-22 06:16:57,276 [INFO] root (run_leetcode_solver.py:373): Processed problem minimum-number-of-seconds-to-make-mountain-height-zero in 77.17 seconds
2025-05-22 06:16:57,276 [INFO] root (run_leetcode_solver.py:348): Processing problem ID count-substrings-that-can-be-rearranged-to-contain-a-string-i with model deepseek-r1-distill
2025-05-22 06:16:57,409 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem count-substrings-that-can-be-rearranged-to-contain-a-string-i
2025-05-22 06:16:57,410 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:16:57,594 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:16:57,594 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:57,594 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:16:57,594 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:16,767 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:16,767 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:16,768 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:16,768 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:16,768 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (1024 chars)
2025-05-22 06:17:16,950 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:16,951 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:16,951 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:16,951 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:43,556 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:43,556 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:43,556 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:43,557 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:43,557 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (1376 chars)
2025-05-22 06:17:43,739 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:17:43,740 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:43,740 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:17:43,740 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:18:00,604 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:18:00,605 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:18:00,605 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:18:00,605 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:18:00,605 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (598 chars)
2025-05-22 06:18:00,605 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        
        for i in range(len1):
            char = word1[i]
            current[char] += 1
            
            if i >= len2 - 1:
                # Check if current window meets the criteria
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
                
                # Slide the window
                left_char = word1[i - len2 + 1]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]
        
        return result
2025-05-22 06:18:00,605 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:18:00,605 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:18:00,605 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:18:00,605 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:18:00,605 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:18:00,605 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            if i >= len2 - 1:
                # Check if current window meets the criteria
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

                # Slide the window
                left_char = word1[i - len2 + 1]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result
2025-05-22 06:18:00,606 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            if i >= len2 - 1:
                # Check if current window meets the criteria
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

                # Slide the window
                left_char = word1[i - len2 + 1]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:18:00,606 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            if i >= len2 - 1:
                # Check if current window meets the criteria
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

                # Slide the window
                left_char = word1[i - len2 + 1]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:18:14,699 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp3fakdk9p.py\", line 226, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmp3fakdk9p.py\", line 116, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp3fakdk9p.py` failed. (See above for error)\n",
  "execution_time": 14.0920729637146,
  "failed_tests": [
    {
      "input": "word1 = \"banana\",word2 = \"ban\"",
      "expected": "4",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp3fakdk9p.py\", line 226, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmp3fakdk9p.py\", line 116, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp3fakdk9p.py` failed. (See above for error)"
}
2025-05-22 06:18:14,699 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 06:18:14,699 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 06:18:14,902 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:18:14,903 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:18:14,903 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:18:14,903 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:19:12,513 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:19:12,514 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:19:12,514 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:19:12,514 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:19:12,514 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1149 chars)
2025-05-22 06:19:12,697 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:19:12,698 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:19:12,698 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:19:12,698 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:20:16,108 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:20:16,108 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:20:16,108 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:20:16,108 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:20:16,109 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1173 chars)
2025-05-22 06:20:16,291 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:20:16,291 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:20:16,292 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:20:16,292 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:21:20,354 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:21:20,354 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:21:20,355 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:21:20,355 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:21:20,355 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1537 chars)
2025-05-22 06:21:20,355 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        
        for i in range(len1):
            char = word1[i]
            current[char] += 1
            
            # Check all possible substrings ending at i with length >= len2
            for j in range(max(0, i - len1 + len2), i + 1):
                # Check if the substring from j to i is valid
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
                # Slide the window
                left_char = word1[j]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]
        
        return result
2025-05-22 06:21:20,355 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:21:20,355 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:21:20,355 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:21:20,355 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:21:20,355 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:21:20,355 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            # Check all possible substrings ending at i with length >= len2
            for j in range(max(0, i - len1 + len2), i + 1):
                # Check if the substring from j to i is valid
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
                # Slide the window
                left_char = word1[j]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result
2025-05-22 06:21:20,356 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            # Check all possible substrings ending at i with length >= len2
            for j in range(max(0, i - len1 + len2), i + 1):
                # Check if the substring from j to i is valid
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
                # Slide the window
                left_char = word1[j]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:21:20,356 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        for i in range(len1):
            char = word1[i]
            current[char] += 1

            # Check all possible substrings ending at i with length >= len2
            for j in range(max(0, i - len1 + len2), i + 1):
                # Check if the substring from j to i is valid
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
                # Slide the window
                left_char = word1[j]
                current[left_char] -= 1
                if current[left_char] == 0:
                    del current[left_char]

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:21:34,598 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpeavx83yl.py\", line 228, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpeavx83yl.py\", line 118, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpeavx83yl.py` failed. (See above for error)\n",
  "execution_time": 14.242199659347534,
  "failed_tests": [
    {
      "input": "word1 = \"banana\",word2 = \"ban\"",
      "expected": "4",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpeavx83yl.py\", line 228, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpeavx83yl.py\", line 118, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpeavx83yl.py` failed. (See above for error)"
}
2025-05-22 06:21:34,599 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 06:21:34,599 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 06:21:34,802 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:21:34,803 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:21:34,803 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:21:34,803 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:22:39,056 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:22:39,057 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:22:39,057 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:22:39,057 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:22:39,057 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (1477 chars)
2025-05-22 06:22:39,240 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:22:39,240 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:22:39,240 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:22:39,241 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:23:39,943 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:23:39,943 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:23:39,943 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:23:39,944 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:23:39,944 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (1160 chars)
2025-05-22 06:23:40,126 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:23:40,127 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:23:40,127 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:23:40,127 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:24:43,306 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:24:43,306 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:24:43,306 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:24:43,307 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:24:43,307 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (1336 chars)
2025-05-22 06:24:43,307 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = defaultdict(int)
        for c in word2:
            count_word2[c] += 1
        
        current = defaultdict(int)
        required = len(count_word2)
        formed = 0
        result = 0
        
        left = 0
        for right in range(len1):
            char = word1[right]
            current[char] += 1
            
            if char in count_word2 and current[char] == count_word2[char]:
                formed += 1
            
            # When window is at least len2, check if all required are met
            while right - left + 1 >= len2:
                if formed == required:
                    # All substrings ending at right with length >= len2 are valid
                    result += (right - left + 1 - len2 + 1)
                    # Move left to find more possible valid substrings
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    if left_char in count_word2 and current[left_char] < count_word2[left_char]:
                        formed -= 1
                    left += 1
                else:
                    break
        
        return result
2025-05-22 06:24:43,307 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:24:43,307 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:24:43,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:24:43,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:24:43,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:24:43,307 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = defaultdict(int)
        for c in word2:
            count_word2[c] += 1

        current = defaultdict(int)
        required = len(count_word2)
        formed = 0
        result = 0

        left = 0
        for right in range(len1):
            char = word1[right]
            current[char] += 1

            if char in count_word2 and current[char] == count_word2[char]:
                formed += 1

            # When window is at least len2, check if all required are met
            while right - left + 1 >= len2:
                if formed == required:
                    # All substrings ending at right with length >= len2 are valid
                    result += (right - left + 1 - len2 + 1)
                    # Move left to find more possible valid substrings
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    if left_char in count_word2 and current[left_char] < count_word2[left_char]:
                        formed -= 1
                    left += 1
                else:
                    break

        return result
2025-05-22 06:24:43,308 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = defaultdict(int)
        for c in word2:
            count_word2[c] += 1

        current = defaultdict(int)
        required = len(count_word2)
        formed = 0
        result = 0

        left = 0
        for right in range(len1):
            char = word1[right]
            current[char] += 1

            if char in count_word2 and current[char] == count_word2[char]:
                formed += 1

            # When window is at least len2, check if all required are met
            while right - left + 1 >= len2:
                if formed == required:
                    # All substrings ending at right with length >= len2 are valid
                    result += (right - left + 1 - len2 + 1)
                    # Move left to find more possible valid substrings
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    if left_char in count_word2 and current[left_char] < count_word2[left_char]:
                        formed -= 1
                    left += 1
                else:
                    break

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:24:43,308 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = defaultdict(int)
        for c in word2:
            count_word2[c] += 1

        current = defaultdict(int)
        required = len(count_word2)
        formed = 0
        result = 0

        left = 0
        for right in range(len1):
            char = word1[right]
            current[char] += 1

            if char in count_word2 and current[char] == count_word2[char]:
                formed += 1

            # When window is at least len2, check if all required are met
            while right - left + 1 >= len2:
                if formed == required:
                    # All substrings ending at right with length >= len2 are valid
                    result += (right - left + 1 - len2 + 1)
                    # Move left to find more possible valid substrings
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    if left_char in count_word2 and current[left_char] < count_word2[left_char]:
                        formed -= 1
                    left += 1
                else:
                    break

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:24:57,277 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpq1rm__95.py\", line 236, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpq1rm__95.py\", line 126, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpq1rm__95.py` failed. (See above for error)\n",
  "execution_time": 13.968380689620972,
  "failed_tests": [
    {
      "input": "word1 = \"banana\",word2 = \"ban\"",
      "expected": "4",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpq1rm__95.py\", line 236, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpq1rm__95.py\", line 126, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpq1rm__95.py` failed. (See above for error)"
}
2025-05-22 06:24:57,277 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        current = Counter()
        result = 0
        
        # Initialize the first window
        for i in range(len2):
            current[word1[i]] += 1
        
        # Check if the first window is valid
        if current >= count_word2:
            result += 1
        
        # Slide the window
        for i in range(len2, len1):
            # Add the new character
            current[word1[i]] += 1
            # Remove the leftmost character of the previous window
            left_char = word1[i - len2]
            current[left_char] -= 1
            if current[left_char] == 0:
                del current[left_char]
            # Check if current window is valid
            if current >= count_word2:
                result += 1
                # Add all possible longer substrings starting at i - len2 + 1
                result += (i - (i - len2 + 1) + 1)
        
        return result
2025-05-22 06:24:57,277 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:24:57,277 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        current = Counter()
        result = 0

        # Initialize the first window
        for i in range(len2):
            current[word1[i]] += 1

        # Check if the first window is valid
        if current >= count_word2:
            result += 1

        # Slide the window
        for i in range(len2, len1):
            # Add the new character
            current[word1[i]] += 1
            # Remove the leftmost character of the previous window
            left_char = word1[i - len2]
            current[left_char] -= 1
            if current[left_char] == 0:
                del current[left_char]
            # Check if current window is valid
            if current >= count_word2:
                result += 1
                # Add all possible longer substrings starting at i - len2 + 1
                result += (i - (i - len2 + 1) + 1)

        return result
2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        current = Counter()
        result = 0

        # Initialize the first window
        for i in range(len2):
            current[word1[i]] += 1

        # Check if the first window is valid
        if current >= count_word2:
            result += 1

        # Slide the window
        for i in range(len2, len1):
            # Add the new character
            current[word1[i]] += 1
            # Remove the leftmost character of the previous window
            left_char = word1[i - len2]
            current[left_char] -= 1
            if current[left_char] == 0:
                del current[left_char]
            # Check if current window is valid
            if current >= count_word2:
                result += 1
                # Add all possible longer substrings starting at i - len2 + 1
                result += (i - (i - len2 + 1) + 1)

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:24:57,277 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        current = Counter()
        result = 0

        # Initialize the first window
        for i in range(len2):
            current[word1[i]] += 1

        # Check if the first window is valid
        if current >= count_word2:
            result += 1

        # Slide the window
        for i in range(len2, len1):
            # Add the new character
            current[word1[i]] += 1
            # Remove the leftmost character of the previous window
            left_char = word1[i - len2]
            current[left_char] -= 1
            if current[left_char] == 0:
                del current[left_char]
            # Check if current window is valid
            if current >= count_word2:
                result += 1
                # Add all possible longer substrings starting at i - len2 + 1
                result += (i - (i - len2 + 1) + 1)

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:10,917 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 230, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 120, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 98, in validSubstringCount\n    if current >= count_word2:\nTypeError: '>=' not supported between instances of 'Counter' and 'Counter'\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpi0_qfrvv.py` failed. (See above for error)\n",
  "execution_time": 13.63896656036377,
  "failed_tests": [
    {
      "input": "word1 = \"banana\",word2 = \"ban\"",
      "expected": "4",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 230, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 120, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\n  File \"/scratch/local/21926554/tmpi0_qfrvv.py\", line 98, in validSubstringCount\n    if current >= count_word2:\nTypeError: '>=' not supported between instances of 'Counter' and 'Counter'\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpi0_qfrvv.py` failed. (See above for error)"
}
2025-05-22 06:25:10,917 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        left = 0
        
        for right in range(len1):
            char = word1[right]
            current[char] += 1
            
            # Check if the current window meets the requirements
            while right - left + 1 >= len2:
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    # All substrings ending at right and starting from left or later are valid
                    result += (right - left + 1 - len2 + 1)
                    left += 1
                else:
                    # Move left to try to find a valid window
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    left += 1
        
        return result
2025-05-22 06:25:10,917 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:10,917 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:10,917 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:25:10,918 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:10,918 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:10,918 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        left = 0

        for right in range(len1):
            char = word1[right]
            current[char] += 1

            # Check if the current window meets the requirements
            while right - left + 1 >= len2:
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    # All substrings ending at right and starting from left or later are valid
                    result += (right - left + 1 - len2 + 1)
                    left += 1
                else:
                    # Move left to try to find a valid window
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    left += 1

        return result
2025-05-22 06:25:10,918 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        left = 0

        for right in range(len1):
            char = word1[right]
            current[char] += 1

            # Check if the current window meets the requirements
            while right - left + 1 >= len2:
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    # All substrings ending at right and starting from left or later are valid
                    result += (right - left + 1 - len2 + 1)
                    left += 1
                else:
                    # Move left to try to find a valid window
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    left += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:10,918 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        left = 0

        for right in range(len1):
            char = word1[right]
            current[char] += 1

            # Check if the current window meets the requirements
            while right - left + 1 >= len2:
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    # All substrings ending at right and starting from left or later are valid
                    result += (right - left + 1 - len2 + 1)
                    left += 1
                else:
                    # Move left to try to find a valid window
                    left_char = word1[left]
                    current[left_char] -= 1
                    if current[left_char] == 0:
                        del current[left_char]
                    left += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:24,593 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpaox86aua.py\", line 232, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpaox86aua.py\", line 125, in check\n    assert candidate(word1 = \"aaaabc\",word2 = \"aaa\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpaox86aua.py` failed. (See above for error)\n",
  "execution_time": 13.674933671951294,
  "failed_tests": [
    {
      "input": "word1 = \"aaaabc\",word2 = \"aaa\"",
      "expected": "7",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpaox86aua.py\", line 232, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpaox86aua.py\", line 125, in check\n    assert candidate(word1 = \"aaaabc\",word2 = \"aaa\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpaox86aua.py` failed. (See above for error)"
}
2025-05-22 06:25:24,594 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        required = len(count_word2)
        
        # Precompute prefix sums for each character
        prefix = [Counter() for _ in range(len1 + 1)]
        for i in range(len1):
            prefix[i+1] = prefix[i].copy()
            prefix[i+1][word1[i]] += 1
        
        result = 0
        
        for end in range(len2, len1 + 1):
            for start in range(0, end - len2 + 1):
                current = prefix[end].copy()
                for key in prefix[start]:
                    current[key] -= prefix[start][key]
                    if current[key] == 0:
                        del current[key]
                
                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1
        
        return result
2025-05-22 06:25:24,594 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:24,594 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)

        # Precompute prefix sums for each character
        prefix = [Counter() for _ in range(len1 + 1)]
        for i in range(len1):
            prefix[i+1] = prefix[i].copy()
            prefix[i+1][word1[i]] += 1

        result = 0

        for end in range(len2, len1 + 1):
            for start in range(0, end - len2 + 1):
                current = prefix[end].copy()
                for key in prefix[start]:
                    current[key] -= prefix[start][key]
                    if current[key] == 0:
                        del current[key]

                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

        return result
2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)

        # Precompute prefix sums for each character
        prefix = [Counter() for _ in range(len1 + 1)]
        for i in range(len1):
            prefix[i+1] = prefix[i].copy()
            prefix[i+1][word1[i]] += 1

        result = 0

        for end in range(len2, len1 + 1):
            for start in range(0, end - len2 + 1):
                current = prefix[end].copy()
                for key in prefix[start]:
                    current[key] -= prefix[start][key]
                    if current[key] == 0:
                        del current[key]

                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:24,594 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)

        # Precompute prefix sums for each character
        prefix = [Counter() for _ in range(len1 + 1)]
        for i in range(len1):
            prefix[i+1] = prefix[i].copy()
            prefix[i+1][word1[i]] += 1

        result = 0

        for end in range(len2, len1 + 1):
            for start in range(0, end - len2 + 1):
                current = prefix[end].copy()
                for key in prefix[start]:
                    current[key] -= prefix[start][key]
                    if current[key] == 0:
                        del current[key]

                valid = True
                for key in count_word2:
                    if current.get(key, 0) < count_word2[key]:
                        valid = False
                        break
                if valid:
                    result += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:38,394 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.798732280731201,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:25:38,394 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 1_5 (depth 1)
2025-05-22 06:25:38,394 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0
        
        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0
        
        # Initialize the current window with the first len2 characters
        for i in range(len2):
            char = word1[i]
            current[char] += 1
        
        # Check if the initial window is valid
        valid = True
        for key in count_word2:
            if current.get(key, 0) < count_word2[key]:
                valid = False
                break
        if valid:
            result += 1
        
        # Slide the window through the rest of word1
        for i in range(len2, len1):
            # Add the new character to the window
            new_char = word1[i]
            current[new_char] += 1
            
            # Remove the oldest character from the window
            old_char = word1[i - len2]
            current[old_char] -= 1
            if current[old_char] == 0:
                del current[old_char]
            
            # Check if current window is valid
            valid = True
            for key in count_word2:
                if current.get(key, 0) < count_word2[key]:
                    valid = False
                    break
            if valid:
                result += 1
        
        return result
2025-05-22 06:25:38,394 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:38,394 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:38,394 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:25:38,394 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24

2025-05-22 06:25:38,394 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().validSubstringCount
2025-05-22 06:25:38,394 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        # Initialize the current window with the first len2 characters
        for i in range(len2):
            char = word1[i]
            current[char] += 1

        # Check if the initial window is valid
        valid = True
        for key in count_word2:
            if current.get(key, 0) < count_word2[key]:
                valid = False
                break
        if valid:
            result += 1

        # Slide the window through the rest of word1
        for i in range(len2, len1):
            # Add the new character to the window
            new_char = word1[i]
            current[new_char] += 1

            # Remove the oldest character from the window
            old_char = word1[i - len2]
            current[old_char] -= 1
            if current[old_char] == 0:
                del current[old_char]

            # Check if current window is valid
            valid = True
            for key in count_word2:
                if current.get(key, 0) < count_word2[key]:
                    valid = False
                    break
            if valid:
                result += 1

        return result
2025-05-22 06:25:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        # Initialize the current window with the first len2 characters
        for i in range(len2):
            char = word1[i]
            current[char] += 1

        # Check if the initial window is valid
        valid = True
        for key in count_word2:
            if current.get(key, 0) < count_word2[key]:
                valid = False
                break
        if valid:
            result += 1

        # Slide the window through the rest of word1
        for i in range(len2, len1):
            # Add the new character to the window
            new_char = word1[i]
            current[new_char] += 1

            # Remove the oldest character from the window
            old_char = word1[i - len2]
            current[old_char] -= 1
            if current[old_char] == 0:
                del current[old_char]

            # Check if current window is valid
            valid = True
            for key in count_word2:
                if current.get(key, 0) < count_word2[key]:
                    valid = False
                    break
            if valid:
                result += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:38,395 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
from collections import Counter, defaultdict

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        len1, len2 = len(word1), len(word2)
        if len2 > len1:
            return 0

        count_word2 = Counter(word2)
        required = len(count_word2)
        current = defaultdict(int)
        result = 0

        # Initialize the current window with the first len2 characters
        for i in range(len2):
            char = word1[i]
            current[char] += 1

        # Check if the initial window is valid
        valid = True
        for key in count_word2:
            if current.get(key, 0) < count_word2[key]:
                valid = False
                break
        if valid:
            result += 1

        # Slide the window through the rest of word1
        for i in range(len2, len1):
            # Add the new character to the window
            new_char = word1[i]
            current[new_char] += 1

            # Remove the oldest character from the window
            old_char = word1[i - len2]
            current[old_char] -= 1
            if current[old_char] == 0:
                del current[old_char]

            # Check if current window is valid
            valid = True
            for key in count_word2:
                if current.get(key, 0) < count_word2[key]:
                    valid = False
                    break
            if valid:
                result += 1

        return result

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(word1 = "banana",word2 = "ban") == 4
    assert candidate(word1 = "abc",word2 = "abcd") == 0
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 1
    assert candidate(word1 = "aaaabc",word2 = "aaa") == 7
    assert candidate(word1 = "mississippi",word2 = "issi") == 27
    assert candidate(word1 = "abcabc",word2 = "aaabc") == 0
    assert candidate(word1 = "abababab",word2 = "aba") == 18
    assert candidate(word1 = "abcabc",word2 = "abc") == 10
    assert candidate(word1 = "aaaaaaaaaaa",word2 = "aaaa") == 36
    assert candidate(word1 = "zzzzzzzz",word2 = "zzz") == 21
    assert candidate(word1 = "abcdeabcde",word2 = "abc") == 26
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 4
    assert candidate(word1 = "",word2 = "a") == 0
    assert candidate(word1 = "bcca",word2 = "abc") == 1
    assert candidate(word1 = "aaa",word2 = "a") == 6
    assert candidate(word1 = "aabbcc",word2 = "abc") == 4
    assert candidate(word1 = "xyz",word2 = "xyz") == 1
    assert candidate(word1 = "abcabcabcabc",word2 = "abcabc") == 28
    assert candidate(word1 = "aaaa",word2 = "aa") == 6
    assert candidate(word1 = "abcdabcd",word2 = "abcd") == 15
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 171
    assert candidate(word1 = "abababababababababab",word2 = "ababab") == 120
    assert candidate(word1 = "abcabcabcabcabcabc",word2 = "abcabc") == 91
    assert candidate(word1 = "overlappingprefixoverlappingprefix",word2 = "overlappingprefix") == 171
    assert candidate(word1 = "supercalifragilisticexpialidocious",word2 = "califragilisticexpialidocious") == 8
    assert candidate(word1 = "xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy",word2 = "xyz") == 5356
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyzaabbccddeeff") == 2
    assert candidate(word1 = "abracadabra",word2 = "abra") == 25
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzz") == 1176
    assert candidate(word1 = "ababababababababababababababababab",word2 = "ababab") == 435
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 1081
    assert candidate(word1 = "aabbccddeeff",word2 = "abcdef") == 4
    assert candidate(word1 = "thisisaverylongstringtocheck",word2 = "verylong") == 112
    assert candidate(word1 = "aaaaabaaaabaaaaaaaabaaaabaaaaabaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaabaaaaabaaaaabaaaaabaaaaaab",word2 = "aaab") == 4225
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxwvutsrqponmlkjihgfedcba") == 378
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 561
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcd") == 435
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwertyuiopasdfghjklzxcvbnm") == 378
    assert candidate(word1 = "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",word2 = "abcd") == 100
    assert candidate(word1 = "xyxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx",word2 = "xyxy") == 1538
    assert candidate(word1 = "repeatedprefixprefixprefixprefix",word2 = "prefix") == 342
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuv") == 20
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",word2 = "qwerty") == 608
    assert candidate(word1 = "abcabcabcabcabcabcabcabc",word2 = "abcabc") == 190
    assert candidate(word1 = "repeatedrepeatedrepeated",word2 = "repeatedrepeated") == 45
    assert candidate(word1 = "thisisaverylongwordthatcontainsmultipleoccurrencesofthesubstring",word2 = "substring") == 146
    assert candidate(word1 = "ababababab",word2 = "abab") == 28
    assert candidate(word1 = "aabbccddeeffaabbccddeeffaabbccddeeff",word2 = "aabbccdd") == 349
    assert candidate(word1 = "mississippimississippi",word2 = "issi") == 161
    assert candidate(word1 = "racecar",word2 = "race") == 7
    assert candidate(word1 = "hellohellohello",word2 = "hell") == 69
    assert candidate(word1 = "zzzzzzzzzz",word2 = "zzz") == 36
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxzy") == 52
    assert candidate(word1 = "twoprefixtwoprefixtwoprefix",word2 = "twoprefix") == 190
    assert candidate(word1 = "shortword",word2 = "word") == 6
    assert candidate(word1 = "threeprefixthreeprefixthreeprefix",word2 = "threeprefix") == 276
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcdefghijklmnopqrstuvwxyz") == 4
    assert candidate(word1 = "abababababababababababababababababababababababababababababa",word2 = "bab") == 1624
    assert candidate(word1 = "abcdeabcdeabcdeabcdeabcde",word2 = "abcde") == 231
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnopqrstuvwxyz") == 52
    assert candidate(word1 = "hellohellohellohellohello",word2 = "lohel") == 231
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabc") == 325
    assert candidate(word1 = "ababababababababababab",word2 = "bababa") == 153
    assert candidate(word1 = "oneprefixoneprefixoneprefix",word2 = "oneprefix") == 190
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzzzzzzzz") == 946
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aa") == 45
    assert candidate(word1 = "ababababababababababababababababababababababababa",word2 = "ab") == 1176
    assert candidate(word1 = "xylophone",word2 = "phone") == 5
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "zxcvbnm") == 20
    assert candidate(word1 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",word2 = "aaa") == 1176
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",word2 = "zyxcba") == 588
    assert candidate(word1 = "abracadabraabracadabraabracadabra",word2 = "abrac") == 375
    assert candidate(word1 = "thisisaverylongstringwithrepeatingcharacters",word2 = "repeating") == 391
    assert candidate(word1 = "xyzzxyzzxyzz",word2 = "xyzz") == 45
    assert candidate(word1 = "abcdefghijabcdefghij",word2 = "abcdefghij") == 66
    assert candidate(word1 = "abracadabraabracadabra",word2 = "abracadabra") == 78
    assert candidate(word1 = "testingtestingtestingtesting",word2 = "testingtesting") == 120
    assert candidate(word1 = "thisisaverylongstringthatcontainssomeprefixsomewhere",word2 = "somewhere") == 183
    assert candidate(word1 = "mississippi",word2 = "iss") == 38
    assert candidate(word1 = "thisisanexamplestringfortesting",word2 = "example") == 159
    assert candidate(word1 = "hellohellohellohellohellohellohellohello",word2 = "hellohello") == 496
    assert candidate(word1 = "alphabet",word2 = "beta") == 5
    assert candidate(word1 = "zyxwvutsrqponmlkjihgfedcba",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyz",word2 = "zyxzyx") == 91
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",word2 = "abc") == 4465
    assert candidate(word1 = "hellohellohellohellohellohellohellohellohellohellohello",word2 = "hello") == 1326
    assert candidate(word1 = "abacabadabacaba",word2 = "abaca") == 56
    assert candidate(word1 = "verylongstringwithmanymatchingprefixes",word2 = "prefix") == 93
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 1431
    assert candidate(word1 = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",word2 = "zzzz") == 5151
    assert candidate(word1 = "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",word2 = "ppppppp") == 1378
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "abcde") == 88
    assert candidate(word1 = "onetwothreefourfivesixseveneightnine",word2 = "threefour") == 164
    assert candidate(word1 = "abababababababababababababababababab",word2 = "aba") == 578
    assert candidate(word1 = "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz",word2 = "mnopqrstuvwxyz") == 176
    assert candidate(word1 = "aaaaaaaaaa",word2 = "aaaaa") == 21
    assert candidate(word1 = "abcabcabcabcabcabcabcabcabcabc",word2 = "abcabcabc") == 253
    assert candidate(word1 = "qwertyuiopasdfghjklzxcvbnm",word2 = "abcdefghijklmnopqrstuvwxyz") == 1
    assert candidate(word1 = "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",word2 = "abcdabcdabcd") == 1431
    assert candidate(word1 = "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz",word2 = "mnop") == 572
    assert candidate(word1 = "loooooooooooooooooooongwordwithrepeatedletters",word2 = "oooooo") == 557
    assert candidate(word1 = "almostmatchingprefixalmostmatchingprefix",word2 = "almostmatching") == 259
    assert candidate(word1 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz",word2 = "xyzxyz") == 496
    assert candidate(word1 = "12345678901234567890",word2 = "9087654321") == 66
    assert candidate(word1 = "uniquecharacters",word2 = "characters") == 7
    assert candidate(word1 = "abcdefghijklmnopqrstuvwxyz",word2 = "zyx") == 24


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().validSubstringCount)

2025-05-22 06:25:52,049 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpwum7dqjl.py\", line 243, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpwum7dqjl.py\", line 133, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpwum7dqjl.py` failed. (See above for error)\n",
  "execution_time": 13.654022216796875,
  "failed_tests": [
    {
      "input": "word1 = \"banana\",word2 = \"ban\"",
      "expected": "4",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpwum7dqjl.py\", line 243, in <module>\n    check(Solution().validSubstringCount)\n  File \"/scratch/local/21926554/tmpwum7dqjl.py\", line 133, in check\n    assert candidate(word1 = \"banana\",word2 = \"ban\") == 4\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpwum7dqjl.py` failed. (See above for error)"
}
2025-05-22 06:25:52,050 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 1_5
2025-05-22 06:25:52,050 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 1_5), stopping early
2025-05-22 06:25:52,050 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:25:52,050 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 8 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:25:52,051 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657434126848 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:25:52,051 [DEBUG] filelock (_api.py:334): Lock 140657434126848 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:25:52,051 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:25:52,630 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657434126848 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:25:52,630 [DEBUG] filelock (_api.py:367): Lock 140657434126848 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:25:52,630 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:25:52,630 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:25:52,632 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/count-substrings-that-can-be-rearranged-to-contain-a-string-i.json
2025-05-22 06:25:52,632 [INFO] root (run_leetcode_solver.py:373): Processed problem count-substrings-that-can-be-rearranged-to-contain-a-string-i in 535.24 seconds
2025-05-22 06:25:52,632 [INFO] root (run_leetcode_solver.py:348): Processing problem ID maximize-the-total-height-of-unique-towers with model deepseek-r1-distill
2025-05-22 06:25:52,768 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:97): Starting tree-based solution generation for problem maximize-the-total-height-of-unique-towers
2025-05-22 06:25:52,768 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:929): Generating 3 initial solution candidates
2025-05-22 06:25:52,952 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:25:52,953 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:25:52,953 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:25:52,953 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:20,130 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:20,130 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:20,130 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:20,130 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:20,131 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 1/3 (547 chars)
2025-05-22 06:26:20,313 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:20,313 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:20,313 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:20,314 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:44,515 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:44,515 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:44,516 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:44,516 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:44,516 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 2/3 (332 chars)
2025-05-22 06:26:44,698 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:26:44,698 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:44,699 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:26:44,699 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:27:13,525 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:27:13,526 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:27:13,526 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:27:13,526 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:27:13,526 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:941): Generated initial candidate 3/3 (619 chars)
2025-05-22 06:27:13,526 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            # The minimum height we can assign is prev + 1
            if current_max < prev + 1:
                return -1
            # Assign the smallest possible height to leave room for larger values
            assigned = prev + 1
            total += assigned
            prev = assigned
        return total
2025-05-22 06:27:13,526 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:27:13,526 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            # The minimum height we can assign is prev + 1
            if current_max < prev + 1:
                return -1
            # Assign the smallest possible height to leave room for larger values
            assigned = prev + 1
            total += assigned
            prev = assigned
        return total
2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            # The minimum height we can assign is prev + 1
            if current_max < prev + 1:
                return -1
            # Assign the smallest possible height to leave room for larger values
            assigned = prev + 1
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:27:13,527 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            # The minimum height we can assign is prev + 1
            if current_max < prev + 1:
                return -1
            # Assign the smallest possible height to leave room for larger values
            assigned = prev + 1
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:27:27,286 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmptq4lqsez.py\", line 176, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmptq4lqsez.py\", line 102, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptq4lqsez.py` failed. (See above for error)\n",
  "execution_time": 13.759028434753418,
  "failed_tests": [
    {
      "input": "maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]",
      "expected": "4999999990",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmptq4lqsez.py\", line 176, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmptq4lqsez.py\", line 102, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptq4lqsez.py` failed. (See above for error)"
}
2025-05-22 06:27:27,287 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 0_0 at depth 1
2025-05-22 06:27:27,287 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 0_0
2025-05-22 06:27:27,489 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:27:27,489 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:27:27,489 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:27:27,489 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:07,002 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:07,003 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:07,003 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:07,003 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:07,003 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (431 chars)
2025-05-22 06:28:07,185 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:07,186 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:07,186 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:07,186 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:47,752 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:47,752 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:47,752 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:47,753 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:47,753 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (514 chars)
2025-05-22 06:28:47,936 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:28:47,936 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:47,936 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:28:47,936 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:29:26,003 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:29:26,004 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:29:26,004 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:29:26,004 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:29:26,004 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (431 chars)
2025-05-22 06:29:26,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total
2025-05-22 06:29:26,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:29:26,004 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total
2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:29:26,005 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:29:39,811 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpboi5jzg8.py\", line 174, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmpboi5jzg8.py\", line 97, in check\n    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpboi5jzg8.py` failed. (See above for error)\n",
  "execution_time": 13.805702447891235,
  "failed_tests": [
    {
      "input": "maximumHeight = [2, 3, 4, 3]",
      "expected": "10",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpboi5jzg8.py\", line 174, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmpboi5jzg8.py\", line 97, in check\n    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpboi5jzg8.py` failed. (See above for error)"
}
2025-05-22 06:29:39,811 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:521): Branching from failed solution 1_1 at depth 2
2025-05-22 06:29:39,811 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:771): Generating 3 improved candidates for node 1_1
2025-05-22 06:29:40,015 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:29:40,015 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:29:40,016 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:29:40,016 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:04,961 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:04,961 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:04,961 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:04,961 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:04,961 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 1/3 (359 chars)
2025-05-22 06:31:05,143 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:05,143 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:05,143 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:05,143 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:39,975 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:39,976 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:39,976 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:39,976 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:39,976 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 2/3 (421 chars)
2025-05-22 06:31:40,157 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:31:40,158 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:40,158 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:31:40,158 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:32:22,023 [INFO] src.models.base_model (base_model.py:73): GPU 0 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:32:22,023 [INFO] src.models.base_model (base_model.py:73): GPU 1 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:32:22,024 [INFO] src.models.base_model (base_model.py:73): GPU 2 memory: reserved=16.39GB, allocated=16.38GB
2025-05-22 06:32:22,024 [INFO] src.models.base_model (base_model.py:73): GPU 3 memory: reserved=14.22GB, allocated=14.20GB
2025-05-22 06:32:22,024 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:793): Generated improved candidate 3/3 (406 chars)
2025-05-22 06:32:22,024 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for height in maximumHeight:
            current = min(height, prev + 1)
            if current <= prev:
                return -1
            total += current
            prev = current
        return total
2025-05-22 06:32:22,024 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:22,024 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:22,024 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:32:22,024 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:22,024 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:22,024 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for height in maximumHeight:
            current = min(height, prev + 1)
            if current <= prev:
                return -1
            total += current
            prev = current
        return total
2025-05-22 06:32:22,024 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for height in maximumHeight:
            current = min(height, prev + 1)
            if current <= prev:
                return -1
            total += current
            prev = current
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:32:22,025 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for height in maximumHeight:
            current = min(height, prev + 1)
            if current <= prev:
                return -1
            total += current
            prev = current
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:32:35,846 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmphv16ylfa.py\", line 173, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmphv16ylfa.py\", line 99, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmphv16ylfa.py` failed. (See above for error)\n",
  "execution_time": 13.821308612823486,
  "failed_tests": [
    {
      "input": "maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]",
      "expected": "4999999990",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmphv16ylfa.py\", line 173, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmphv16ylfa.py\", line 99, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmphv16ylfa.py` failed. (See above for error)"
}
2025-05-22 06:32:35,847 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total
2025-05-22 06:32:35,847 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:35,847 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:35,847 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:32:35,847 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:35,847 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:35,847 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total
2025-05-22 06:32:35,847 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:32:35,848 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = 0
        for i in range(len(maximumHeight)):
            current_max = maximumHeight[i]
            if current_max <= prev:
                return -1
            assigned = min(current_max, prev + 1)
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:32:49,668 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "fail",
  "stdout": "",
  "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpbdtqm71s.py\", line 174, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmpbdtqm71s.py\", line 100, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpbdtqm71s.py` failed. (See above for error)\n",
  "execution_time": 13.820351839065552,
  "failed_tests": [
    {
      "input": "maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]",
      "expected": "4999999990",
      "actual": "unknown"
    }
  ],
  "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpbdtqm71s.py\", line 174, in <module>\n    check(Solution().maximumTotalSum)\n  File \"/scratch/local/21926554/tmpbdtqm71s.py\", line 100, in check\n    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpbdtqm71s.py` failed. (See above for error)"
}
2025-05-22 06:32:49,669 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 0ed9dfb9
2025-05-22 06:32:49,669 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1303): TESTING SOLUTION:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = float('inf')
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max >= prev:
                assigned = prev - 1
            else:
                assigned = current_max
            if assigned < 1:
                return -1
            total += assigned
            prev = assigned
        return total
2025-05-22 06:32:49,669 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1305): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:49,669 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1307): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:250): IMPORTS:
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)

2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:251): TEST CODE:
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1

2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:252): ENTRY POINT: Solution().maximumTotalSum
2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:253): SOLUTION CODE:
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = float('inf')
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max >= prev:
                assigned = prev - 1
            else:
                assigned = current_max
            if assigned < 1:
                return -1
            total += assigned
            prev = assigned
        return total
2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:395): PREPARED TEST CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = float('inf')
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max >= prev:
                assigned = prev - 1
            else:
                assigned = current_max
            if assigned < 1:
                return -1
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:32:49,669 [DEBUG] src.utils.leetcode_test_runner (leetcode_test_runner.py:257): EXECUTING TEST WITH COMBINED CODE:
# Imports ------------------------------------------------------------
import random
import functools
import collections
import string
import math
import datetime

from typing import *
from functools import *
from collections import *
from itertools import *
from heapq import *
from bisect import *
from string import *
from operator import *
from math import *

inf = float('inf')

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def list_node(values: list):
    if not values:
        return None
    head = ListNode(values[0])
    p = head
    for val in values[1:]:
        node = ListNode(val)
        p.next = node
        p = node
    return head

def is_same_list(p1, p2):
    if p1 is None and p2 is None:
        return True
    if not p1 or not p2:
        return False
    return p1.val == p2.val and is_same_list(p1.next, p2.next)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def tree_node(values: list):
    if not values:
        return None
    root = TreeNode(values[0])
    i = 1
    queue = deque()
    queue.append(root)
    while queue:
        node = queue.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            queue.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            queue.append(node.right)
        i += 1
    return root

def is_same_tree(p, q):
    if not p and not q:
        return True
    elif not p or not q:
        return False
    elif p.val != q.val:
        return False
    else:
        return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)


# User solution -------------------------------------------------------
class Solution:
    def maximumTotalSum(self, maximumHeight: List[int]) -> int:
        maximumHeight.sort()
        total = 0
        prev = float('inf')
        for i in range(len(maximumHeight)-1, -1, -1):
            current_max = maximumHeight[i]
            if current_max >= prev:
                assigned = prev - 1
            else:
                assigned = current_max
            if assigned < 1:
                return -1
            total += assigned
            prev = assigned
        return total

# Author tests --------------------------------------------------------
def check(candidate):
    assert candidate(maximumHeight = [2, 3, 4, 3]) == 10
    assert candidate(maximumHeight = [5, 5, 5, 5, 5]) == 15
    assert candidate(maximumHeight = [1, 2, 3, 4, 5]) == 15
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [1]) == 1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000]) == 2999999997
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [2, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [15, 10]) == 25
    assert candidate(maximumHeight = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 465
    assert candidate(maximumHeight = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == -1
    assert candidate(maximumHeight = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]) == 645
    assert candidate(maximumHeight = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 110
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 465
    assert candidate(maximumHeight = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 1200
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 210
    assert candidate(maximumHeight = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == -1
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]) == 4999999990
    assert candidate(maximumHeight = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]) == 210
    assert candidate(maximumHeight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 1]) == 865
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 120
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 999999999, 999999999]) == 4999999990
    assert candidate(maximumHeight = [100, 100, 99, 98, 97, 96, 95, 94, 93, 92]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [1000000000, 1000000000, 1000000000, 1000000000]) == 3999999994
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996]) == 4999999990
    assert candidate(maximumHeight = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == -1
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000]) == -1
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == 55
    assert candidate(maximumHeight = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10]) == -1
    assert candidate(maximumHeight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 5500
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]) == -1
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55
    assert candidate(maximumHeight = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]) == 55
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == -1
    assert candidate(maximumHeight = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]) == 10945
    assert candidate(maximumHeight = [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == -1
    assert candidate(maximumHeight = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 325
    assert candidate(maximumHeight = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == -1
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == -1
    assert candidate(maximumHeight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 100
    assert candidate(maximumHeight = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == -1
    assert candidate(maximumHeight = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]) == 9999999955
    assert candidate(maximumHeight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 210
    assert candidate(maximumHeight = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1
    assert candidate(maximumHeight = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 1200
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55
    assert candidate(maximumHeight = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1


# Kick off the tests --------------------------------------------------
if __name__ == "__main__":
    check(Solution().maximumTotalSum)

2025-05-22 06:33:03,488 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1336): TEST RESULT: {
  "status": "pass",
  "stdout": "",
  "stderr": "",
  "execution_time": 13.81767988204956,
  "failed_tests": [],
  "error_message": ""
}
2025-05-22 06:33:03,488 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:615): Solution found at node 1_5 (depth 1)
2025-05-22 06:33:03,488 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:544): Using cached result for solution hash 8b6521ca
2025-05-22 06:33:03,488 [DEBUG] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:886): Found passing solution in node 1_5
2025-05-22 06:33:03,488 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:217): Solution found during branching (node 1_5), stopping early
2025-05-22 06:33:03,488 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:249): Performing batch evaluation with code_eval
2025-05-22 06:33:03,488 [INFO] src.evaluation.code_evaluator (code_evaluator.py:88): Evaluating 8 solution(s) with pass@[1, 3, 5, 10]
2025-05-22 06:33:03,495 [DEBUG] filelock (_api.py:331): Attempting to acquire lock 140657427548720 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:33:03,495 [DEBUG] filelock (_api.py:334): Lock 140657427548720 acquired on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:33:03,495 [DEBUG] fsspec.local (local.py:357): open file: /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow
2025-05-22 06:33:03,999 [DEBUG] filelock (_api.py:364): Attempting to release lock 140657427548720 on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:33:03,999 [DEBUG] filelock (_api.py:367): Lock 140657427548720 released on /storage/homefs/jp22b083/.cache/huggingface/metrics/code_eval/default/default_experiment-1-0.arrow.lock
2025-05-22 06:33:04,000 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:262): Adding code_eval depth correlation analysis
2025-05-22 06:33:04,000 [ERROR] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1450): Error in diversity analysis: invalid group reference 1 at position 16
2025-05-22 06:33:04,001 [INFO] src.solution.leetcode_solution_pipeline (leetcode_solution_pipeline.py:1490): Saved results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/leetcode_solutions/maximize-the-total-height-of-unique-towers.json
2025-05-22 06:33:04,002 [INFO] root (run_leetcode_solver.py:373): Processed problem maximize-the-total-height-of-unique-towers in 431.26 seconds
2025-05-22 06:33:04,006 [INFO] root (run_leetcode_solver.py:432): Saved combined results to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/combined_results.json
2025-05-22 06:33:04,007 [INFO] root (run_leetcode_solver.py:509): Saved summary to results/leetcode_solver_medium_20250522_045052/deepseek-r1-distill/summary.json
