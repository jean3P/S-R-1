{
  "problem_id": "minimum-number-of-seconds-to-make-mountain-height-zero",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        if mountainHeight == 0:\n            return 0\n        \n        workerTimes.sort()\n        left = 0\n        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time\n        \n        def is_possible(time):\n            total = 0\n            for t in workerTimes:\n                if t == 0:\n                    continue\n                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2\n                k = int(max_k)\n                while k * (k + 1) * t / 2 <= time:\n                    k += 1\n                k -= 1\n                if k <= 0:\n                    continue\n                total += k\n                if total >= mountainHeight:\n                    return True\n            return total >= mountainHeight\n        \n        answer = right\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                answer = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        return answer",
  "passed_solutions": [
    "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        if mountainHeight == 0:\n            return 0\n        \n        workerTimes.sort()\n        left = 0\n        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time\n        \n        def is_possible(time):\n            total = 0\n            for t in workerTimes:\n                if t == 0:\n                    continue\n                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2\n                k = int(max_k)\n                while k * (k + 1) * t / 2 <= time:\n                    k += 1\n                k -= 1\n                if k <= 0:\n                    continue\n                total += k\n                if total >= mountainHeight:\n                    return True\n            return total >= mountainHeight\n        \n        answer = right\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                answer = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        return answer"
  ],
  "all_solutions": [
    "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        if mountainHeight == 0:\n            return 0\n        \n        workerTimes.sort()\n        left = 0\n        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time\n        \n        def is_possible(time):\n            total = 0\n            for t in workerTimes:\n                if t == 0:\n                    continue\n                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2\n                k = int(max_k)\n                while k * (k + 1) * t / 2 <= time:\n                    k += 1\n                k -= 1\n                if k <= 0:\n                    continue\n                total += k\n                if total >= mountainHeight:\n                    return True\n            return total >= mountainHeight\n        \n        answer = right\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                answer = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        return answer"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        if mountainHeight == 0:\n            return 0\n        \n        workerTimes.sort()\n        left = 0\n        right = workerTimes[0] * mountainHeight * (mountainHeight + 1) // 2  # Maximum possible time\n        \n        def is_possible(time):\n            total = 0\n            for t in workerTimes:\n                if t == 0:\n                    continue\n                max_k = ( -1 + (1 + 8 * time / t ) ** 0.5 ) / 2\n                k = int(max_k)\n                while k * (k + 1) * t / 2 <= time:\n                    k += 1\n                k -= 1\n                if k <= 0:\n                    continue\n                total += k\n                if total >= mountainHeight:\n                    return True\n            return total >= mountainHeight\n        \n        answer = right\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                answer = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        return answer",
      "solution_hash": "2807b4ed073b56d024de8176860e3a085f3b0f20896ba673e3eae7f4d830dba0",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 14.215714693069458,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      14.215714693069458
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1122,
        "max": 1122,
        "avg": 1122.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 77.14707398414612,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: 'key' is an invalid keyword argument for bisect_left()",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}