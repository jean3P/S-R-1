{
  "problem_id": "find-the-power-of-k-size-subarrays-ii",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
  "passed_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        result = []\n        for i in range(n - k + 1):\n            sub = nums[i:i+k]\n            is_consecutive = True\n            for j in range(1, k):\n                if sub[j] != sub[j-1] + 1:\n                    is_consecutive = False\n                    break\n            if is_consecutive:\n                result.append(sub[-1])\n            else:\n                result.append(-1)\n        return result",
      "solution_hash": "9cfc4b2a0da1dc203c52c22f6fd6e61f5fe836ce6d6a94bcf785f0c25c3668d9",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.610466718673706,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.610466718673706
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 512,
        "max": 512,
        "avg": 512.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 77.9634461402893,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}