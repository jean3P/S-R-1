{
  "problem_id": "number-of-subsequences-with-odd-sum",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD\n        \n        return ways_odd",
  "passed_solutions": [
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD\n        \n        return ways_odd",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD\n        \n        return ways_odd"
  ],
  "all_solutions": [
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\n            total %= MOD\n        \n        return total % MOD\n\ndef comb(n, k, mod):\n    if k > n:\n        return 0\n    numerator = 1\n    for i in range(n, n - k, -1):\n        numerator = numerator * i % mod\n    denominator = 1\n    for i in range(1, k + 1):\n        denominator = denominator * i % mod\n    return numerator * pow(denominator, mod - 2, mod) % mod",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute factorial and inverse factorial modulo MOD\n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(n, k):\n            if k < 0 or k > n:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            c = comb(count_odd, k)\n            total = (total + pow(2, count_even, MOD) * c) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(n, k):\n            if k < 0 or k > n:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            c = comb(count_odd, k)\n            total = (total + pow(2, count_even, MOD) * c) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = pow(2, count_odd - 1, MOD)\n        \n        # The total number of subsequences is ways_odd multiplied by 2^count_even\n        total = (ways_odd * pow(2, count_even, MOD)) % MOD\n        \n        return total",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute factorial and inverse factorial modulo MOD\n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(n, k):\n            if k < 0 or k > n:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            c = comb(count_odd, k)\n            total = (total + pow(2, count_even, MOD) * c) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(n, k):\n            if k < 0 or k > n:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            c = comb(count_odd, k)\n            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute powers of 2 modulo MOD\n        pow2 = [1] * (count_even + 1)\n        for i in range(1, count_even + 1):\n            pow2[i] = (pow2[i-1] * 2) % MOD\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            # Number of ways to choose k odd elements\n            ways_odd = self.comb(count_odd, k)\n            # Number of ways to choose any subset of even elements\n            ways_even = pow2[count_even]\n            total = (total + ways_odd * ways_even) % MOD\n        \n        return total % MOD\n    \n    def comb(self, n, k):\n        if k < 0 or k > n:\n            return 0\n        # Precompute factorial and inverse factorial modulo MOD\n        max_n = n\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = pow(2, count_odd - 1, MOD)\n        \n        # Calculate the number of ways to choose any number of even elements\n        ways_even = pow(2, count_even, MOD)\n        \n        # Total number of valid subsequences\n        total = (ways_odd * ways_even) % MOD\n        return total",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD-2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        def comb(n, k):\n            if k < 0 or k > n:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            c = comb(count_odd, k)\n            total = (total + (pow(2, count_even, MOD) * c) % MOD) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute powers of 2 modulo MOD up to count_even\n        pow2 = [1] * (count_even + 1)\n        for i in range(1, count_even + 1):\n            pow2[i] = (pow2[i-1] * 2) % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            # Calculate combination(count_odd, k) modulo MOD\n            comb = 1\n            for i in range(k):\n                comb = comb * (count_odd - i) % MOD\n                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD\n            total = (total + pow2[count_even] * comb) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute powers of 2 modulo MOD up to count_even\n        pow2 = [1] * (count_even + 1)\n        for i in range(1, count_even + 1):\n            pow2[i] = (pow2[i-1] * 2) % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            # Calculate combination(count_odd, k) modulo MOD\n            comb = 1\n            for i in range(k):\n                comb = comb * (count_odd - i) % MOD\n                comb = comb * pow(i + 1, MOD - 2, MOD) % MOD\n            total = (total + pow2[count_even] * comb) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute powers of 2 modulo MOD up to count_even\n        pow2 = [1] * (count_even + 1)\n        for i in range(1, count_even + 1):\n            pow2[i] = (pow2[i-1] * 2) % MOD\n        \n        # Precompute factorial and inverse factorial modulo MOD\n        max_n = count_odd\n        fact = [1] * (max_n + 1)\n        for i in range(1, max_n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_n + 1)\n        inv_fact[max_n] = pow(fact[max_n], MOD - 2, MOD)\n        for i in range(max_n - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            comb = fact[count_odd] * inv_fact[k] % MOD\n            comb = comb * inv_fact[count_odd - k] % MOD\n            total = (total + pow2[count_even] * comb) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        # Precompute powers of 2 modulo MOD up to count_even\n        pow2 = [1] * (count_even + 1)\n        for i in range(1, count_even + 1):\n            pow2[i] = (pow2[i-1] * 2) % MOD\n        \n        # Precompute factorial and inverse factorial modulo MOD\n        max_k = count_odd\n        fact = [1] * (max_k + 1)\n        for i in range(1, max_k + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact = [1] * (max_k + 1)\n        inv_fact[max_k] = pow(fact[max_k], MOD - 2, MOD)\n        for i in range(max_k - 1, -1, -1):\n            inv_fact[i] = inv_fact[i+1] * (i+1) % MOD\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            comb = fact[count_odd] * inv_fact[k] % MOD\n            comb = comb * inv_fact[count_odd - k] % MOD\n            total = (total + pow2[count_even] * comb) % MOD\n        \n        return total % MOD",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        # This is (2^odd_count - 1) // 2\n        if odd_count == 0:\n            return 0\n        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\n        \n        return ways_odd",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1, MOD)) * pow(2, even_count, MOD) % MOD\n        \n        return ways_odd",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: list) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD)) % MOD\n        \n        return ways_odd",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD\n        \n        return ways_odd",
    "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        if odd_count == 0:\n            return 0\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        ways_odd = (pow(2, odd_count - 1) * pow(2, even_count)) % MOD\n        \n        return ways_odd"
  ],
  "total_candidates": 18,
  "nodes_explored": 18,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        count_even = 0\n        count_odd = 0\n        for num in nums:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        \n        if count_odd == 0:\n            return 0\n        \n        total = 0\n        for k in range(1, count_odd + 1, 2):\n            total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\n            total %= MOD\n        \n        return total % MOD\n\ndef comb(n, k, mod):\n    if k > n:\n        return 0\n    numerator = 1\n    for i in range(n, n - k, -1):\n        numerator = numerator * i % mod\n    denominator = 1\n    for i in range(1, k + 1):\n        denominator = denominator * i % mod\n    return numerator * pow(denominator, mod - 2, mod) % mod",
      "solution_hash": "95207670c43c86e7d47a61545c1968c9dd8cabe13c12dd3e52c90a771af67a73",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 208, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 116, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 98, in subsequenceCount\n    total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp198m0xmz.py` failed. (See above for error)\n",
        "execution_time": 13.88453197479248,
        "failed_tests": [
          {
            "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
            "expected": "1024",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 208, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 116, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmp198m0xmz.py\", line 98, in subsequenceCount\n    total += (pow(2, count_even, MOD) * comb(count_odd, k, MOD)) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp198m0xmz.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "MOD = 10**9 + 7\n\nclass Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        \n        # Calculate the number of ways to choose an odd number of odd elements\n        # This is (2^odd_count - 1) // 2\n        if odd_count == 0:\n            return 0\n        ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\n        \n        return ways_odd",
      "solution_hash": "a2cf532e5768998e250b89414781464f10aa50db13e31594cf2609f0cee077f3",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpix_sti9n.py` failed. (See above for error)\n",
        "execution_time": 13.941633939743042,
        "failed_tests": [
          {
            "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
            "expected": "1024",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 195, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 103, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpix_sti9n.py\", line 97, in subsequenceCount\n    ways_odd = (pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD) % MOD\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpix_sti9n.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 18,
    "candidates_generated": 18,
    "tests_passed": 2,
    "tests_failed": 16,
    "test_errors": 0,
    "execution_times": [
      13.88453197479248,
      14.29876708984375,
      14.29876708984375,
      13.90114450454712,
      14.29876708984375,
      13.974385261535645,
      14.463778495788574,
      13.994100332260132,
      13.974385261535645,
      14.032142877578735,
      14.032142877578735,
      13.910668134689331,
      13.907644987106323,
      13.941633939743042,
      14.324050188064575,
      14.406382322311401,
      13.990980863571167,
      13.990980863571167
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 13,
      "unique_ratio": 0.7222222222222222,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 516,
        "max": 1499,
        "avg": 883.2777777777778
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]": 16
      },
      "first_failing_tests": {
        "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]": 16
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 12,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "type_error": {
          "attempts": 6,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "type_error->type_error": 14,
        "type_error->unknown": 2
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5555555555555556,
        "solutions_per_depth": {
          "0": 2,
          "1": 4,
          "2": 12
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.1578947368421053,
        "pass@3": 0.42208462332301344,
        "pass@5": 0.6243550051599587,
        "pass@10": 0.913312693498452
      },
      "solutions_evaluated": 19,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.1111111111111111,
        "branch_success_rate": 0.1111111111111111
      },
      "error_recovery": {
        "total_attempts": 6,
        "total_improvements": 2,
        "recovery_rate": 0.3333333333333333
      },
      "top_errors": [
        [
          "type_error",
          6
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
          16
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1302.3899502754211,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.1578947368421053,
      "pass@3": 0.42208462332301344,
      "pass@5": 0.6243550051599587,
      "pass@10": 0.913312693498452
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 18
          }
        ]
      ]
    },
    "solutions_evaluated": 19,
    "test_cases": 1
  }
}