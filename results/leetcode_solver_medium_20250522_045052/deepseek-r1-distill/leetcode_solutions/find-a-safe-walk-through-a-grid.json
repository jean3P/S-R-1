{
  "problem_id": "find-a-safe-walk-through-a-grid",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "import heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m = len(grid)\n        n = len(grid[0]) if m > 0 else 0\n        if m == 0 or n == 0:\n            return False\n        \n        # Directions: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        # Priority queue: (current_health, x, y)\n        heap = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Starting point: (0,0)\n        initial_health = health - grid[0][0]\n        if initial_health <= 0:\n            return False\n        heapq.heappush(heap, (-initial_health, 0, 0))\n        visited[0][0] = True\n        \n        while heap:\n            current_health, x, y = heapq.heappop(heap)\n            current_health = -current_health  # Convert back to positive\n            \n            # Check if we've reached the destination\n            if x == m - 1 and y == n - 1:\n                return True\n            \n            for dx, dy in directions:\n                nx = x + dx\n                ny = y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health >= 1:\n                        visited[nx][ny] = True\n                        heapq.heappush(heap, (-new_health, nx, ny))\n        \n        # If we exhausted all possibilities without reaching destination\n        return False",
  "passed_solutions": [
    "import heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m = len(grid)\n        n = len(grid[0]) if m > 0 else 0\n        if m == 0 or n == 0:\n            return False\n        \n        # Directions: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        # Priority queue: (current_health, x, y)\n        heap = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Starting point: (0,0)\n        initial_health = health - grid[0][0]\n        if initial_health <= 0:\n            return False\n        heapq.heappush(heap, (-initial_health, 0, 0))\n        visited[0][0] = True\n        \n        while heap:\n            current_health, x, y = heapq.heappop(heap)\n            current_health = -current_health  # Convert back to positive\n            \n            # Check if we've reached the destination\n            if x == m - 1 and y == n - 1:\n                return True\n            \n            for dx, dy in directions:\n                nx = x + dx\n                ny = y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health >= 1:\n                        visited[nx][ny] = True\n                        heapq.heappush(heap, (-new_health, nx, ny))\n        \n        # If we exhausted all possibilities without reaching destination\n        return False"
  ],
  "all_solutions": [
    "import heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m = len(grid)\n        n = len(grid[0]) if m > 0 else 0\n        if m == 0 or n == 0:\n            return False\n        \n        # Directions: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        # Priority queue: (current_health, x, y)\n        heap = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Starting point: (0,0)\n        initial_health = health - grid[0][0]\n        if initial_health <= 0:\n            return False\n        heapq.heappush(heap, (-initial_health, 0, 0))\n        visited[0][0] = True\n        \n        while heap:\n            current_health, x, y = heapq.heappop(heap)\n            current_health = -current_health  # Convert back to positive\n            \n            # Check if we've reached the destination\n            if x == m - 1 and y == n - 1:\n                return True\n            \n            for dx, dy in directions:\n                nx = x + dx\n                ny = y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health >= 1:\n                        visited[nx][ny] = True\n                        heapq.heappush(heap, (-new_health, nx, ny))\n        \n        # If we exhausted all possibilities without reaching destination\n        return False"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "import heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m = len(grid)\n        n = len(grid[0]) if m > 0 else 0\n        if m == 0 or n == 0:\n            return False\n        \n        # Directions: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        # Priority queue: (current_health, x, y)\n        heap = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Starting point: (0,0)\n        initial_health = health - grid[0][0]\n        if initial_health <= 0:\n            return False\n        heapq.heappush(heap, (-initial_health, 0, 0))\n        visited[0][0] = True\n        \n        while heap:\n            current_health, x, y = heapq.heappop(heap)\n            current_health = -current_health  # Convert back to positive\n            \n            # Check if we've reached the destination\n            if x == m - 1 and y == n - 1:\n                return True\n            \n            for dx, dy in directions:\n                nx = x + dx\n                ny = y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health >= 1:\n                        visited[nx][ny] = True\n                        heapq.heappush(heap, (-new_health, nx, ny))\n        \n        # If we exhausted all possibilities without reaching destination\n        return False",
      "solution_hash": "d58264815a66e38d19a87502cdcba046db49cc523e341b87b986d6fa155d0a44",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.873324394226074,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.873324394226074
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1486,
        "max": 1486,
        "avg": 1486.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 90.34594130516052,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}