{
  "problem_id": "minimum-number-of-seconds-to-make-mountain-height-zero",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        # Helper function to calculate the maximum height a worker can reduce within a given time\n        def max_height_reduced(time, worker_time):\n            # The worker reduces height by x, taking worker_time * (1 + 2 + ... + x) = worker_time * x*(x+1)/2 seconds\n            # We need to find the maximum x such that worker_time * x*(x+1)/2 <= time\n            # This is a quadratic equation: worker_time * x^2 + worker_time * x - 2*time <= 0\n            # Using quadratic formula: x = [-b + sqrt(b^2 - 4*a*c)] / (2*a)\n            a = worker_time\n            b = worker_time\n            c = -2 * time\n            discriminant = b**2 - 4*a*c\n            if discriminant < 0:\n                return 0\n            x = (-b + math.isqrt(discriminant)) // (2*a)\n            return x\n        \n        # Binary search for the minimum time\n        left = 0\n        right = mountainHeight * min(workerTimes) * mountainHeight  # Upper bound\n        while left < right:\n            mid = (left + right) // 2\n            total_height = sum(max_height_reduced(mid, t) for t in workerTimes)\n            if total_height >= mountainHeight:\n                right = mid\n            else:\n                left = mid + 1\n        return left",
  "passed_solutions": [
    "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        # Helper function to calculate the maximum height a worker can reduce within a given time\n        def max_height_reduced(time, worker_time):\n            # The worker reduces height by x, taking worker_time * (1 + 2 + ... + x) = worker_time * x*(x+1)/2 seconds\n            # We need to find the maximum x such that worker_time * x*(x+1)/2 <= time\n            # This is a quadratic equation: worker_time * x^2 + worker_time * x - 2*time <= 0\n            # Using quadratic formula: x = [-b + sqrt(b^2 - 4*a*c)] / (2*a)\n            a = worker_time\n            b = worker_time\n            c = -2 * time\n            discriminant = b**2 - 4*a*c\n            if discriminant < 0:\n                return 0\n            x = (-b + math.isqrt(discriminant)) // (2*a)\n            return x\n        \n        # Binary search for the minimum time\n        left = 0\n        right = mountainHeight * min(workerTimes) * mountainHeight  # Upper bound\n        while left < right:\n            mid = (left + right) // 2\n            total_height = sum(max_height_reduced(mid, t) for t in workerTimes)\n            if total_height >= mountainHeight:\n                right = mid\n            else:\n                left = mid + 1\n        return left"
  ],
  "all_solutions": [
    "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        # Helper function to calculate the maximum height a worker can reduce within a given time\n        def max_height_reduced(time, worker_time):\n            # The worker reduces height by x, taking worker_time * (1 + 2 + ... + x) = worker_time * x*(x+1)/2 seconds\n            # We need to find the maximum x such that worker_time * x*(x+1)/2 <= time\n            # This is a quadratic equation: worker_time * x^2 + worker_time * x - 2*time <= 0\n            # Using quadratic formula: x = [-b + sqrt(b^2 - 4*a*c)] / (2*a)\n            a = worker_time\n            b = worker_time\n            c = -2 * time\n            discriminant = b**2 - 4*a*c\n            if discriminant < 0:\n                return 0\n            x = (-b + math.isqrt(discriminant)) // (2*a)\n            return x\n        \n        # Binary search for the minimum time\n        left = 0\n        right = mountainHeight * min(workerTimes) * mountainHeight  # Upper bound\n        while left < right:\n            mid = (left + right) // 2\n            total_height = sum(max_height_reduced(mid, t) for t in workerTimes)\n            if total_height >= mountainHeight:\n                right = mid\n            else:\n                left = mid + 1\n        return left"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        # Helper function to calculate the maximum height a worker can reduce within a given time\n        def max_height_reduced(time, worker_time):\n            # The worker reduces height by x, taking worker_time * (1 + 2 + ... + x) = worker_time * x*(x+1)/2 seconds\n            # We need to find the maximum x such that worker_time * x*(x+1)/2 <= time\n            # This is a quadratic equation: worker_time * x^2 + worker_time * x - 2*time <= 0\n            # Using quadratic formula: x = [-b + sqrt(b^2 - 4*a*c)] / (2*a)\n            a = worker_time\n            b = worker_time\n            c = -2 * time\n            discriminant = b**2 - 4*a*c\n            if discriminant < 0:\n                return 0\n            x = (-b + math.isqrt(discriminant)) // (2*a)\n            return x\n        \n        # Binary search for the minimum time\n        left = 0\n        right = mountainHeight * min(workerTimes) * mountainHeight  # Upper bound\n        while left < right:\n            mid = (left + right) // 2\n            total_height = sum(max_height_reduced(mid, t) for t in workerTimes)\n            if total_height >= mountainHeight:\n                right = mid\n            else:\n                left = mid + 1\n        return left",
      "solution_hash": "9e8e2d6b40ef12e33fd60c65bde3db72b8b9d7ea7452f16f94de8e70b3c283c2",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.787433385848999,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.787433385848999
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1326,
        "max": 1326,
        "avg": 1326.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 110.70134544372559,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: 'key' is an invalid keyword argument for bisect_left()",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}