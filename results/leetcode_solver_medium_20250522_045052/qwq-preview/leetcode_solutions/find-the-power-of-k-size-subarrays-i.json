{
  "problem_id": "find-the-power-of-k-size-subarrays-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        results = []\n        for i in range(n - k + 1):\n            subarray = nums[i:i+k]\n            if self.is_sorted_and_consecutive(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results\n    \n    def is_sorted_and_consecutive(self, arr: List[int]) -> bool:\n        # Check if the array is sorted in ascending order\n        if arr != sorted(arr):\n            return False\n        # Check if elements are consecutive\n        for i in range(1, len(arr)):\n            if arr[i] != arr[i-1] + 1:\n                return False\n        return True",
  "passed_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        results = []\n        for i in range(n - k + 1):\n            subarray = nums[i:i+k]\n            if self.is_sorted_and_consecutive(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results\n    \n    def is_sorted_and_consecutive(self, arr: List[int]) -> bool:\n        # Check if the array is sorted in ascending order\n        if arr != sorted(arr):\n            return False\n        # Check if elements are consecutive\n        for i in range(1, len(arr)):\n            if arr[i] != arr[i-1] + 1:\n                return False\n        return True"
  ],
  "all_solutions": [
    "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        results = []\n        for i in range(n - k + 1):\n            subarray = nums[i:i+k]\n            if self.is_sorted_and_consecutive(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results\n    \n    def is_sorted_and_consecutive(self, arr: List[int]) -> bool:\n        # Check if the array is sorted in ascending order\n        if arr != sorted(arr):\n            return False\n        # Check if elements are consecutive\n        for i in range(1, len(arr)):\n            if arr[i] != arr[i-1] + 1:\n                return False\n        return True"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        results = []\n        for i in range(n - k + 1):\n            subarray = nums[i:i+k]\n            if self.is_sorted_and_consecutive(subarray):\n                results.append(max(subarray))\n            else:\n                results.append(-1)\n        return results\n    \n    def is_sorted_and_consecutive(self, arr: List[int]) -> bool:\n        # Check if the array is sorted in ascending order\n        if arr != sorted(arr):\n            return False\n        # Check if elements are consecutive\n        for i in range(1, len(arr)):\n            if arr[i] != arr[i-1] + 1:\n                return False\n        return True",
      "solution_hash": "4f3ab808c118411056d9ae356b675c130a19edf885b97b433236341b2dc6f450",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.81067156791687,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.81067156791687
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 726,
        "max": 726,
        "avg": 726.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 74.73946452140808,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}