{
  "problem_id": "number-of-subsequences-with-odd-sum",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        o = 0  # count of odd numbers\n        e = 0  # count of even numbers\n        for num in nums:\n            if num % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if o == 0:\n            return 0\n        total = (1 << (o + e - 1)) % MOD\n        return total",
  "passed_solutions": [
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        o = 0  # count of odd numbers\n        e = 0  # count of even numbers\n        for num in nums:\n            if num % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if o == 0:\n            return 0\n        total = (1 << (o + e - 1)) % MOD\n        return total"
  ],
  "all_solutions": [
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n        n = len(nums)\n        if odd_count == 0:\n            return 0\n        # Total subsequences with odd sum: 2^{n-1}\n        result = pow(2, n - 1, MOD)\n        return result",
    "class Solution:\n            def subsequenceCount(self, nums: List[int]) -> int:\n                MOD = 10**9 + 7\n                odd_count = 0\n                for num in nums:\n                    if num % 2 != 0:\n                        odd_count += 1\n                n = len(nums)\n                if odd_count == 0:\n                    return 0\n                # Total subsequences with odd sum: 2^{n-1}\n                result = pow(2, n - 1, MOD)\n                return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        even_count = 0\n        odd_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        # Total subsequences with odd sum: sum over k odd (0 to odd_count) of C(odd_count, k) * 2^even_count\n        # This is equal to (2^{odd_count} - 1) * 2^{even_count}\n        if odd_count == 0:\n            return 0\n        odd_subseq = (pow(2, odd_count, MOD) - 1) % MOD\n        even_subseq = pow(2, even_count, MOD)\n        result = (odd_subseq * even_subseq) % MOD\n        return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        count_odd = 0\n        for num in nums:\n            if num % 2 != 0:\n                count_odd += 1\n        if count_odd == 0:\n            return 0\n        # Calculate 2^{n-1} modulo MOD\n        result = pow(2, n - 1, MOD)\n        return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        even_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n            else:\n                even_count += 1\n        # Total subsequences with odd sum is:\n        # (2^{odd_count} - 2^{odd_count // 2}) * 2^{even_count}\n        # But simplified to (2^{odd_count} - 1) // 2 * 2^{even_count}\n        # Since we need odd number of odds: 2^{odd_count - 1} if odd_count > 0\n        if odd_count == 0:\n            return 0\n        total_odd_subseq = (pow(2, odd_count, MOD) - 1 + MOD) % MOD\n        total_even_subseq = pow(2, even_count, MOD)\n        result = (total_odd_subseq * total_even_subseq) % MOD\n        return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        even_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n            else:\n                even_count += 1\n        # Total subsequences with odd sum: (2^odd_count - 1) * 2^even_count\n        if odd_count == 0:\n            return 0\n        result = ((pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD)) % MOD\n        return result",
    "class Solution:\n            def subsequenceCount(self, nums: List[int]) -> int:\n                MOD = 10**9 + 7\n                odd_count = 0\n                even_count = 0\n                for num in nums:\n                    if num % 2 != 0:\n                        odd_count += 1\n                    else:\n                        even_count += 1\n                # Total subsequences with odd sum: (2^odd_count - 1) * 2^even_count\n                if odd_count == 0:\n                    return 0\n                # Using pow function with three arguments for efficiency\n                result = ((pow(2, odd_count, MOD) - 1) * pow(2, even_count, MOD)) % MOD\n                return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        even_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n            else:\n                even_count += 1\n        # Total subsequences with odd sum: (2^odd_count - 1) * 2^even_count\n        if odd_count == 0:\n            return 0\n        # Efficiently compute (2^odd_count - 1) % MOD and (2^even_count) % MOD\n        pow_odd = pow(2, odd_count, MOD)\n        pow_even = pow(2, even_count, MOD)\n        result = ((pow_odd - 1) * pow_even) % MOD\n        return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        even_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n            else:\n                even_count += 1\n        # Total subsequences with odd sum: (2^odd_count - 1) * 2^even_count\n        if odd_count == 0:\n            return 0\n        # Calculate power functions with modulo\n        pow2_odd = pow(2, odd_count, MOD)\n        pow2_even = pow(2, even_count, MOD)\n        result = ((pow2_odd - 1) * pow2_even) % MOD\n        return result",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_sum = 0\n        even_sum = 1  # empty subsequence has sum 0, which is even\n        \n        for num in nums:\n            if num % 2 == 0:\n                # Even numbers don't change the parity of the sum\n                odd_sum = (odd_sum * 1) % MOD\n                even_sum = (even_sum * 2) % MOD\n            else:\n                # Odd numbers flip the parity of the sum\n                new_odd_sum = (odd_sum + even_sum) % MOD\n                even_sum = odd_sum\n                odd_sum = new_odd_sum\n        \n        return odd_sum",
    "from typing import List\n\n        class Solution:\n            def subsequenceCount(self, nums: List[int]) -> int:\n                MOD = 10**9 + 7\n                odd_sum = 0\n                even_sum = 1  # empty subsequence has sum 0, which is even\n                \n                for num in nums:\n                    if num % 2 == 0:\n                        # Even numbers don't change the parity of the sum\n                        odd_sum = (odd_sum * 2) % MOD\n                        even_sum = (even_sum * 2) % MOD\n                    else:\n                        # Odd numbers flip the parity of the sum\n                        new_odd_sum = (odd_sum + even_sum) % MOD\n                        even_sum = odd_sum\n                        odd_sum = new_odd_sum\n                \n                return odd_sum",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        even_count = 0\n        for num in nums:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        # Total subsequences with odd sum is (2^{odd_count} - 1) * 2^{even_count} / 2\n        # Simplified to (2^{odd_count - 1}) * 2^{even_count}\n        if odd_count == 0:\n            return 0\n        total_odd_sum_subseq = pow(2, odd_count - 1, MOD) * pow(2, even_count, MOD) % MOD\n        return total_odd_sum_subseq",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_sum = 0\n        even_sum = 1  # empty subsequence has sum 0, which is even\n        \n        for num in nums:\n            if num % 2 == 0:\n                # Even numbers don't change the parity of the sum\n                even_sum = (even_sum * 2) % MOD\n                odd_sum = (odd_sum * 2) % MOD\n            else:\n                # Odd numbers flip the parity of the sum\n                new_odd_sum = (even_sum + odd_sum) % MOD\n                even_sum = odd_sum\n                odd_sum = new_odd_sum\n        \n        return odd_sum",
    "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        o = 0  # count of odd numbers\n        e = 0  # count of even numbers\n        for num in nums:\n            if num % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if o == 0:\n            return 0\n        total = (1 << (o + e - 1)) % MOD\n        return total"
  ],
  "total_candidates": 14,
  "nodes_explored": 14,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        odd_count = 0\n        for num in nums:\n            if num % 2 != 0:\n                odd_count += 1\n        n = len(nums)\n        if odd_count == 0:\n            return 0\n        # Total subsequences with odd sum: 2^{n-1}\n        result = pow(2, n - 1, MOD)\n        return result",
      "solution_hash": "b9e98d158d4ca8da1fbb1a4ca3b8495d8045979f6509cc7421bc95c4df7b2a13",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 189, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 97, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 92, in subsequenceCount\n    result = pow(2, n - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpb0t8crks.py` failed. (See above for error)\n",
        "execution_time": 13.824304103851318,
        "failed_tests": [
          {
            "input": "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
            "expected": "1024",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 189, in <module>\n    check(Solution().subsequenceCount)\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 97, in check\n    assert candidate(nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]) == 1024\n  File \"/scratch/local/21926554/tmpb0t8crks.py\", line 92, in subsequenceCount\n    result = pow(2, n - 1, MOD)\nTypeError: pow expected 2 arguments, got 3\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpb0t8crks.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def subsequenceCount(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        o = 0  # count of odd numbers\n        e = 0  # count of even numbers\n        for num in nums:\n            if num % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if o == 0:\n            return 0\n        total = (1 << (o + e - 1)) % MOD\n        return total",
      "solution_hash": "d38e6db1372412d93f426b753eb3cb19a5d6d455947aa0c93aa1ca8bb125b456",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.810770511627197,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 14,
    "candidates_generated": 14,
    "tests_passed": 1,
    "tests_failed": 13,
    "test_errors": 0,
    "execution_times": [
      13.824304103851318,
      13.824304103851318,
      13.835012435913086,
      13.808244705200195,
      13.786919832229614,
      13.814369916915894,
      13.814369916915894,
      13.82579755783081,
      13.801780700683594,
      13.801427125930786,
      13.821767568588257,
      13.82090425491333,
      13.80642580986023,
      13.810770511627197
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 12,
      "unique_ratio": 0.8571428571428571,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 369,
        "max": 811,
        "avg": 585.2857142857143
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]": 12
      },
      "first_failing_tests": {
        "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]": 12
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 9,
          "improvements": 1,
          "solved": 0
        }
      },
      "error_types": {
        "type_error": {
          "attempts": 3,
          "improvements": 0
        },
        "assertion_failure": {
          "attempts": 1,
          "improvements": 1
        }
      },
      "test_case_improvements": {
        "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]": 1
      },
      "error_transitions": {
        "type_error->type_error": 8,
        "type_error->assertion_failure": 1,
        "assertion_failure->other_error": 1,
        "assertion_failure->type_error": 1,
        "assertion_failure->assertion_failure": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5,
        "solutions_per_depth": {
          "0": 2,
          "1": 3,
          "2": 9
        },
        "passing_solutions_per_depth": {
          "0": 1,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.1333333333333333,
        "pass@3": 0.37142857142857144,
        "pass@5": 0.5714285714285714,
        "pass@10": 0.9047619047619048
      },
      "solutions_evaluated": 15,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.07142857142857142,
        "branch_success_rate": 0.07142857142857142
      },
      "error_recovery": {
        "total_attempts": 4,
        "total_improvements": 1,
        "recovery_rate": 0.25
      },
      "top_errors": [
        [
          "type_error",
          3
        ],
        [
          "assertion_failure",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
          12
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 703.0543284416199,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.1333333333333333,
      "pass@3": 0.37142857142857144,
      "pass@5": 0.5714285714285714,
      "pass@10": 0.9047619047619048
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: pow expected 2 arguments, got 3",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 14
          }
        ]
      ]
    },
    "solutions_evaluated": 15,
    "test_cases": 1
  }
}