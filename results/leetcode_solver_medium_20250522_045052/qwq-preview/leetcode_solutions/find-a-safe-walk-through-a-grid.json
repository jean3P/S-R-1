{
  "problem_id": "find-a-safe-walk-through-a-grid",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\nimport heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        rows, cols = len(grid), len(grid[0])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n        pq = [(-health, 0, 0)]  # negative health to simulate max-heap\n        visited = [[False] * cols for _ in range(rows)]\n        \n        while pq:\n            current_health, r, c = heapq.heappop(pq)\n            current_health = -current_health  # convert back to positive\n            if r == rows - 1 and c == cols - 1:\n                return current_health >= 1\n            if visited[r][c]:\n                continue\n            visited[r][c] = True\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        heapq.heappush(pq, (-next_health, nr, nc))\n        return False",
  "passed_solutions": [
    "from typing import List\nimport heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        rows, cols = len(grid), len(grid[0])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n        pq = [(-health, 0, 0)]  # negative health to simulate max-heap\n        visited = [[False] * cols for _ in range(rows)]\n        \n        while pq:\n            current_health, r, c = heapq.heappop(pq)\n            current_health = -current_health  # convert back to positive\n            if r == rows - 1 and c == cols - 1:\n                return current_health >= 1\n            if visited[r][c]:\n                continue\n            visited[r][c] = True\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        heapq.heappush(pq, (-next_health, nr, nc))\n        return False"
  ],
  "all_solutions": [
    "from typing import List\nimport heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        rows, cols = len(grid), len(grid[0])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n        pq = [(-health, 0, 0)]  # negative health to simulate max-heap\n        visited = [[False] * cols for _ in range(rows)]\n        \n        while pq:\n            current_health, r, c = heapq.heappop(pq)\n            current_health = -current_health  # convert back to positive\n            if r == rows - 1 and c == cols - 1:\n                return current_health >= 1\n            if visited[r][c]:\n                continue\n            visited[r][c] = True\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        heapq.heappush(pq, (-next_health, nr, nc))\n        return False"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nimport heapq\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        rows, cols = len(grid), len(grid[0])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n        pq = [(-health, 0, 0)]  # negative health to simulate max-heap\n        visited = [[False] * cols for _ in range(rows)]\n        \n        while pq:\n            current_health, r, c = heapq.heappop(pq)\n            current_health = -current_health  # convert back to positive\n            if r == rows - 1 and c == cols - 1:\n                return current_health >= 1\n            if visited[r][c]:\n                continue\n            visited[r][c] = True\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        heapq.heappush(pq, (-next_health, nr, nc))\n        return False",
      "solution_hash": "f4870b9ef610c8020ef41596c43b5481e91c6cb3f47fd4fa0c36170bf96332f1",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.77596640586853,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.77596640586853
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1058,
        "max": 1058,
        "avg": 1058.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 165.03297328948975,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}