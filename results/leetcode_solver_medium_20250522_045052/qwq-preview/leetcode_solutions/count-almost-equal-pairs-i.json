{
  "problem_id": "count-almost-equal-pairs-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Convert all numbers to strings with leading zeros to make them the same length\n        max_length = max(len(str(num)) for num in nums)\n        str_nums = [str(num).zfill(max_length) for num in nums]\n        \n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                s1 = str_nums[i]\n                s2 = str_nums[j]\n                diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n                # If there are exactly two differences and they can be swapped to make equal\n                if len(diff_positions) == 2:\n                    pos1, pos2 = diff_positions\n                    if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                        count += 1\n                # If there are no differences, they are already equal\n                elif len(diff_positions) == 0:\n                    count += 1\n        return count",
  "passed_solutions": [
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Convert all numbers to strings with leading zeros to make them the same length\n        max_length = max(len(str(num)) for num in nums)\n        str_nums = [str(num).zfill(max_length) for num in nums]\n        \n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                s1 = str_nums[i]\n                s2 = str_nums[j]\n                diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n                # If there are exactly two differences and they can be swapped to make equal\n                if len(diff_positions) == 2:\n                    pos1, pos2 = diff_positions\n                    if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                        count += 1\n                # If there are no differences, they are already equal\n                elif len(diff_positions) == 0:\n                    count += 1\n        return count",
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from itertools import combinations\n        str_nums = [str(num) for num in nums]\n        max_len = max(len(num) for num in str_nums)\n        str_nums = [num.zfill(max_len) for num in str_nums]\n        \n        def can_make_equal(s1, s2):\n            if s1 == s2:\n                return True\n            diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n            if len(diff_positions) != 2:\n                return False\n            pos1, pos2 = diff_positions\n            if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                return True\n            return False\n        \n        count = 0\n        for s1, s2 in combinations(str_nums, 2):\n            if can_make_equal(s1, s2):\n                count += 1\n        return count"
  ],
  "all_solutions": [
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Create a frequency map of sorted digit strings\n        freq = defaultdict(int)\n        for num in nums:\n            num_str = str(num)\n            sorted_str = ''.join(sorted(num_str))\n            freq[sorted_str] += 1\n        \n        # Calculate the number of pairs for each frequency\n        count = 0\n        for n in freq.values():\n            if n >= 2:\n                count += (n * (n - 1)) // 2\n        return count",
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        str_nums = [str(num) for num in nums]\n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                s1 = str_nums[i]\n                s2 = str_nums[j]\n                if len(s1) != len(s2):\n                    continue\n                diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n                if len(diff_positions) == 2:\n                    pos1, pos2 = diff_positions\n                    if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                        count += 1\n                elif len(diff_positions) == 0:\n                    count += 1\n        return count",
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Convert all numbers to strings with leading zeros to make them the same length\n        max_length = max(len(str(num)) for num in nums)\n        str_nums = [str(num).zfill(max_length) for num in nums]\n        \n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                s1 = str_nums[i]\n                s2 = str_nums[j]\n                diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n                # If there are exactly two differences and they can be swapped to make equal\n                if len(diff_positions) == 2:\n                    pos1, pos2 = diff_positions\n                    if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                        count += 1\n                # If there are no differences, they are already equal\n                elif len(diff_positions) == 0:\n                    count += 1\n        return count",
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from itertools import combinations\n        str_nums = [str(num) for num in nums]\n        max_len = max(len(num) for num in str_nums)\n        str_nums = [num.zfill(max_len) for num in str_nums]\n        \n        def can_make_equal(s1, s2):\n            if s1 == s2:\n                return True\n            diff_positions = [idx for idx, (a, b) in enumerate(zip(s1, s2)) if a != b]\n            if len(diff_positions) != 2:\n                return False\n            pos1, pos2 = diff_positions\n            if s1[pos1] == s2[pos2] and s1[pos2] == s2[pos1]:\n                return True\n            return False\n        \n        count = 0\n        for s1, s2 in combinations(str_nums, 2):\n            if can_make_equal(s1, s2):\n                count += 1\n        return count",
    "from typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        str_nums = [str(num) for num in nums]\n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                s1 = str_nums[i]\n                s2 = str_nums[j]\n                # Make sure both strings have the same length by padding with leading zeros\n                max_len = max(len(s1), len(s2))\n                s1_padded = s1.zfill(max_len)\n                s2_padded = s2.zfill(max_len)\n                # Count the number of differing positions\n                diff_positions = [idx for idx, (a, b) in enumerate(zip(s1_padded, s2_padded)) if a != b]\n                num_diffs = len(diff_positions)\n                if num_diffs == 0:\n                    count += 1\n                elif num_diffs == 2:\n                    pos1, pos2 = diff_positions\n                    if s1_padded[pos1] == s2_padded[pos2] and s1_padded[pos2] == s2_padded[pos1]:\n                        count += 1\n                # Handle cases where one number can be made equal to the other by swapping digits,\n                # including scenarios with leading zeros\n                elif num_diffs == 1:\n                    # Check if swapping the differing digit with a zero can make them equal\n                    if '0' in s1_padded and s1_padded.count('0') > s2_padded.count('0'):\n                        count += 1\n                    elif '0' in s2_padded and s2_padded.count('0') > s1_padded.count('0'):\n                        count += 1\n        return count"
  ],
  "total_candidates": 5,
  "nodes_explored": 5,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        # Create a frequency map of sorted digit strings\n        freq = defaultdict(int)\n        for num in nums:\n            num_str = str(num)\n            sorted_str = ''.join(sorted(num_str))\n            freq[sorted_str] += 1\n        \n        # Calculate the number of pairs for each frequency\n        count = 0\n        for n in freq.values():\n            if n >= 2:\n                count += (n * (n - 1)) // 2\n        return count",
      "solution_hash": "d52ae4acec1616e7d47c28a1589b1a1f886875e91b93ed726205f8742bfb1986",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpw3he0ebp.py\", line 229, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpw3he0ebp.py\", line 103, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpw3he0ebp.py` failed. (See above for error)\n",
        "execution_time": 13.824129581451416,
        "failed_tests": [
          {
            "input": "nums = [101, 110, 111, 1001, 1100]",
            "expected": "5",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpw3he0ebp.py\", line 229, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/21926554/tmpw3he0ebp.py\", line 103, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpw3he0ebp.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 5,
    "candidates_generated": 5,
    "tests_passed": 2,
    "tests_failed": 3,
    "test_errors": 0,
    "execution_times": [
      13.824129581451416,
      13.816107988357544,
      13.810145854949951,
      13.832161664962769,
      13.768167734146118
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 561,
        "max": 1594,
        "avg": 964.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [101, 110, 111, 1001, 1100]": 3
      },
      "first_failing_tests": {
        "nums = [101, 110, 111, 1001, 1100]": 3
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 3,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 2,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 2,
        "assertion_failure->unknown": 2
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.4,
        "solutions_per_depth": {
          "0": 1,
          "1": 1,
          "2": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.4999999999999999,
        "pass@3": 0.95,
        "pass@5": 1.0
      },
      "solutions_evaluated": 6,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.4,
        "branch_success_rate": 0.4
      },
      "error_recovery": {
        "total_attempts": 2,
        "total_improvements": 2,
        "recovery_rate": 1.0
      },
      "top_errors": [
        [
          "assertion_failure",
          2
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [101, 110, 111, 1001, 1100]",
          3
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 285.02950048446655,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.4999999999999999,
      "pass@3": 0.95,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 5
          }
        ]
      ]
    },
    "solutions_evaluated": 6,
    "test_cases": 1
  }
}