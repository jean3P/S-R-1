{
  "problem_id": "count-the-number-of-good-nodes",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        self.good_count = 0  # Counter for good nodes\n        \n        # DFS function to calculate subtree sizes and check for good nodes\n        def dfs(node, parent):\n            child_sizes = []\n            for child in adj[node]:\n                if child != parent:\n                    child_size = dfs(child, node)\n                    child_sizes.append(child_size)\n            # If all child subtree sizes are the same, increment good_count\n            if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                self.good_count += 1\n            # Return the size of the subtree rooted at this node\n            return 1 + sum(child_sizes)\n        \n        # Start DFS from root node 0\n        dfs(0, -1)\n        return self.good_count"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
      "solution_hash": "fff7648b1602c0743956ba4d49ad0f219e016d64be92cd128ef314175eb42e8e",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)\n",
        "execution_time": 13.818339109420776,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
      "solution_hash": "fff7648b1602c0743956ba4d49ad0f219e016d64be92cd128ef314175eb42e8e",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)\n",
        "execution_time": 13.818339109420776,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                self.good_count = 0  # Counter for good nodes\n                \n                # DFS function to calculate subtree sizes and check for good nodes\n                def dfs(node, parent):\n                    child_sizes = []\n                    for child in adj[node]:\n                        if child != parent:\n                            child_size = dfs(child, node)\n                            child_sizes.append(child_size)\n                    # If all child subtree sizes are the same, increment good_count\n                    if not child_sizes or all(size == child_sizes[0] for size in child_sizes):\n                        self.good_count += 1\n                    # Return the size of the subtree rooted at this node\n                    return 1 + sum(child_sizes)\n                \n                # Start DFS from root node 0\n                dfs(0, -1)\n                return self.good_count",
      "solution_hash": "fff7648b1602c0743956ba4d49ad0f219e016d64be92cd128ef314175eb42e8e",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)\n",
        "execution_time": 13.818339109420776,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/21926554/tmptatzl9fb.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmptatzl9fb.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 39,
    "test_errors": 0,
    "execution_times": [
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776,
      13.818339109420776
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 0.02564102564102564,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1066,
        "max": 1282,
        "avg": 1115.8461538461538
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "other_error": {
          "attempts": 12,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "other_error->other_error": 36
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.775,
        "pass@3": 0.9914979757085021,
        "pass@5": 0.9998085129664077,
        "pass@10": 1.0
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "other_error",
          12
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 862.1463189125061,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.775,
      "pass@3": 0.9914979757085021,
      "pass@5": 0.9998085129664077,
      "pass@10": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}