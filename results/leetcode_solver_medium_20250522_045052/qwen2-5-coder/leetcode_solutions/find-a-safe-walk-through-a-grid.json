{
  "problem_id": "find-a-safe-walk-through-a-grid",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_at_cell = [[0] * n for _ in range(m)]\n        max_health_at_cell[0][0] = health\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0 and new_health > max_health_at_cell[nx][ny]:\n                        max_health_at_cell[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
  "passed_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_at_cell = [[0] * n for _ in range(m)]\n        max_health_at_cell[0][0] = health\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0 and new_health > max_health_at_cell[nx][ny]:\n                        max_health_at_cell[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False"
  ],
  "all_solutions": [
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = set((0, 0))\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0:\n                        visited.add((nx, ny))\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        min_health_needed = [[float('inf')] * n for _ in range(m)]\n        min_health_needed[0][0] = health\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0 and new_health > min_health_needed[nx][ny]:\n                        min_health_needed[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_at_cell = [[0] * n for _ in range(m)]\n        max_health_at_cell[0][0] = health\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0 and new_health > max_health_at_cell[nx][ny]:\n                        max_health_at_cell[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = set((0, 0))\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0:\n                        visited.add((nx, ny))\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = [[False] * n for _ in range(m)]\n        visited[0][0] = True\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0:\n                        visited[nx][ny] = True\n                        queue.append((nx, ny, new_health))\n        \n        return False"
  ],
  "total_candidates": 5,
  "nodes_explored": 5,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = set((0, 0))\n        \n        while queue:\n            x, y, h = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and h >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                    new_health = h - grid[nx][ny]\n                    if new_health > 0:\n                        visited.add((nx, ny))\n                        queue.append((nx, ny, new_health))\n        \n        return False",
      "solution_hash": "a70f9a4e753b865e61d8e6f8ccb44df9becb156579aa21c29e0cc08d8a0f8302",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp9p0u9k2p.py\", line 193, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/21926554/tmp9p0u9k2p.py\", line 144, in check\n    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp9p0u9k2p.py` failed. (See above for error)\n",
        "execution_time": 13.901297092437744,
        "failed_tests": [
          {
            "input": "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5",
            "expected": "True",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp9p0u9k2p.py\", line 193, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/21926554/tmp9p0u9k2p.py\", line 144, in check\n    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp9p0u9k2p.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 5,
    "candidates_generated": 5,
    "tests_passed": 1,
    "tests_failed": 4,
    "test_errors": 0,
    "execution_times": [
      13.901297092437744,
      13.885106563568115,
      14.024058103561401,
      13.687062978744507,
      13.597915887832642
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 852,
        "max": 970,
        "avg": 910.2
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 3,
        "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1": 1
      },
      "first_failing_tests": {
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 3,
        "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 3,
          "improvements": 0,
          "solved": 1
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 2,
          "improvements": 1
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 3,
        "assertion_failure->unknown": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.4,
        "solutions_per_depth": {
          "0": 1,
          "1": 1,
          "2": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.16666666666666663,
        "pass@3": 0.5,
        "pass@5": 0.8333333333333334
      },
      "solutions_evaluated": 6,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.2,
        "branch_success_rate": 0.2
      },
      "error_recovery": {
        "total_attempts": 2,
        "total_improvements": 1,
        "recovery_rate": 0.5
      },
      "top_errors": [
        [
          "assertion_failure",
          2
        ]
      ],
      "hardest_test_cases": [
        [
          "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5",
          3
        ],
        [
          "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 253.81166243553162,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.16666666666666663,
      "pass@3": 0.5,
      "pass@5": 0.8333333333333334
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 5
          }
        ]
      ]
    },
    "solutions_evaluated": 6,
    "test_cases": 1
  }
}