{
  "problem_id": "shortest-distance-after-road-addition-queries-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def dijkstra(graph, start, end):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        results = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            shortest_path = dijkstra(graph, 0, n - 1)\n            results.append(shortest_path)\n        \n        return results",
  "passed_solutions": [
    "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def dijkstra(graph, start, end):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        results = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            shortest_path = dijkstra(graph, 0, n - 1)\n            results.append(shortest_path)\n        \n        return results"
  ],
  "all_solutions": [
    "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def dijkstra(graph, start, end):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        results = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            shortest_path = dijkstra(graph, 0, n - 1)\n            results.append(shortest_path)\n        \n        return results"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def dijkstra(graph, start, end):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        results = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            shortest_path = dijkstra(graph, 0, n - 1)\n            results.append(shortest_path)\n        \n        return results",
      "solution_hash": "2eee5492f8cb0eb8b86b5fd400c03b1f688085bc89e8c36708f66bdcfb437ff9",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 14.140262842178345,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      14.140262842178345
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1113,
        "max": 1113,
        "avg": 1113.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 124.6524806022644,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}