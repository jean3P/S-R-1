{
  "problem_id": "maximize-score-of-numbers-in-ranges",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for i in range(1, len(start)):\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                target = prev + min_diff\n                left, right = start[i], start[i] + d\n                if target > right:\n                    return False\n                if target >= left:\n                    prev = target\n                else:\n                    prev = left\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
  "passed_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for i in range(1, len(start)):\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                target = prev + min_diff\n                left, right = start[i], start[i] + d\n                if target > right:\n                    return False\n                if target >= left:\n                    prev = target\n                else:\n                    prev = left\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score"
  ],
  "all_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for i in range(1, len(start)):\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                target = prev + min_diff\n                left, right = start[i], start[i] + d\n                if target > right:\n                    return False\n                if target >= left:\n                    prev = target\n                else:\n                    prev = left\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        def canAchieve(min_diff):\n            prev = start[0]\n            for i in range(1, len(start)):\n                # Find the smallest number in the current interval that is at least min_diff away from prev\n                target = prev + min_diff\n                left, right = start[i], start[i] + d\n                if target > right:\n                    return False\n                if target >= left:\n                    prev = target\n                else:\n                    prev = left\n            return True\n        \n        start.sort()\n        low, high = 0, start[-1] + d - start[0]\n        best_score = 0\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if canAchieve(mid):\n                best_score = mid\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return best_score",
      "solution_hash": "211f399b471c2d26c12627c2307081b1082217fad57c9fa9b75b065b00efd257",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 14.045081853866577,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      14.045081853866577
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 954,
        "max": 954,
        "avg": 954.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 61.79047679901123,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}