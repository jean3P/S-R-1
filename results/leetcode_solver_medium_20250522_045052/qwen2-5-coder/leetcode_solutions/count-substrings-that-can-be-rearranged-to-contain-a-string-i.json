{
  "problem_id": "count-substrings-that-can-be-rearranged-to-contain-a-string-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def validSubstringCount(self, word1: str, word2: str) -> int:\n        from collections import Counter\n        \n        # Count the frequency of each character in word2\n        word2_count = Counter(word2)\n        required_chars = len(word2_count)\n        formed_chars = 0\n        \n        # Initialize the sliding window\n        left = 0\n        right = 0\n        window_count = Counter()\n        valid_substrings = 0\n        n = len(word1)\n        \n        while right < n:\n            # Add the current character to the window\n            char = word1[right]\n            window_count[char] += 1\n            \n            # Check if the current character's frequency matches the required frequency in word2\n            if char in word2_count and window_count[char] == word2_count[char]:\n                formed_chars += 1\n            \n            # Try to contract the window until it ceases to be 'desirable'\n            while left <= right and formed_chars == required_chars:\n                # Every substring starting from left to right is valid\n                valid_substrings += n - right\n                \n                # Remove the leftmost character\n                char = word1[left]\n                window_count[char] -= 1\n                if char in word2_count and window_count[char] < word2_count[char]:\n                    formed_chars -= 1\n                left += 1\n            \n            # Keep expanding the window\n            right += 1\n        \n        return valid_substrings",
  "passed_solutions": [
    "class Solution:\n    def validSubstringCount(self, word1: str, word2: str) -> int:\n        from collections import Counter\n        \n        # Count the frequency of each character in word2\n        word2_count = Counter(word2)\n        required_chars = len(word2_count)\n        formed_chars = 0\n        \n        # Initialize the sliding window\n        left = 0\n        right = 0\n        window_count = Counter()\n        valid_substrings = 0\n        n = len(word1)\n        \n        while right < n:\n            # Add the current character to the window\n            char = word1[right]\n            window_count[char] += 1\n            \n            # Check if the current character's frequency matches the required frequency in word2\n            if char in word2_count and window_count[char] == word2_count[char]:\n                formed_chars += 1\n            \n            # Try to contract the window until it ceases to be 'desirable'\n            while left <= right and formed_chars == required_chars:\n                # Every substring starting from left to right is valid\n                valid_substrings += n - right\n                \n                # Remove the leftmost character\n                char = word1[left]\n                window_count[char] -= 1\n                if char in word2_count and window_count[char] < word2_count[char]:\n                    formed_chars -= 1\n                left += 1\n            \n            # Keep expanding the window\n            right += 1\n        \n        return valid_substrings"
  ],
  "all_solutions": [
    "class Solution:\n    def validSubstringCount(self, word1: str, word2: str) -> int:\n        from collections import Counter\n        \n        # Count the frequency of each character in word2\n        word2_count = Counter(word2)\n        required_chars = len(word2_count)\n        formed_chars = 0\n        \n        # Initialize the sliding window\n        left = 0\n        right = 0\n        window_count = Counter()\n        valid_substrings = 0\n        n = len(word1)\n        \n        while right < n:\n            # Add the current character to the window\n            char = word1[right]\n            window_count[char] += 1\n            \n            # Check if the current character's frequency matches the required frequency in word2\n            if char in word2_count and window_count[char] == word2_count[char]:\n                formed_chars += 1\n            \n            # Try to contract the window until it ceases to be 'desirable'\n            while left <= right and formed_chars == required_chars:\n                # Every substring starting from left to right is valid\n                valid_substrings += n - right\n                \n                # Remove the leftmost character\n                char = word1[left]\n                window_count[char] -= 1\n                if char in word2_count and window_count[char] < word2_count[char]:\n                    formed_chars -= 1\n                left += 1\n            \n            # Keep expanding the window\n            right += 1\n        \n        return valid_substrings"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def validSubstringCount(self, word1: str, word2: str) -> int:\n        from collections import Counter\n        \n        # Count the frequency of each character in word2\n        word2_count = Counter(word2)\n        required_chars = len(word2_count)\n        formed_chars = 0\n        \n        # Initialize the sliding window\n        left = 0\n        right = 0\n        window_count = Counter()\n        valid_substrings = 0\n        n = len(word1)\n        \n        while right < n:\n            # Add the current character to the window\n            char = word1[right]\n            window_count[char] += 1\n            \n            # Check if the current character's frequency matches the required frequency in word2\n            if char in word2_count and window_count[char] == word2_count[char]:\n                formed_chars += 1\n            \n            # Try to contract the window until it ceases to be 'desirable'\n            while left <= right and formed_chars == required_chars:\n                # Every substring starting from left to right is valid\n                valid_substrings += n - right\n                \n                # Remove the leftmost character\n                char = word1[left]\n                window_count[char] -= 1\n                if char in word2_count and window_count[char] < word2_count[char]:\n                    formed_chars -= 1\n                left += 1\n            \n            # Keep expanding the window\n            right += 1\n        \n        return valid_substrings",
      "solution_hash": "d43ba753f78cd48adb4e450812eb134abecd1189651a99b31dcd7735509e396f",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.572667837142944,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.572667837142944
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1517,
        "max": 1517,
        "avg": 1517.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 74.99460220336914,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}