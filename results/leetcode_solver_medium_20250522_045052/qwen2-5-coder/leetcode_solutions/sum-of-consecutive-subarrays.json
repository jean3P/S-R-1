{
  "problem_id": "sum-of-consecutive-subarrays",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum += nums[start + j] * (j + 1) * (length - j)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_subarray_sum = 0\n                for k in range(j, i + 1):\n                    current_subarray_sum += nums[k]\n                    total_sum += current_subarray_sum\n                    total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Sum of subarray starting at start and ending at start + j\n                subarray_sum = (length - j) * (2 * nums[start] + j * diff) // 2\n                total_sum += subarray_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                # Sum of subarrays starting at index j\n                current_sum += nums[j] * (length - (j - start))\n            \n            total_sum += current_sum\n            total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Contribution of nums[start + j] to the total sum\n                total_sum += nums[start + j] * (j + 1) * (length - j)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            for j in range(start, i + 1):\n                subarray_sum = 0\n                for k in range(j, i + 1):\n                    subarray_sum += nums[k]\n                    total_sum += subarray_sum\n                    total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Sum of subarray starting at start and ending at start + j\n                subarray_sum = (length - j) * (2 * nums[start] + j * diff) // 2\n                total_sum += subarray_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum * (i - j + 1)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            # Sum of the first element of each subarray\n            first_element_sum = (length * (2 * nums[start] + (length - 1) * diff)) // 2\n            # Sum of all subarrays\n            subarray_sum = (length * (first_element_sum + (length - 1) * (nums[start] + (length - 1) * diff) // 2)) // 2\n            total_sum += subarray_sum\n            total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to all subarrays ending at j\n                count_of_subarrays_ending_at_j = j - start + 1\n                total_sum += nums[j] * count_of_subarrays_ending_at_j\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                # Contribution of nums[j] in all subarrays starting from start to j\n                total_sum += nums[j] * (j - start + 1) * (length - (j - start))\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to all subarrays starting at or after j\n                total_sum += nums[j] * (length - (j - start))\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum += nums[start + j] * (j + 1) * (length - j)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to all subarrays starting at or before j\n                total_sum += nums[j] * (length - (j - start))\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to all subarrays ending at j\n                current_sum += nums[j]\n                total_sum += current_sum * (length - (j - start))\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum * (length - (j - start))\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                current_sum = 0\n                for k in range(j, i + 1):\n                    current_sum += nums[k]\n                    total_sum += current_sum\n                    total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            for j in range(start, i + 1):\n                subarray_sum = 0\n                for k in range(j, i + 1):\n                    subarray_sum += nums[k]\n                    total_sum += subarray_sum\n                    total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum * (i - j + 1)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum += current_sum * (i - j + 1)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Sum of subarray starting at start and ending at start + j\n                subarray_sum = (length - j) * (2 * nums[start] + j * diff) // 2\n                total_sum += subarray_sum\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            for i in range(start, end):\n                # Contribution of nums[i] to all subarrays ending at i\n                total_sum += nums[i] * (i - start + 1) * (end - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        current_sum = nums[0]\n        length = 1\n        \n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == 1 or nums[i] - nums[i - 1] == -1:\n                current_sum += nums[i]\n                length += 1\n            else:\n                # Add the sum of all subarrays in the current consecutive sequence\n                total_sum += (length * (length + 1) // 2) * current_sum\n                current_sum = nums[i]\n                length = 1\n        \n        # Add the sum of the last consecutive sequence\n        total_sum += (length * (length + 1) // 2) * current_sum\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        current_sum = 0\n        length = 0\n        \n        for i in range(n):\n            if i == 0 or nums[i] - nums[i - 1] in [1, -1]:\n                current_sum += nums[i]\n                length += 1\n            else:\n                # Calculate the sum of all subarrays in the previous segment\n                total_sum += (length * (length + 1) // 2) * current_sum\n                current_sum = nums[i]\n                length = 1\n            \n            # Handle the last segment\n            if i == n - 1:\n                total_sum += (length * (length + 1) // 2) * current_sum\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        current_sum = nums[0]\n        length = 1\n        \n        for i in range(1, n):\n            if nums[i] - nums[i - 1] == 1 or nums[i] - nums[i - 1] == -1:\n                current_sum += nums[i]\n                length += 1\n            else:\n                # Add the sum of all subarrays in the current consecutive segment\n                total_sum += (length * (length + 1) // 2) * current_sum\n                current_sum = nums[i]\n                length = 1\n        \n        # Add the sum of all subarrays for the last consecutive segment\n        total_sum += (length * (length + 1) // 2) * current_sum\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            for i in range(start, end):\n                # Contribution of nums[i] in all subarrays starting from index i\n                total_sum += nums[i] * (i - start + 1) * (length - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            current_sum = 0\n            for i in range(start, end):\n                current_sum += nums[i]\n                total_sum += current_sum * (length - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            current_sum = 0\n            for i in range(start, end):\n                current_sum += nums[i]\n                total_sum += current_sum\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            current_sum = 0\n            for i in range(start, end):\n                # Contribution of nums[i] in all subarrays starting from index i\n                current_sum += nums[i] * (i - start + 1) * (length - i)\n            \n            total_sum += current_sum\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            for i in range(start, end):\n                # Contribution of nums[i] to all subarrays ending at i\n                total_sum += nums[i] * (i - start + 1) * (end - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            for i in range(start, end):\n                # Contribution of nums[i] to all subarrays ending at i\n                total_sum += nums[i] * (i - start + 1) * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            current_sum = 0\n            for i in range(start, end):\n                current_sum += nums[i]\n                # Number of subarrays ending at i\n                total_sum += current_sum\n            \n            start = end\n        \n        return total_sum % MOD",
    "from typing import List\n\nclass Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            direction = None\n            \n            # Determine the direction of the consecutive sequence\n            if end < n:\n                direction = nums[end] - nums[start]\n                if direction != 1 and direction != -1:\n                    total_sum += nums[start]\n                    start += 1\n                    continue\n            \n            # Extend the end of the consecutive sequence\n            while end < n and nums[end] - nums[end - 1] == direction:\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            current_sum = 0\n            for i in range(start, end):\n                current_sum += nums[i]\n                total_sum += current_sum\n            \n            start = end\n        \n        return total_sum % MOD"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum += nums[start + j] * (j + 1) * (length - j)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
      "solution_hash": "13f1d66800d08473ac0e183d52effd40d215c912d623f00d2be8ee5e68408727",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpdsq_dl5i.py\", line 245, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpdsq_dl5i.py\", line 121, in check\n    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpdsq_dl5i.py` failed. (See above for error)\n",
        "execution_time": 13.961564302444458,
        "failed_tests": [
          {
            "input": "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
            "expected": "224",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpdsq_dl5i.py\", line 245, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpdsq_dl5i.py\", line 121, in check\n    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpdsq_dl5i.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Extend the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and abs(diff) == 1):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum += nums[start + j] * (j + 1) * (length - j)\n                total_sum %= MOD\n            \n            i += 1\n        \n        return total_sum",
      "solution_hash": "56f8cd94f8d97fa7faf1b539cbd837acca7023b3859988d896cda21b51f674e2",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp6mtc10rd.py\", line 245, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp6mtc10rd.py\", line 121, in check\n    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp6mtc10rd.py` failed. (See above for error)\n",
        "execution_time": 13.637005090713501,
        "failed_tests": [
          {
            "input": "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
            "expected": "224",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmp6mtc10rd.py\", line 245, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmp6mtc10rd.py\", line 121, in check\n    assert candidate(nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == 224\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmp6mtc10rd.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total_sum = 0\n        start = 0\n        \n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] - nums[end - 1] == 1 or nums[end] - nums[end - 1] == -1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end-1]\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
      "solution_hash": "3bdb9b3649a6d236fe39152829f9d18046244da7743bce67118821f7c1de805f",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpgkq22adn.py\", line 240, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpgkq22adn.py\", line 107, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpgkq22adn.py` failed. (See above for error)\n",
        "execution_time": 13.607920408248901,
        "failed_tests": [
          {
            "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
            "expected": "72",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926554/tmpgkq22adn.py\", line 240, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/21926554/tmpgkq22adn.py\", line 107, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926554/tmpgkq22adn.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 38,
    "test_errors": 1,
    "execution_times": [
      13.961564302444458,
      14.027252912521362,
      13.875149965286255,
      13.637402772903442,
      13.588711261749268,
      13.623741149902344,
      13.875149965286255,
      13.57606291770935,
      13.585005044937134,
      13.598588943481445,
      13.877741575241089,
      13.62863302230835,
      13.600186824798584,
      13.637005090713501,
      13.925045013427734,
      13.925045013427734,
      13.917993307113647,
      13.925045013427734,
      13.925045013427734,
      13.584469079971313,
      13.584469079971313,
      13.617523670196533,
      13.61437463760376,
      13.576008319854736,
      13.576008319854736,
      13.585307836532593,
      13.607920408248901,
      13.622665643692017,
      13.629930973052979,
      13.616624593734741,
      13.629930973052979,
      13.599560499191284,
      13.898546695709229,
      13.728603601455688,
      10,
      13.622665643692017,
      13.868618488311768,
      13.637372255325317,
      13.646255016326904
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 31,
      "unique_ratio": 0.7948717948717948,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 684,
        "max": 1154,
        "avg": 936.9230769230769
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 11,
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 27
      },
      "first_failing_tests": {
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 11,
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 27
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 12,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 35,
        "assertion_failure->other_error": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.0,
        "pass@3": 0.0,
        "pass@5": 0.0,
        "pass@10": 0.0
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "assertion_failure",
          12
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
          27
        ],
        [
          "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
          11
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1692.6851644515991,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.0,
      "pass@3": 0.0,
      "pass@5": 0.0,
      "pass@10": 0.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "timed out",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}