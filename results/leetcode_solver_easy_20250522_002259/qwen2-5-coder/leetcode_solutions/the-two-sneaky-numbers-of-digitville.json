{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
  "passed_solutions": [
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers"
  ],
  "all_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] > 1:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2 and num not in sneaky_numbers:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2 and len(sneaky_numbers) < 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sorted(sneaky_numbers)",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sorted(sneaky_numbers)",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] > 1:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers"
  ],
  "total_candidates": 17,
  "nodes_explored": 17,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] > 1:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "6d47839a1d652c72966979bbbfe4a27522a1208ad986087f9389bf380c5404d1",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp2p1p1a1z.py` failed. (See above for error)\n",
        "execution_time": 13.525859355926514,
        "failed_tests": [
          {
            "input": "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]",
            "expected": "[5, 4]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp2p1p1a1z.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] > 1:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "6d47839a1d652c72966979bbbfe4a27522a1208ad986087f9389bf380c5404d1",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp2p1p1a1z.py` failed. (See above for error)\n",
        "execution_time": 13.525859355926514,
        "failed_tests": [
          {
            "input": "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]",
            "expected": "[5, 4]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21926553/tmp2p1p1a1z.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp2p1p1a1z.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_15",
        "1_16"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 17,
    "candidates_generated": 17,
    "tests_passed": 1,
    "tests_failed": 16,
    "test_errors": 0,
    "execution_times": [
      13.525859355926514,
      13.515928268432617,
      13.521175146102905,
      13.548005104064941,
      13.546220541000366,
      13.547027587890625,
      13.547027587890625,
      13.513688802719116,
      13.547027587890625,
      13.547027587890625,
      13.547027587890625,
      13.547027587890625,
      13.547027587890625,
      13.525859355926514,
      13.48076581954956,
      13.547027587890625,
      13.547027587890625
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 8,
      "unique_ratio": 0.47058823529411764,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 313,
        "max": 450,
        "avg": 381.4117647058824
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]": 16
      },
      "first_failing_tests": {
        "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]": 16
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 1
        },
        "2": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 5,
          "improvements": 1
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 14,
        "assertion_failure->unknown": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.411764705882353,
        "solutions_per_depth": {
          "0": 2,
          "1": 6,
          "2": 9
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 1,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.11111111111111116,
        "pass@3": 0.3137254901960784,
        "pass@5": 0.4901960784313726,
        "pass@10": 0.8169934640522876
      },
      "solutions_evaluated": 18,
      "passing_solution_depths": {
        "min": 1,
        "max": 1,
        "avg": 1.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.058823529411764705,
        "branch_success_rate": 0.058823529411764705
      },
      "error_recovery": {
        "total_attempts": 5,
        "total_improvements": 1,
        "recovery_rate": 0.2
      },
      "top_errors": [
        [
          "assertion_failure",
          5
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]",
          16
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 354.42970156669617,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.11111111111111116,
      "pass@3": 0.3137254901960784,
      "pass@5": 0.4901960784313726,
      "pass@10": 0.8169934640522876
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 17
          }
        ]
      ]
    },
    "solutions_evaluated": 18,
    "test_cases": 1
  }
}