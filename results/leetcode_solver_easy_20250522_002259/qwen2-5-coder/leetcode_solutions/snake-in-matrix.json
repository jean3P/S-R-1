{
  "problem_id": "snake-in-matrix",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0, which corresponds to (0, 0) in coordinates\n        row, col = 0, 0\n        \n        # Define the movement vectors for each command\n        movement = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = movement[command]\n            row += dr\n            col += dc\n        \n        # Convert the final position (row, col) to the cell number\n        final_position = (row * n) + col\n        return final_position",
  "passed_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0, which corresponds to (0, 0) in coordinates\n        row, col = 0, 0\n        \n        # Define the movement vectors for each command\n        movement = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = movement[command]\n            row += dr\n            col += dc\n        \n        # Convert the final position (row, col) to the cell number\n        final_position = (row * n) + col\n        return final_position"
  ],
  "all_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0, which corresponds to (0, 0) in coordinates\n        row, col = 0, 0\n        \n        # Define the movement vectors for each command\n        movement = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = movement[command]\n            row += dr\n            col += dc\n        \n        # Convert the final position (row, col) to the cell number\n        final_position = (row * n) + col\n        return final_position"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0, which corresponds to (0, 0) in coordinates\n        row, col = 0, 0\n        \n        # Define the movement vectors for each command\n        movement = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = movement[command]\n            row += dr\n            col += dc\n        \n        # Convert the final position (row, col) to the cell number\n        final_position = (row * n) + col\n        return final_position",
      "solution_hash": "bebd6ec6ef13610690d8c4edb7fece1208c0c68dd63205474f2bd1a676c4ddc1",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 15.162659645080566,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      15.162659645080566
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 715,
        "max": 715,
        "avg": 715.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.5
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 334.90366220474243,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.5
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: invalid syntax (<string>, line 101)",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}