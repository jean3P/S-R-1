{
  "problem_id": "adjacent-increasing-subarrays-detection-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing)):\n            if i + k < len(is_increasing):\n                if is_increasing[i] and is_increasing[i + k]:\n                    return True\n        \n        return False",
  "passed_solutions": [
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing)):\n            if i + k < len(is_increasing):\n                if is_increasing[i] and is_increasing[i + k]:\n                    return True\n        \n        return False",
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - k):\n            if is_increasing[i] and is_increasing[i + k]:\n                return True\n        \n        return False"
  ],
  "all_solutions": [
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        # Precompute which indices start a strictly increasing subarray of length k\n        is_increasing = [False] * (n - k + 1)\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - 1):\n            if is_increasing[i] and is_increasing[i + 1]:\n                return True\n        \n        return False",
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - 1):\n            if is_increasing[i] and is_increasing[i + 1]:\n                return True\n        \n        return False",
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing)):\n            if i + k < len(is_increasing):\n                if is_increasing[i] and is_increasing[i + k]:\n                    return True\n        \n        return False",
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - k + 1):\n            if is_increasing[i] and is_increasing[i + k]:\n                return True\n        \n        return False",
    "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        is_increasing = [False] * (n - k + 1)\n        \n        # Precompute strictly increasing subarrays of length k\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - k):\n            if is_increasing[i] and is_increasing[i + k]:\n                return True\n        \n        return False"
  ],
  "total_candidates": 5,
  "nodes_explored": 5,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def hasIncreasingSubarrays(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        # Precompute which indices start a strictly increasing subarray of length k\n        is_increasing = [False] * (n - k + 1)\n        for i in range(n - k + 1):\n            increasing = True\n            for j in range(i, i + k - 1):\n                if nums[j] >= nums[j + 1]:\n                    increasing = False\n                    break\n            is_increasing[i] = increasing\n        \n        # Check for two adjacent increasing subarrays\n        for i in range(len(is_increasing) - 1):\n            if is_increasing[i] and is_increasing[i + 1]:\n                return True\n        \n        return False",
      "solution_hash": "760afbecb347d4a5fbc3a8d88690bd4f9ef6b5dad333bdd940623f8676cf781e",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmpubdpj00s.py\", line 230, in <module>\n    check(Solution().hasIncreasingSubarrays)\n  File \"/scratch/local/21926553/tmpubdpj00s.py\", line 108, in check\n    assert candidate(nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5) == False\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmpubdpj00s.py` failed. (See above for error)\n",
        "execution_time": 13.488087177276611,
        "failed_tests": [
          {
            "input": "nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5",
            "expected": "False",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmpubdpj00s.py\", line 230, in <module>\n    check(Solution().hasIncreasingSubarrays)\n  File \"/scratch/local/21926553/tmpubdpj00s.py\", line 108, in check\n    assert candidate(nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5) == False\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmpubdpj00s.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 5,
    "candidates_generated": 5,
    "tests_passed": 2,
    "tests_failed": 3,
    "test_errors": 0,
    "execution_times": [
      13.488087177276611,
      13.488087177276611,
      13.49451756477356,
      13.50062894821167,
      13.51030158996582
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 4,
      "unique_ratio": 0.8,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 710,
        "max": 757,
        "avg": 722.6
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5": 3
      },
      "first_failing_tests": {
        "nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5": 3
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 3,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 2,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 1,
        "assertion_failure->unknown": 2,
        "assertion_failure->index_error": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.4,
        "solutions_per_depth": {
          "0": 1,
          "1": 1,
          "2": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.4999999999999999,
        "pass@3": 0.95,
        "pass@5": 1.0
      },
      "solutions_evaluated": 6,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.4,
        "branch_success_rate": 0.4
      },
      "error_recovery": {
        "total_attempts": 2,
        "total_improvements": 2,
        "recovery_rate": 1.0
      },
      "top_errors": [
        [
          "assertion_failure",
          2
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4],k = 5",
          3
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 380.1032724380493,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.4999999999999999,
      "pass@3": 0.95,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 5
          }
        ]
      ]
    },
    "solutions_evaluated": 6,
    "test_cases": 1
  }
}