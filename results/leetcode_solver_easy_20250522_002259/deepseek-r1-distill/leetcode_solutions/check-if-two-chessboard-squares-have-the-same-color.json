{
  "problem_id": "check-if-two-chessboard-squares-have-the-same-color",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Convert coordinates to numerical values\n        def get_sum(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return col + row\n        \n        sum1 = get_sum(coordinate1)\n        sum2 = get_sum(coordinate2)\n        \n        # Check if both sums are even or both are odd\n        return (sum1 % 2) == (sum2 % 2)",
  "passed_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Convert coordinates to numerical values\n        def get_sum(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return col + row\n        \n        sum1 = get_sum(coordinate1)\n        sum2 = get_sum(coordinate2)\n        \n        # Check if both sums are even or both are odd\n        return (sum1 % 2) == (sum2 % 2)"
  ],
  "all_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Convert coordinates to numerical values\n        def get_sum(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return col + row\n        \n        sum1 = get_sum(coordinate1)\n        sum2 = get_sum(coordinate2)\n        \n        # Check if both sums are even or both are odd\n        return (sum1 % 2) == (sum2 % 2)"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Convert coordinates to numerical values\n        def get_sum(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return col + row\n        \n        sum1 = get_sum(coordinate1)\n        sum2 = get_sum(coordinate2)\n        \n        # Check if both sums are even or both are odd\n        return (sum1 % 2) == (sum2 % 2)",
      "solution_hash": "bd6f22eeb5143cb44c8520d31b4f5b65bef6032545abe6815b6800bc18faafe8",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.519237995147705,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [
      13.519237995147705
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 464,
        "max": 464,
        "avg": 464.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 59.34554934501648,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}