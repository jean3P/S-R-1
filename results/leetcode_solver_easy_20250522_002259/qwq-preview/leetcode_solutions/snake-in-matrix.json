{
  "problem_id": "snake-in-matrix",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initialize starting position\n        row, col = 0, 0\n        \n        # Define movement based on commands\n        for cmd in commands:\n            if cmd == \"UP\":\n                row -= 1\n            elif cmd == \"RIGHT\":\n                col += 1\n            elif cmd == \"DOWN\":\n                row += 1\n            elif cmd == \"LEFT\":\n                col -= 1\n        \n        # Calculate the final position\n        final_position = (row * n) + col\n        return final_position",
  "passed_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initialize starting position\n        row, col = 0, 0\n        \n        # Define movement based on commands\n        for cmd in commands:\n            if cmd == \"UP\":\n                row -= 1\n            elif cmd == \"RIGHT\":\n                col += 1\n            elif cmd == \"DOWN\":\n                row += 1\n            elif cmd == \"LEFT\":\n                col -= 1\n        \n        # Calculate the final position\n        final_position = (row * n) + col\n        return final_position"
  ],
  "all_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position\n        row, col = 0, 0\n        # Define possible moves\n        moves = {\n            \"RIGHT\": (0, 1),\n            \"LEFT\": (0, -1),\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0)\n        }\n        # Execute each command\n        for cmd in commands:\n            dr, dc = moves[cmd]\n            new_row, new_col = row + dr, col + dc\n            # Check boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n        # Calculate cell number\n        return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                    # Debug print to trace movement\n                    print(f\"Command: {cmd}, Position: ({row}, {col})\")\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                    # Debug print to trace movement\n                    print(f\"Command: {cmd}, Position: ({row}, {col})\")\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position\n        row, col = 0, 0\n        # Define possible moves\n        moves = {\n            \"RIGHT\": (0, 1),\n            \"LEFT\": (0, -1),\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0)\n        }\n        # Execute each command\n        for cmd in commands:\n            dr, dc = moves[cmd]\n            new_row, new_col = row + dr, col + dc\n            # Check boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n        # Calculate cell number\n        return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                    # Debug: print position after each move\n                    # print(f\"Command: {cmd}, Position: ({row}, {col})\")\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position\n        row, col = 0, 0\n        # Define possible moves\n        moves = {\n            \"RIGHT\": (0, 1),\n            \"LEFT\": (0, -1),\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0)\n        }\n        # Execute each command\n        for cmd in commands:\n            dr, dc = moves[cmd]\n            new_row, new_col = row + dr, col + dc\n            # Check boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n        # Calculate cell number\n        return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initial position\n                row, col = 0, 0\n                # Define possible moves\n                moves = {\n                    \"RIGHT\": (0, 1),\n                    \"LEFT\": (0, -1),\n                    \"UP\": (-1, 0),\n                    \"DOWN\": (1, 0)\n                }\n                # Execute each command\n                for cmd in commands:\n                    dr, dc = moves[cmd]\n                    new_row, new_col = row + dr, col + dc\n                    # Check boundaries\n                    if 0 <= new_row < n and 0 <= new_col < n:\n                        row, col = new_row, new_col\n                    # Debug: print position after each move\n                    # print(f\"Command: {cmd}, Position: {row}, {col}\")\n                # Calculate cell number\n                return (row * n) + col",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position\n        row, col = 0, 0\n        # Define possible moves\n        moves = {\n            \"RIGHT\": (0, 1),\n            \"LEFT\": (0, -1),\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0)\n        }\n        # Execute each command\n        for cmd in commands:\n            dr, dc = moves[cmd]\n            new_row, new_col = row + dr, col + dc\n            # Check boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n        # Calculate cell number\n        return (row * n) + col",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initialize starting position\n                row, col = 0, 0\n                \n                # Define movement based on commands\n                for cmd in commands:\n                    if cmd == \"UP\":\n                        if row > 0:\n                            row -= 1\n                    elif cmd == \"RIGHT\":\n                        if col < n - 1:\n                            col += 1\n                    elif cmd == \"DOWN\":\n                        if row < n - 1:\n                            row += 1\n                    elif cmd == \"LEFT\":\n                        if col > 0:\n                            col -= 1\n                \n                # Calculate the final position\n                final_position = (row * n) + col\n                return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initialize starting position\n        row, col = 0, 0\n        \n        # Define movement based on commands\n        for cmd in commands:\n            if cmd == \"UP\" and row > 0:\n                row -= 1\n            elif cmd == \"RIGHT\" and col < n - 1:\n                col += 1\n            elif cmd == \"DOWN\" and row < n - 1:\n                row += 1\n            elif cmd == \"LEFT\" and col > 0:\n                col -= 1\n        \n        # Calculate the final position\n        final_position = (row * n) + col\n        return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initialize starting position\n        row, col = 0, 0\n        \n        # Define movement based on commands\n        for cmd in commands:\n            if cmd == \"UP\":\n                row -= 1\n            elif cmd == \"RIGHT\":\n                col += 1\n            elif cmd == \"DOWN\":\n                row += 1\n            elif cmd == \"LEFT\":\n                col -= 1\n        \n        # Calculate the final position\n        final_position = (row * n) + col\n        return final_position",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initialize starting position\n                row, col = 0, 0\n                \n                # Define movement based on commands\n                for cmd in commands:\n                    if cmd == \"UP\" and row > 0:\n                        row -= 1\n                    elif cmd == \"RIGHT\" and col < n - 1:\n                        col += 1\n                    elif cmd == \"DOWN\" and row < n - 1:\n                        row += 1\n                    elif cmd == \"LEFT\" and col > 0:\n                        col -= 1\n                \n                # Calculate the final position\n                final_position = (row * n) + col\n                return final_position",
    "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initialize starting position\n                row, col = 0, 0\n                \n                # Define movement based on commands\n                for cmd in commands:\n                    if cmd == \"UP\" and row > 0:\n                        row -= 1\n                    elif cmd == \"RIGHT\" and col < n - 1:\n                        col += 1\n                    elif cmd == \"DOWN\" and row < n - 1:\n                        row += 1\n                    elif cmd == \"LEFT\" and col > 0:\n                        col -= 1\n                \n                # Calculate the final position\n                final_position = (row * n) + col\n                return final_position"
  ],
  "total_candidates": 18,
  "nodes_explored": 18,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position\n        row, col = 0, 0\n        # Define possible moves\n        moves = {\n            \"RIGHT\": (0, 1),\n            \"LEFT\": (0, -1),\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0)\n        }\n        # Execute each command\n        for cmd in commands:\n            dr, dc = moves[cmd]\n            new_row, new_col = row + dr, col + dc\n            # Check boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n        # Calculate cell number\n        return (row * n) + col",
      "solution_hash": "c350f47186fd44fd12d4e8be46d72b47ffd7f35cd5dc5fcdc125f175da255d6f",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmpdaa92puj.py\", line 189, in <module>\n    check(Solution().finalPositionOfSnake)\n  File \"/scratch/local/21926553/tmpdaa92puj.py\", line 106, in check\n    assert candidate(n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmpdaa92puj.py` failed. (See above for error)\n",
        "execution_time": 15.008849382400513,
        "failed_tests": [
          {
            "input": "n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']",
            "expected": "0",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmpdaa92puj.py\", line 189, in <module>\n    check(Solution().finalPositionOfSnake)\n  File \"/scratch/local/21926553/tmpdaa92puj.py\", line 106, in check\n    assert candidate(n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmpdaa92puj.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n            def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n                # Initialize starting position\n                row, col = 0, 0\n                \n                # Define movement based on commands\n                for cmd in commands:\n                    if cmd == \"UP\":\n                        if row > 0:\n                            row -= 1\n                    elif cmd == \"RIGHT\":\n                        if col < n - 1:\n                            col += 1\n                    elif cmd == \"DOWN\":\n                        if row < n - 1:\n                            row += 1\n                    elif cmd == \"LEFT\":\n                        if col > 0:\n                            col -= 1\n                \n                # Calculate the final position\n                final_position = (row * n) + col\n                return final_position",
      "solution_hash": "4242bd3ad0e664b43580b3393c5194f27ddb15e3a841756681b27a330dc2179d",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp8zksenyz.py\", line 192, in <module>\n    check(Solution().finalPositionOfSnake)\n  File \"/scratch/local/21926553/tmp8zksenyz.py\", line 109, in check\n    assert candidate(n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp8zksenyz.py` failed. (See above for error)\n",
        "execution_time": 13.96071457862854,
        "failed_tests": [
          {
            "input": "n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']",
            "expected": "0",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926553/tmp8zksenyz.py\", line 192, in <module>\n    check(Solution().finalPositionOfSnake)\n  File \"/scratch/local/21926553/tmp8zksenyz.py\", line 109, in check\n    assert candidate(n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']) == 0\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926553/tmp8zksenyz.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 18,
    "candidates_generated": 18,
    "tests_passed": 1,
    "tests_failed": 17,
    "test_errors": 0,
    "execution_times": [
      15.008849382400513,
      13.929259538650513,
      15.008849382400513,
      13.929259538650513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      15.008849382400513,
      13.96071457862854,
      13.88955545425415,
      13.99604606628418,
      13.88955545425415,
      13.88955545425415
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 0.2777777777777778,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 576,
        "max": 929,
        "avg": 772.1111111111111
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']": 17
      },
      "first_failing_tests": {
        "n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']": 17
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 12,
          "improvements": 0,
          "solved": 1
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 6,
          "improvements": 1
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 15,
        "assertion_failure->unknown": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5555555555555556,
        "solutions_per_depth": {
          "0": 2,
          "1": 4,
          "2": 12
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.05263157894736836,
        "pass@3": 0.1578947368421053,
        "pass@5": 0.26315789473684204,
        "pass@10": 0.5263157894736842
      },
      "solutions_evaluated": 19,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.05555555555555555,
        "branch_success_rate": 0.05555555555555555
      },
      "error_recovery": {
        "total_attempts": 6,
        "total_improvements": 1,
        "recovery_rate": 0.16666666666666666
      },
      "top_errors": [
        [
          "assertion_failure",
          6
        ]
      ],
      "hardest_test_cases": [
        [
          "n = 10,commands = ['UP', 'LEFT', 'DOWN', 'RIGHT', 'UP', 'LEFT', 'DOWN', 'RIGHT']",
          17
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 767.4775488376617,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.05263157894736836,
      "pass@3": 0.1578947368421053,
      "pass@5": 0.26315789473684204,
      "pass@10": 0.5263157894736842
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: invalid syntax (<string>, line 101)",
            "completion_id": 18
          }
        ]
      ]
    },
    "solutions_evaluated": 19,
    "test_cases": 1
  }
}