{
  "problem_id": "find-the-original-typed-string-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count + 1\n                count = 1\n        \n        result *= count + 1\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char = word[0]\n        count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == current_char:\n                count += 1\n            else:\n                result *= count\n                current_char = word[i]\n                count = 1\n        \n        # Multiply for the last sequence\n        result *= count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                # For a sequence of 'count' identical characters, there are 'count' possible original strings\n                result *= (count + 1)\n                count = 1\n        \n        # Don't forget to multiply the last sequence\n        result *= (count + 1)\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= (count + 1)\n                count = 1\n        \n        result *= (count + 1)\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= min(count, 2)  # Each sequence can be reduced by at most one character\n                count = 1\n        \n        result *= min(count, 2)\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char = word[0]\n        count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == current_char:\n                count += 1\n            else:\n                result *= count\n                current_char = word[i]\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                # Each sequence of n identical characters can be reduced to any length from 1 to n\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                # Each sequence of n identical characters can be reduced to any length from 1 to n\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Handle the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        result = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                # Each sequence of n identical characters can be reduced to any length from 1 to n\n                result *= current_char_count\n                current_char_count = 1\n        \n        # Multiply for the last sequence of characters\n        result *= current_char_count\n        \n        return result",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= (count + 1)\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= (count + 1)\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                # Each group of 'count' identical characters can be reduced to any length from 1 to 'count'\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        group_count = 0\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                group_count += 1\n                count = 1\n        \n        # Count the last group\n        group_count += 1\n        \n        # Each group can either be reduced by one or kept as is\n        return 2 ** group_count",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                # For a group of 'count' identical characters, there are 'count' possible original lengths\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        total_possibilities = 1\n        current_char_count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                current_char_count += 1\n            else:\n                # For a group of 'current_char_count' identical characters, there are 'current_char_count' possible original lengths\n                total_possibilities *= min(current_char_count, 2)\n                current_char_count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= min(current_char_count, 2)\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                # For a group of 'count' identical characters, there are 'count' possible original lengths\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
    "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        total_possibilities = 1\n        current_char = word[0]\n        count = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == current_char:\n                count += 1\n            else:\n                # For a group of 'count' identical characters, there are 'count' possible original lengths\n                total_possibilities *= count\n                current_char = word[i]\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count + 1\n                count = 1\n        \n        result *= count + 1\n        return result",
      "solution_hash": "6303c0f949076a18b5ff29a17e372fc0a64ea3dfc595a063460ae706df5d14c5",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpo83rvtdq.py\", line 159, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmpo83rvtdq.py\", line 101, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpo83rvtdq.py` failed. (See above for error)\n",
        "execution_time": 13.404248237609863,
        "failed_tests": [
          {
            "input": "word = \"aaabbbccc\"",
            "expected": "7",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpo83rvtdq.py\", line 159, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmpo83rvtdq.py\", line 101, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpo83rvtdq.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        result = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                result *= count\n                count = 1\n        \n        result *= count\n        return result",
      "solution_hash": "5aad3e2f1cfa96606a5189115086458d29182bc5cef543b01fe43c707ec28062",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmp096nh06y.py\", line 159, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmp096nh06y.py\", line 101, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp096nh06y.py` failed. (See above for error)\n",
        "execution_time": 13.420092821121216,
        "failed_tests": [
          {
            "input": "word = \"aaabbbccc\"",
            "expected": "7",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmp096nh06y.py\", line 159, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmp096nh06y.py\", line 101, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp096nh06y.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def possibleStringCount(self, word: str) -> int:\n        if not word:\n            return 0\n        \n        count = 1\n        total_possibilities = 1\n        \n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                count += 1\n            else:\n                total_possibilities *= count\n                count = 1\n        \n        # Multiply for the last group of characters\n        total_possibilities *= count\n        \n        return total_possibilities",
      "solution_hash": "69541b80a7d8e2ec6b9d1ea56f5c6550d128a60ba10138f03c1fd99c7f19d97f",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpfa53_j6d.py\", line 161, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmpfa53_j6d.py\", line 103, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpfa53_j6d.py` failed. (See above for error)\n",
        "execution_time": 13.460748195648193,
        "failed_tests": [
          {
            "input": "word = \"aaabbbccc\"",
            "expected": "7",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpfa53_j6d.py\", line 161, in <module>\n    check(Solution().possibleStringCount)\n  File \"/scratch/local/22242031/tmpfa53_j6d.py\", line 103, in check\n    assert candidate(word = \"aaabbbccc\") == 7\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpfa53_j6d.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 39,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.404248237609863,
      13.420092821121216,
      13.418375492095947,
      13.420092821121216,
      13.42372989654541,
      13.420092821121216,
      13.42372989654541,
      13.428701877593994,
      13.428701877593994,
      13.420092821121216,
      13.42682695388794,
      13.428701877593994,
      13.418375492095947,
      13.420092821121216,
      13.420092821121216,
      13.428701877593994,
      13.428701877593994,
      13.420092821121216,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.428701877593994,
      13.460748195648193,
      13.436761379241943,
      13.460748195648193,
      13.460748195648193,
      13.460748195648193,
      13.460748195648193,
      13.460748195648193,
      13.460748195648193,
      13.415761470794678,
      13.460748195648193,
      13.431966066360474,
      13.460748195648193,
      13.412882566452026
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 11,
      "unique_ratio": 0.28205128205128205,
      "similarity_score": 0.9884119960331851,
      "solution_lengths": {
        "min": 400,
        "max": 727,
        "avg": 518.0
      },
      "algorithm_approaches": {
        "other": 39
      },
      "feature_diversity": 0.48717948717948717,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 39
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.0,
            "count": 0
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 7,
            "max": 9,
            "avg": 7.153846153846154,
            "variance": 0.28402366863905326
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 17,
            "max": 22,
            "avg": 18.82051282051282,
            "variance": 1.5318869165023
          },
          "char_count": {
            "min": 400,
            "max": 727,
            "avg": 518.0,
            "variance": 6906.666666666667
          },
          "max_indent": {
            "min": 16,
            "max": 16,
            "avg": 16.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 39
        },
        "avg_complexity_metrics": {
          "avg_line_count": 18.82051282051282,
          "avg_loop_count": 1.0,
          "avg_condition_count": 3.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 7.153846153846154,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "word = \"aaabbbccc\"": 39
      },
      "first_failing_tests": {
        "word = \"aaabbbccc\"": 39
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 12,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 36
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.0,
        "pass@3": 0.0,
        "pass@5": 0.0,
        "pass@10": 0.0
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0,
        "test_success_rate": 0.0
      },
      "test_results": {
        "total": 39,
        "passed": 0,
        "failed": 39,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "assertion_failure",
          12
        ]
      ],
      "hardest_test_cases": [
        [
          "word = \"aaabbbccc\"",
          39
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1190.3802213668823,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.0,
      "pass@3": 0.0,
      "pass@5": 0.0,
      "pass@10": 0.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}