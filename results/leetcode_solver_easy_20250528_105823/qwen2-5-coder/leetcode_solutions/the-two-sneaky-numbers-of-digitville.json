{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
  "passed_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n        \n        for num, cnt in count.items():\n            if cnt == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers"
  ],
  "all_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n        \n        for num, cnt in count.items():\n            if cnt == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers"
  ],
  "total_candidates": 4,
  "nodes_explored": 4,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "f61386e2e4cd26900ab687c5a01d0bd244f2db238b9854e2e265ceceffddbd21",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpqk4y9e9l.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/22242031/tmpqk4y9e9l.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpqk4y9e9l.py` failed. (See above for error)\n",
        "execution_time": 13.509381532669067,
        "failed_tests": [
          {
            "input": "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]",
            "expected": "[5, 4]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpqk4y9e9l.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/22242031/tmpqk4y9e9l.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpqk4y9e9l.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_2",
        "1_3"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 4,
    "candidates_generated": 4,
    "tests_passed": 3,
    "tests_failed": 1,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.509381532669067,
      13.500804424285889,
      13.500804424285889,
      13.510708332061768
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 3,
      "unique_ratio": 0.75,
      "similarity_score": 0.9128092630268103,
      "solution_lengths": {
        "min": 293,
        "max": 355,
        "avg": 313.75
      },
      "algorithm_approaches": {
        "hash_table": 4
      },
      "feature_diversity": 0.75,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_list": {
            "true_ratio": 0.5,
            "count": 2
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.75,
            "count": 3
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 2,
            "avg": 1.75,
            "variance": 0.1875
          },
          "if_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 0,
            "max": 0,
            "avg": 0.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 4,
            "max": 4,
            "avg": 4.0,
            "variance": 0.0
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 10,
            "max": 13,
            "avg": 11.0,
            "variance": 1.5
          },
          "char_count": {
            "min": 293,
            "max": 355,
            "avg": 313.75,
            "variance": 640.6875
          },
          "max_indent": {
            "min": 12,
            "max": 16,
            "avg": 14.0,
            "variance": 4.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 4
        },
        "avg_complexity_metrics": {
          "avg_line_count": 11.0,
          "avg_loop_count": 1.75,
          "avg_condition_count": 1.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 4.0,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.25
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]": 1
      },
      "first_failing_tests": {
        "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 3
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 1,
          "improvements": 3
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->unknown": 3
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 1,
        "avg_depth": 0.75,
        "solutions_per_depth": {
          "0": 1,
          "1": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 3
        }
      },
      "pass_at_k": {
        "pass@1": 0.8,
        "pass@3": 1.0,
        "pass@5": 1.0
      },
      "solutions_evaluated": 5,
      "passing_solution_depths": {
        "min": 1,
        "max": 1,
        "avg": 1.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.75,
        "branch_success_rate": 0.75,
        "test_success_rate": 0.75
      },
      "test_results": {
        "total": 4,
        "passed": 3,
        "failed": 1,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 1,
        "total_improvements": 3,
        "recovery_rate": 3.0
      },
      "top_errors": [
        [
          "assertion_failure",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 111.16617250442505,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.8,
      "pass@3": 1.0,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ]
      ]
    },
    "solutions_evaluated": 5,
    "test_cases": 1
  }
}