{
  "problem_id": "smallest-divisible-digit-product-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0 or (prod % t == 0):\n                return current\n            current += 1",
  "passed_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            has_zero = False\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    has_zero = True\n                    break\n                product *= digit\n                num //= 10\n            return product, has_zero\n        \n        current = n\n        while True:\n            prod, has_zero = digit_product(current)\n            if has_zero or (prod != 0 and prod % t == 0):\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0 or (prod % t == 0):\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            p = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                p *= digit\n                num //= 10\n            return p\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1"
  ],
  "all_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod != 0 and prod % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            has_zero = False\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    has_zero = True\n                    break\n                product *= digit\n                num //= 10\n            return 0 if has_zero else product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if has_zero or (prod != 0 and prod % t == 0):\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            has_zero = False\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    has_zero = True\n                    break\n                product *= digit\n                num //= 10\n            return product, has_zero\n        \n        current = n\n        while True:\n            prod, has_zero = digit_product(current)\n            if has_zero or (prod != 0 and prod % t == 0):\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0 or (prod % t == 0):\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            p = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                p *= digit\n                num //= 10\n            return p\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1"
  ],
  "total_candidates": 5,
  "nodes_explored": 5,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod != 0 and prod % t == 0:\n                return current\n            current += 1",
      "solution_hash": "03816eee1d0454b7f648489e46c1a696c2a8ecaa54ce5e1018258b166a053f6c",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpbpzln70_.py\", line 230, in <module>\n    check(Solution().smallestNumber)\n  File \"/scratch/local/22242031/tmpbpzln70_.py\", line 102, in check\n    assert candidate(n = 30,t = 5) == 30\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpbpzln70_.py` failed. (See above for error)\n",
        "execution_time": 13.9195556640625,
        "failed_tests": [
          {
            "input": "n = 30,t = 5",
            "expected": "30",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242031/tmpbpzln70_.py\", line 230, in <module>\n    check(Solution().smallestNumber)\n  File \"/scratch/local/22242031/tmpbpzln70_.py\", line 102, in check\n    assert candidate(n = 30,t = 5) == 30\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmpbpzln70_.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 5,
    "candidates_generated": 5,
    "tests_passed": 3,
    "tests_failed": 2,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.9195556640625,
      13.837215185165405,
      13.969045877456665,
      13.887579679489136,
      13.89045262336731
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 1.0,
      "similarity_score": 0.9535277013931346,
      "solution_lengths": {
        "min": 490,
        "max": 618,
        "avg": 554.0
      },
      "algorithm_approaches": {
        "other": 5
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 5
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 5
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 2,
            "max": 3,
            "avg": 2.2,
            "variance": 0.15999999999999998
          },
          "else_count": {
            "min": 0,
            "max": 1,
            "avg": 0.2,
            "variance": 0.16000000000000006
          },
          "return_count": {
            "min": 2,
            "max": 3,
            "avg": 2.6,
            "variance": 0.24
          },
          "assignment_count": {
            "min": 9,
            "max": 12,
            "avg": 10.6,
            "variance": 1.44
          },
          "class_method_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 18,
            "max": 20,
            "avg": 18.8,
            "variance": 0.9600000000000002
          },
          "char_count": {
            "min": 490,
            "max": 618,
            "avg": 554.0,
            "variance": 2829.2
          },
          "max_indent": {
            "min": 20,
            "max": 20,
            "avg": 20.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 5
        },
        "avg_complexity_metrics": {
          "avg_line_count": 18.8,
          "avg_loop_count": 2.0,
          "avg_condition_count": 2.4,
          "avg_method_count": 2.0,
          "avg_assignment_count": 10.6,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.2
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "n = 30,t = 5": 2
      },
      "first_failing_tests": {
        "n = 30,t = 5": 2
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 3,
          "improvements": 0,
          "solved": 3
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 1,
          "improvements": 0
        },
        "name_error": {
          "attempts": 1,
          "improvements": 3
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->name_error": 1,
        "name_error->unknown": 3
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.4,
        "solutions_per_depth": {
          "0": 1,
          "1": 1,
          "2": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 3
        }
      },
      "pass_at_k": {
        "pass@1": 0.6666666666666666,
        "pass@3": 1.0,
        "pass@5": 1.0
      },
      "solutions_evaluated": 6,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.6,
        "branch_success_rate": 0.6,
        "test_success_rate": 0.6
      },
      "test_results": {
        "total": 5,
        "passed": 3,
        "failed": 2,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 2,
        "total_improvements": 3,
        "recovery_rate": 1.5
      },
      "top_errors": [
        [
          "assertion_failure",
          1
        ],
        [
          "name_error",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "n = 30,t = 5",
          2
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 416.07446908950806,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.6666666666666666,
      "pass@3": 1.0,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'has_zero' is not defined",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 5
          }
        ]
      ]
    },
    "solutions_evaluated": 6,
    "test_cases": 1
  }
}