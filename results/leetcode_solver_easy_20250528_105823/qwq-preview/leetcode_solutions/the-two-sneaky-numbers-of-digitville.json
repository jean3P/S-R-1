{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count == 2:\n                result.append(num)\n        return result",
  "passed_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count == 2:\n                result.append(num)\n        return result"
  ],
  "all_solutions": [
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Calculate n based on the list length\n                freq = [0] * n     # Initialize frequency list with zeros\n\n                # Count the frequency of each number in nums\n                for num in nums:\n                    freq[num] += 1\n\n                # Collect numbers that appear twice\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Calculate n based on the list length\n        freq = [0] * n     # Initialize frequency list with zeros\n\n        # Count the frequency of each number in nums\n        for num in nums:\n            freq[num] += 1\n\n        # Collect numbers that appear twice\n        result = []\n        for i in range(n):\n            if freq[i] == 2:\n                result.append(i)\n\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Calculate n based on the list length\n                freq = [0] * n     # Initialize frequency list with zeros\n\n                # Count the frequency of each number in nums\n                for num in nums:\n                    freq[num] += 1\n\n                # Collect numbers that appear twice\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Calculate n based on the list length\n                freq = [0] * n     # Initialize frequency list with zeros\n\n                # Count the frequency of each number in nums\n                for num in nums:\n                    freq[num] += 1\n\n                # Collect numbers that appear more than once\n                result = []\n                for i in range(n):\n                    if freq[i] > 1:\n                        result.append(i)\n\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since there are two extra numbers\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] == 2:\n                result.append(i)\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since there are two extra numbers\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] == 2:\n                result.append(i)\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] == 2:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have been of length n\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] == 2:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Calculate n based on the length of nums\n        freq = [0] * n     # Initialize a frequency list of size n with zeros\n        for num in nums:\n            freq[num] += 1  # Increment the frequency of each number in nums\n        result = []\n        for i in range(n):\n            if freq[i] == 2:  # Check if the frequency of number i is 2\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Calculate n based on the length of nums\n        freq = [0] * n     # Initialize frequency array\n        for num in nums:\n            freq[num] += 1  # Count frequency of each number\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)  # Collect numbers that appear more than once\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n        freq = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "class Solution:\n\ndef getSneakyNumbers(self, nums: List[int]) -> List[int]:\n\nn = len(nums) - 2\n\nfreq = [0] * n\n\nfor num in nums:\n\nfreq[num] += 1\n\nresult = []\n\nfor i in range(n):\n\nif freq[i] > 1:\n\nresult.append(i)\n\nreturn result\n\nAnd the error was:\n\nIndentationError: unexpected indent\n\nThis seems like an indentation issue in the code. Maybe there was a mix of spaces and tabs, or incorrect indentation in the submitted code.\n\nBut in the code you provided, the indentation looks correct. So, perhaps the issue was elsewhere.\n\nHowever, assuming the indentation is fixed, this solution should work, because:\n\n- It calculates n correctly as len(nums) - 2.\n\n- It initializes a frequency array of size n with zeros.\n\n- It iterates through nums and counts the frequency of each number.\n\n- It collects numbers that appear more than once (frequency > 1).\n\n- Returns the list of such numbers.\n\nGiven that, this should solve the problem correctly, assuming that only two numbers appear twice and others appear once.\n\nBut since it failed due to indentation error, I need to make sure that the code is properly indented.\n\nAlso, I should consider if there are any other potential issues.\n\nWait, what if some numbers are missing or extra numbers are present? But according to the problem, nums contains numbers from 0 to n-1, with two numbers appearing twice.\n\nSo, all numbers from 0 to n-1 are present, but two of them appear twice.\n\nHence, the frequency approach should work.\n\nAlternatively, I could use a Counter from collections to count frequencies, but since n is small, a simple list for frequency counting is fine.\n\nAnother approach could be to use set operations. For example, calculate the sum of nums and subtract the sum of numbers from 0 to n-1, but since two numbers are repeated twice, it's a bit tricky.\n\nWait, in the standard \"find the duplicate number\" problem, where only one number is repeated, we can use XOR or mathematical sum differences. But here, two numbers are repeated, so it complicates things.\n\nFor example, if only one number was repeated, I could calculate the sum of nums minus the sum of numbers from 0 to n-1 to find the duplicate number. But with two repeated numbers, it's not straightforward.\n\nHence, the frequency array seems like the simplest and most straightforward approach.\n\nGiven that, I need to ensure that the code is correctly indented and submitted properly.\n\nAlternatively, I can write the solution using Counter from collections.\n\nfrom collections import Counter\n\nclass Solution:\n\ndef getSneakyNumbers(self, nums: List[int]) -> List[int]:\n\nn = len(nums) - 2\n\ncount = Counter(nums)\n\nresult = [num for num, freq in count.items() if freq > 1]\n\nreturn result\n\nThis should also work, and it might be more concise.\n\nBut since the problem allows only specific imports, and from typing import List is already there, I need to make sure that collections is allowed. Wait, in the starter code, it imports collections, so it should be fine.\n\nWait, looking back, the starter code imports various things, including from collections, but I need to check exactly what's imported.\n\nWait, in the starter code, it has:\n\nfrom collections import *\n\nSo, I can use Counter directly.\n\nHence, another solution could be:\n\nfrom typing import List\n\nfrom collections import Counter\n\nclass Solution:\n\ndef getSneakyNumbers(self, nums: List[int]) -> List[int]:\n\nn = len(nums) - 2\n\ncount = Counter(nums)\n\nresult = [num for num, freq in count.items() if freq > 1]\n\nreturn result\n\nBut since the frequency array approach is simple and doesn't require additional imports beyond what's already there, it's probably better to stick with that.\n\nAlternatively, I can use a set to track seen numbers. When I encounter a number that's already in the set, it's a duplicate.\n\nHere's how that could look:\n\nclass Solution:\n\ndef getSneakyNumbers(self, nums: List[int]) -> List[int]:\n\nseen = set()\n\nduplicates = []\n\nfor num in nums:\n\nif num in seen:\n\nduplicates.append(num)\n\nelse:\n\nseen.add(num)\n\nreturn duplicates\n\nBut this approach might not work correctly if there are numbers that appear more than twice, but according to the problem, only two numbers appear twice, and others appear once, so in practice, it should work.\n\nHowever, the problem guarantees that only two numbers appear twice, so this should suffice.\n\nBut the frequency approach is more general and handles cases where numbers appear more than twice, though that's not applicable here.\n\nGiven that, any of these approaches should work.\n\nBut considering the previous solution failed due to indentation error, perhaps I should stick with the frequency array approach and ensure proper indentation.\n\nAlternatively, I can combine sum differences to find the two duplicates.\n\nLet me think about that.\n\nIf I calculate the sum of nums and subtract the sum of numbers from 0 to n-1, I'll get the sum of the two duplicates since they are each counted twice instead of once.\n\nSimilarly, I can calculate the sum of squares of nums and subtract the sum of squares of numbers from 0 to n-1, which would give me the sum of squares of the two duplicates.\n\nThen, I can solve the system of equations to find the two duplicate numbers.\n\nLet me formalize this.\n\nLet the two duplicates be x and y.\n\nLet s1 = sum(nums) - sum(0 to n-1) = x + y\n\nLet s2 = sum(nums^2) - sum((0 to n-1)^2) = x^2 + y^2\n\nThen, I have two equations:\n\n1. x + y = s1\n\n2. x^2 + y^2 = s2\n\nFrom these, I can solve for x and y.\n\nI know that (x + y)^2 = x^2 + 2xy + y^2\n\nSo, x^2 + y^2 = (x + y)^2 - 2xy\n\nTherefore, s2 = s1^2 - 2xy\n\nHence, xy = (s1^2 - s2)/2\n\nNow, I have sum (x + y) = s1 and product xy = (s1^2 - s2)/2\n\nI can use the quadratic formula to find x and y.\n\nThe numbers x and y would be the roots of the equation t^2 - s1*t + xy = 0\n\nThis approach avoids using extra space and could be more efficient, but since n is small, efficiency isn't a concern.\n\nHowever, this approach might be more error-prone due to potential precision errors in calculations, but since we're dealing with integers and small n, it should be fine.\n\nLet me try this approach with the first example:\n\nnums = [0,1,1,0]\n\nsum(nums) = 2\n\nsum(0 to n-1) = sum(0 to 1) = 1\n\ns1 = 2 - 1 = 1\n\nsum(nums^2) = 0 + 1 + 1 + 0 = 2\n\nsum((0 to 1)^2) = 0 + 1 = 1\n\ns2 = 2 - 1 = 1\n\nThen, xy = (1^2 - 1)/2 = (1 - 1)/2 = 0\n\nSo, the quadratic equation is t^2 - t + 0 = 0\n\nWhich factors to t(t - 1) = 0\n\nHence, t = 0 or t = 1\n\nWhich matches the duplicates in the first example.\n\nAnother example:\n\nnums = [0,3,2,1,3,2]\n\nsum(nums) = 0 + 3 + 2 + 1 + 3 + 2 = 11\n\nn = 4 (since len(nums) = 6, n = 6 - 2 = 4)\n\nsum(0 to 3) = 6\n\ns1 = 11 - 6 = 5\n\nsum(nums^2) = 0 + 9 + 4 + 1 + 9 + 4 = 31\n\nsum(0^2 to 3^2) = 0 + 1 + 4 + 9 = 14\n\ns2 = 31 - 14 = 17\n\nxy = (25 - 17)/2 = 8/2 = 4\n\nQuadratic equation: t^2 - 5t + 4 = 0\n\n(t - 1)(t - 4) = 0\n\nt = 1 or t = 4\n\nBut n = 4, and the duplicates are 2 and 3, which don't match.\n\nWait, there must be a mistake here.\n\nWait, in this example, nums = [0,3,2,1,3,2], n = 4, numbers are from 0 to 3.\n\nDuplicates are 2 and 3, which appear twice.\n\nsum(nums) = 0 + 3 + 2 + 1 + 3 + 2 = 11\n\nsum(0 to 3) = 6\n\ns1 = 11 - 6 = 5\n\nsum(nums^2) = 0 + 9 + 4 + 1 + 9 + 4 = 31\n\nsum(0^2 to 3^2) = 0 + 1 + 4 + 9 = 14\n\ns2 = 31 - 14 = 17\n\nxy = (25 - 17)/2 = 8/2 = 4\n\nQuadratic equation: t^2 - 5t + 4 = 0\n\nRoots: t = 1 and t = 4\n\nBut 4 is not in the range 0 to 3, which suggests an error in this approach.\n\nWait, the problem states that numbers are from 0 to n-1, and nums may contain only those numbers with two duplicates.\n\nIn this case, the duplicates are 2 and 3, but the quadratic approach gave me 1 and 4, which are not both duplicates.\n\nSo, there's a mistake here.\n\nWait, perhaps I need to consider that the sum difference gives me the sum of the duplicates minus the sum of the missing numbers, but in this case, there are no missing numbers since all numbers from 0 to n-1 are present, just two are repeated.\n\nWait, no, the problem says that each number from 0 to n-1 is supposed to appear once, but two numbers appear twice, making the list length n+2.\n\nHence, no numbers are missing; only two are duplicated.\n\nSo, the sum difference should indeed be the sum of the two duplicates.\n\nSimilarly, the sum of squares should be the sum of squares of the two duplicates.\n\nWait, in the second example, s1 = 5, which is 2 + 3 = 5, and s2 = 17, which is 4 + 9 = 13, but 2 + 3 = 5, and 4 + 9 = 13, so s2 = 13 - 0 = 13, but I have 17, which is incorrect.\n\nWait, perhaps I'm miscalculating.\n\nWait, sum of squares of nums: 0 + 9 + 4 + 1 + 9 + 4 = 31\n\nsum of squares from 0 to 3: 0 + 1 + 4 + 9 = 14\n\ns2 = 31 - 14 = 17\n\nBut 2 and 3 squared are 4 and 9, sum is 13.\n\nSo, s2 should be sum of squares of duplicates, which is 4 + 9 = 13, but actually s2 is 17.\n\nWait, no, s2 is sum of squares of all nums minus sum of squares from 0 to n-1, which should be sum of squares of duplicates.\n\nWait, but in this case, the duplicates are 2 and 3, each appearing twice, but the sum of squares accounts for all occurrences.\n\nWait, no, each duplicate is counted twice in the sum of squares.\n\nWait, let's think differently.\n\nsum(nums) = sum of numbers from 0 to n-1 plus sum of the two duplicates.\n\nsum(nums) = sum(0 to n-1) + x + y\n\nHence, sum(nums) - sum(0 to n-1) = x + y\n\nSimilarly, sum of squares of nums = sum of squares from 0 to n-1 plus x^2 + y^2\n\nHence, sum of squares of nums - sum of squares from 0 to n-1 = x^2 + y^2\n\nSo, s1 = x + y\n\ns2 = x^2 + y^2\n\nFrom these, I can find x and y.\n\nBut in the second example, s1 = 5, s2 = 17\n\nBut x + y = 5, x^2 + y^2 = 17\n\nThen, (x + y)^2 = x^2 + 2xy + y^2 => 25 = 17 + 2xy => 2xy = 8 => xy = 4\n\nThen, x and y are roots of t^2 - 5t + 4 = 0, which are t = 1 and t = 4\n\nBut the duplicates are 2 and 3, not 1 and 4.\n\nSo, there's an inconsistency here.\n\nWait, perhaps I miscalculated sum of squares.\n\nWait, in the second example:\n\nnums = [0,3,2,1,3,2]\n\nsum(nums) = 0 + 3 + 2 + 1 + 3 + 2 = 11\n\nsum(0 to 3) = 0 + 1 + 2 + 3 = 6\n\ns1 = 11 - 6 = 5\n\nsum squares nums = 0 + 9 + 4 + 1 + 9 + 4 = 31\n\nsum squares 0 to 3 = 0 + 1 + 4 + 9 = 14\n\ns2 = 31 - 14 = 17\n\nThen, x + y = 5\n\nx^2 + y^2 = 17\n\nThen, (x + y)^2 = x^2 + 2xy + y^2 => 25 = 17 + 2xy => 2xy = 8 => xy = 4\n\nThen, quadratic equation: t^2 - 5t + 4 = 0 => t = 1 or t = 4\n\nBut duplicates are 2 and 3, which don't match.\n\nSo, this approach is flawed.\n\nWait, perhaps I need to consider that the duplicates are counted twice in the sum, but in reality, they are present twice, so their contributions are already included in the sum.\n\nWait, maybe I need to think differently.\n\nLet me try to calculate sum of duplicates.\n\nsum(nums) = sum(0 to n-1) + x + y\n\nBecause x and y are each counted twice instead of once.\n\nHence, sum(nums) - sum(0 to n-1) = x + y\n\nSimilarly, sum of squares of nums = sum of squares from 0 to n-1 plus x^2 + y^2\n\nHence, sum of squares of nums - sum of squares from 0 to n-1 = x^2 + y^2\n\nSo, s1 = x + y\n\ns2 = x^2 + y^2\n\nFrom these, I can find x and y as roots of t^2 - s1*t + ((s1^2 - s2)/2) = 0\n\nBut in the second example,",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since there are two extra numbers\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Calculate n based on the length of nums\n        freq = [0] * n     # Initialize frequency list with zeros\n        for num in nums:\n            freq[num] += 1  # Count frequency of each number\n        result = []\n        for i in range(n):\n            if freq[i] > 1:  # Check if the number appears more than once\n                result.append(i)\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] > 1:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] > 1:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] > 1:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] > 1:\n                        result.append(i)\n                return result",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count == 2:\n                result.append(num)\n        return result"
  ],
  "total_candidates": 27,
  "nodes_explored": 27,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                freq = [0] * n\n                for num in nums:\n                    freq[num] += 1\n                result = []\n                for i in range(n):\n                    if freq[i] == 2:\n                        result.append(i)\n                return result",
      "solution_hash": "2c21b7c15b44808505c9f3869c67953512a43a11f93f12fdff03735c4469ff78",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/22242031/tmp74o1xh6f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp74o1xh6f.py` failed. (See above for error)\n",
        "execution_time": 13.874488830566406,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/22242031/tmp74o1xh6f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp74o1xh6f.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2\n        freq = [0] * n\n        for num in nums:\n            freq[num] += 1\n        result = []\n        for i in range(n):\n            if freq[i] > 1:\n                result.append(i)\n        return result",
      "solution_hash": "d60b4a2d04f6b96ccf58b7ff9d8096dfac9ccd684a978e48461e3eedc0642a98",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/22242031/tmp2oas7qck.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp2oas7qck.py` failed. (See above for error)\n",
        "execution_time": 13.893818616867065,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/22242031/tmp2oas7qck.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242031/tmp2oas7qck.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count == 2:\n                result.append(num)\n        return result",
      "solution_hash": "f2558cc8ea4d2ce55e0a76375895ccee583a69b0469eb7b03eb646e6a279e5a0",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.870194911956787,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 27,
    "candidates_generated": 27,
    "tests_passed": 1,
    "tests_failed": 26,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.893818616867065,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.874488830566406,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.862578630447388,
      13.893818616867065,
      13.833488702774048,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.893818616867065,
      13.870194911956787
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 0.18518518518518517,
      "similarity_score": 0.9375208040872114,
      "solution_lengths": {
        "min": 333,
        "max": 10968,
        "avg": 842.8518518518518
      },
      "algorithm_approaches": {
        "hash_table": 1,
        "other": 26
      },
      "feature_diversity": 0.6296296296296297,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 27
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 27
          },
          "uses_dict": {
            "true_ratio": 0.037037037037037035,
            "count": 1
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 27
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 5,
            "avg": 2.111111111111111,
            "variance": 0.3209876543209874
          },
          "if_count": {
            "min": 1,
            "max": 4,
            "avg": 1.1851851851851851,
            "variance": 0.37311385459533614
          },
          "else_count": {
            "min": 0,
            "max": 1,
            "avg": 0.037037037037037035,
            "variance": 0.03566529492455418
          },
          "return_count": {
            "min": 1,
            "max": 2,
            "avg": 1.037037037037037,
            "variance": 0.035665294924554176
          },
          "assignment_count": {
            "min": 4,
            "max": 64,
            "avg": 6.7407407407407405,
            "variance": 126.34019204389577
          },
          "class_method_count": {
            "min": 1,
            "max": 2,
            "avg": 1.037037037037037,
            "variance": 0.035665294924554176
          },
          "line_count": {
            "min": 13,
            "max": 391,
            "avg": 27.77777777777778,
            "variance": 5077.358024691358
          },
          "char_count": {
            "min": 333,
            "max": 10968,
            "avg": 842.8518518518518,
            "variance": 3949851.3113854597
          },
          "max_indent": {
            "min": 0,
            "max": 24,
            "avg": 18.666666666666668,
            "variance": 28.44444444444445
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 27
        },
        "avg_complexity_metrics": {
          "avg_line_count": 27.77777777777778,
          "avg_loop_count": 2.111111111111111,
          "avg_condition_count": 1.2222222222222223,
          "avg_method_count": 1.037037037037037,
          "avg_assignment_count": 6.7407407407407405,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [5, 5, 3, 2, 1, 4, 0]": 1
      },
      "first_failing_tests": {
        "nums = [5, 5, 3, 2, 1, 4, 0]": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 18,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "other_error": {
          "attempts": 8,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "other_error->other_error": 23,
        "other_error->assertion_failure": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5555555555555556,
        "solutions_per_depth": {
          "0": 3,
          "1": 6,
          "2": 18
        },
        "passing_solutions_per_depth": {
          "0": 1,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.0714285714285714,
        "pass@3": 0.2063492063492064,
        "pass@5": 0.3306878306878307,
        "pass@10": 0.5952380952380953
      },
      "solutions_evaluated": 28,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.037037037037037035,
        "branch_success_rate": 0.037037037037037035,
        "test_success_rate": 0.037037037037037035
      },
      "test_results": {
        "total": 27,
        "passed": 1,
        "failed": 26,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 8,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "other_error",
          8
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [5, 5, 3, 2, 1, 4, 0]",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 729.4438116550446,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.0714285714285714,
      "pass@3": 0.2063492063492064,
      "pass@5": 0.3306878306878307,
      "pass@10": 0.5952380952380953
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: expected an indented block (<string>, line 97)",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 27
          }
        ]
      ]
    },
    "solutions_evaluated": 28,
    "test_cases": 1
  }
}