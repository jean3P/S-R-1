{
  "problem_id": "shortest-distance-after-road-addition-queries-ii",
  "problem_title": "",
  "difficulty": "Hard",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        # Process each query and compute the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path calculation\n        dist = dijkstra()\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path considering the new edge\n            pq = [(dist[u] + 1, v)]  # New edge (u, v) with weight 1\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited and d + weight < dist[neighbor]:\n                        heappush(pq, (d + weight, neighbor))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Recalculate shortest paths after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recalculate the shortest path from 0 to n-1 after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path considering the new edge\n            pq = [(dist[u] + 1, v)]  # (new distance, node)\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path considering the new edge\n            pq = [(dist[u] + 1, v)]  # (new distance, node)\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Re-run Dijkstra's algorithm after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Process each query and update the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute the shortest path after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update distances starting from u\n            pq = [(dist[u] + 1, v)]\n            while pq:\n                d, node = heappop(pq)\n                if d >= dist[node]:\n                    continue\n                dist[node] = d\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        # Process each query and compute the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Use a set to track visited nodes\n            visited = set()\n            pq = [(dist[u] + 1, v)]\n            while pq:\n                d, node = heappop(pq)\n                if d >= dist[node] or node in visited:\n                    continue\n                dist[node] = d\n                visited.add(node)\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra(start, end):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[end]\n        \n        # Initial shortest path distance\n        current_shortest = dijkstra(0, n - 1)\n        result = [current_shortest]\n        \n        # Process each query and compute the shortest path\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recalculate the shortest path from 0 to n-1\n            current_shortest = dijkstra(0, n - 1)\n            result.append(current_shortest)\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Step 1: Preprocess the shortest paths in reverse order\n        reverse_graph = defaultdict(list)\n        for i in range(n - 1):\n            reverse_graph[i + 1].append(i)\n        \n        # Add reverse edges from queries\n        for u, v in queries:\n            reverse_graph[v].append(u)\n        \n        # Perform Dijkstra's from the end node to get shortest paths in reverse\n        dist_from_end = [float('inf')] * n\n        dist_from_end[n - 1] = 0\n        pq = [(0, n - 1)]\n        while pq:\n            d, u = heappop(pq)\n            if d > dist_from_end[u]:\n                continue\n            for v in reverse_graph[u]:\n                if dist_from_end[u] + 1 < dist_from_end[v]:\n                    dist_from_end[v] = dist_from_end[u] + 1\n                    heappush(pq, (dist_from_end[v], v))\n        \n        # Step 2: Process each query and compute the shortest path\n        result = []\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update distances starting from u using the precomputed reverse distances\n            pq = [(dist[u] + 1 + dist_from_end[v], v)]\n            while pq:\n                d, node = heappop(pq)\n                if d >= dist[node]:\n                    continue\n                dist[node] = d\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra(start, end):\n            dist = [inf] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            result.append(dijkstra(0, n - 1))  # Find the shortest path from 0 to n-1\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update the shortest paths affected by the new road\n            pq = [(dist[u] + 1, v)]  # Start with the new edge\n            while pq:\n                current_dist, node = heappop(pq)\n                if current_dist >= dist[node]:\n                    continue\n                dist[node] = current_dist\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            \n            result.append(dist[n - 1])  # Append the shortest path to the last node\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the reverse graph\n        reverse_graph = defaultdict(list)\n        for i in range(1, n):\n            reverse_graph[i].append(i - 1)\n        \n        # Function to perform Dijkstra's algorithm on the reverse graph\n        def dijkstra_reverse(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v in reverse_graph[u]:\n                    distance = current_dist + 1\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        # Initial shortest path distances from n-1 to 0\n        dist_from_end = dijkstra_reverse(n - 1)\n        \n        result = []\n        for u, v in queries:\n            reverse_graph[v].append(u)  # Add the new road in reverse direction\n            \n            # Update the shortest paths affected by the new road\n            pq = [(dist_from_end[v] + 1, u)]  # Start with the new edge\n            while pq:\n                current_dist, node = heappop(pq)\n                if current_dist >= dist_from_end[node]:\n                    continue\n                dist_from_end[node] = current_dist\n                for neighbor in reverse_graph[node]:\n                    if dist_from_end[node] + 1 < dist_from_end[neighbor]:\n                        heappush(pq, (dist_from_end[node] + 1, neighbor))\n            \n            result.append(dist_from_end[0] if dist_from_end[0] != float('inf') else -1)\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths from scratch\n            result.append(dist[n - 1])  # Append the shortest path to the last node\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Use a priority queue to update the shortest paths\n            pq = [(dist[u] + 1, v)]  # Start with the new edge\n            visited = set()\n            while pq:\n                current_dist, node = heappop(pq)\n                if node in visited or current_dist >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = current_dist\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            \n            result.append(dist[n - 1])  # Append the shortest path to the last node\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Precompute shortest paths from 0 to all nodes initially\n        def dijkstra(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra(0)\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Relax the path through the new edge\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                # Update distances for nodes reachable from v\n                pq = [(dist[v], v)]\n                visited = set()\n                while pq:\n                    current_dist, node = heappop(pq)\n                    if node in visited:\n                        continue\n                    visited.add(node)\n                    for neighbor, weight in graph[node]:\n                        if current_dist + weight < dist[neighbor]:\n                            dist[neighbor] = current_dist + weight\n                            heappush(pq, (dist[neighbor], neighbor))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to compute shortest paths from start using Dijkstra's algorithm\n        def dijkstra(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra(0)  # Recompute shortest paths from 0\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to compute shortest paths from 0 to all nodes using Dijkstra's algorithm\n        def dijkstra(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra(0)  # Recalculate shortest paths from 0\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to compute shortest paths from start using Dijkstra's algorithm\n        def dijkstra(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra(0)  # Recompute shortest paths from 0\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            \n            # Update the shortest path only for nodes affected by the new edge\n            pq = [(dist[u] + 1, v)]  # Start from the new edge\n            visited = set()\n            while pq:\n                current_dist, node = heappop(pq)\n                if node in visited or current_dist >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = current_dist\n                if node == n - 1:\n                    break\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (current_dist + weight, neighbor))\n            \n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths after adding the new road\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recompute shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            dist = dijkstra()  # Recalculate shortest paths\n            result.append(dist[n - 1])\n        \n        return result",
    "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest paths starting from u\n            pq = [(dist[u] + 1, v)]\n            while pq:\n                d, node = heappop(pq)\n                if d >= dist[node]:\n                    continue\n                dist[node] = d\n                for neighbor, weight in graph[node]:\n                    if dist[node] + weight < dist[neighbor]:\n                        heappush(pq, (dist[node] + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Recompute shortest paths after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()  # Recompute shortest paths after each query\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute the shortest paths after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        result = []\n        \n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update the shortest path only for nodes affected by the new edge\n            pq = [(dist[u] + 1, v)]\n            visited = set()\n            while pq:\n                d, node = heappop(pq)\n                if node in visited or d >= dist[node]:\n                    continue\n                visited.add(node)\n                dist[node] = d\n                for neighbor, weight in graph[node]:\n                    if neighbor not in visited:\n                        heappush(pq, (d + weight, neighbor))\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        \n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute the shortest path after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path distances\n        dist = dijkstra()\n        result = []\n        \n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Re-run Dijkstra's algorithm to update shortest paths after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        \n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute the shortest path after adding the new edge\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from a given node\n        def dijkstra(start, dist):\n            pq = [(0, start)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n        \n        # Initial shortest path calculation\n        dist = [float('inf')] * n\n        dist[0] = 0\n        dijkstra(0, dist)\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Update shortest paths starting from the newly added edge\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                dijkstra(v, dist)\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from a given node\n        def dijkstra(start):\n            dist = [float('inf')] * n\n            dist[start] = 0\n            pq = [(0, start)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # Recompute shortest paths from start node after each query\n            dist = dijkstra(0)\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from a given node\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            dist = dijkstra()\n            result.append(dist[n - 1])\n        \n        return result",
    "from collections import defaultdict\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm starting from node 0\n        def dijkstra():\n            dist = [float('inf')] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist\n        \n        # Initial shortest path calculation\n        dist = dijkstra()\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            # If the new edge provides a shorter path to v, update the distances\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                # Use a priority queue to update the shortest paths from v\n                pq = [(dist[v], v)]\n                while pq:\n                    d, u = heappop(pq)\n                    if d > dist[u]:\n                        continue\n                    for v, weight in graph[u]:\n                        if dist[u] + weight < dist[v]:\n                            dist[v] = dist[u] + weight\n                            heappush(pq, (dist[v], v))\n            result.append(dist[n - 1])\n        \n        return result"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, w in graph[u]:\n                    if dist[u] + w < dist[v]:\n                        dist[v] = dist[u] + w\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        # Process each query and compute the shortest path\n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
      "solution_hash": "9250294676337d72354d743ed11fb79232d648cb0f33784988f04d94414f2bcb",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmpxvihs70v.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmpxvihs70v.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmpxvihs70v.py` failed. (See above for error)\n",
        "execution_time": 19.917741060256958,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmpxvihs70v.py\", line 156, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmpxvihs70v.py\", line 116, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmpxvihs70v.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra(start, end):\n            dist = [inf] * n\n            dist[start] = 0\n            pq = [(0, start)]\n            while pq:\n                current_dist, u = heappop(pq)\n                if u == end:\n                    return current_dist\n                if current_dist > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    distance = current_dist + weight\n                    if distance < dist[v]:\n                        dist[v] = distance\n                        heappush(pq, (distance, v))\n            return dist[end]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))  # Add the new road\n            result.append(dijkstra(0, n - 1))  # Find the shortest path from 0 to n-1\n        \n        return result",
      "solution_hash": "59ea10002f6f0524e5d05e7887cd36f0508ba2110106e8b2b93112c63103ca94",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmpwn0ik20_.py\", line 158, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmpwn0ik20_.py\", line 118, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmpwn0ik20_.py` failed. (See above for error)\n",
        "execution_time": 14.278398990631104,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmpwn0ik20_.py\", line 158, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmpwn0ik20_.py\", line 118, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmpwn0ik20_.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from heapq import heappush, heappop\n        \n        # Initialize the graph with the default roads\n        graph = defaultdict(list)\n        for i in range(n - 1):\n            graph[i].append((i + 1, 1))\n        \n        # Function to perform Dijkstra's algorithm\n        def dijkstra():\n            dist = [inf] * n\n            dist[0] = 0\n            pq = [(0, 0)]  # (distance, node)\n            while pq:\n                d, u = heappop(pq)\n                if d > dist[u]:\n                    continue\n                for v, weight in graph[u]:\n                    if dist[u] + weight < dist[v]:\n                        dist[v] = dist[u] + weight\n                        heappush(pq, (dist[v], v))\n            return dist[n - 1]\n        \n        result = []\n        for u, v in queries:\n            graph[u].append((v, 1))\n            result.append(dijkstra())\n        \n        return result",
      "solution_hash": "3a7d140ea5b039431ba5484555c882a6c0d64c93f0c11d18e7a4b466f542fc78",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmps6ly_9mk.py\", line 155, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmps6ly_9mk.py\", line 115, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmps6ly_9mk.py` failed. (See above for error)\n",
        "execution_time": 17.180902242660522,
        "failed_tests": [
          {
            "input": "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
            "expected": "[3, 2, 2, 1]",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/21926555/tmps6ly_9mk.py\", line 155, in <module>\n    check(Solution().shortestDistanceAfterQueries)\n  File \"/scratch/local/21926555/tmps6ly_9mk.py\", line 115, in check\n    assert candidate(n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]) == [3, 2, 2, 1]\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/21926555/tmps6ly_9mk.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 39,
    "test_errors": 0,
    "execution_times": [
      19.917741060256958,
      14.369543075561523,
      14.923708200454712,
      14.923708200454712,
      14.923708200454712,
      15.872347831726074,
      17.2387855052948,
      14.923708200454712,
      14.923708200454712,
      13.881771326065063,
      16.18094754219055,
      14.72737193107605,
      13.643993854522705,
      14.278398990631104,
      16.1222403049469,
      17.537322282791138,
      17.46157479286194,
      18.357402563095093,
      17.422518968582153,
      15.603954076766968,
      15.603954076766968,
      15.603954076766968,
      16.428797006607056,
      17.46157479286194,
      17.46157479286194,
      17.46157479286194,
      17.180902242660522,
      15.899784564971924,
      15.647046327590942,
      15.647046327590942,
      15.647046327590942,
      15.458441019058228,
      15.647046327590942,
      15.680277824401855,
      15.647046327590942,
      15.384516477584839,
      18.960675954818726,
      15.647046327590942,
      17.41814160346985
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 25,
      "unique_ratio": 0.6410256410256411,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 1009,
        "max": 2438,
        "avg": 1407.128205128205
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]": 37,
        "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]": 2
      },
      "first_failing_tests": {
        "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]": 37,
        "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]": 2
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 12,
          "improvements": 0
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 36
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.025000000000000022,
        "pass@3": 0.07499999999999996,
        "pass@5": 0.125,
        "pass@10": 0.25
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 0,
        "recovery_rate": 0.0
      },
      "top_errors": [
        [
          "assertion_failure",
          12
        ]
      ],
      "hardest_test_cases": [
        [
          "n = 8,queries = [[2, 7], [0, 2], [4, 6], [0, 4]]",
          37
        ],
        [
          "n = 7,queries = [[3, 6], [1, 3], [0, 1], [0, 6]]",
          2
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1668.4133801460266,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.025000000000000022,
      "pass@3": 0.07499999999999996,
      "pass@5": 0.125,
      "pass@10": 0.25
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}