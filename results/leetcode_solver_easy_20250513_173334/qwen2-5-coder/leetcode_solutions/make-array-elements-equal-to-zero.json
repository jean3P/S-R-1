{
  "problem_id": "make-array-elements-equal-to-zero",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def can_make_zero(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if can_make_zero(i, 1):  # Try moving right\n                    valid_selections += 1\n                if can_make_zero(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
  "passed_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def can_make_zero(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if can_make_zero(i, 1):  # Try moving right\n                    valid_selections += 1\n                if can_make_zero(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections"
  ],
  "all_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def can_make_zero(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if can_make_zero(i, 1):  # Try moving right\n                    valid_selections += 1\n                if can_make_zero(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def can_make_zero(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if can_make_zero(i, 1):  # Try moving right\n                    valid_selections += 1\n                if can_make_zero(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
      "solution_hash": "c3b1f557ca923c120fe7297df7ef7fa891f6226960acbf51dcb2b5cb7b5af069",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08471345901489258
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
      "solution_hash": "b9ebf49f0e0b767db0d824f837115fabb6e91f06f8840d5dcbcaeed35b266ef9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08883905410766602
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        def simulate(start, direction):\n            nums_copy = nums[:]\n            curr = start\n            while 0 <= curr < len(nums_copy):\n                if nums_copy[curr] == 0:\n                    curr += direction\n                else:\n                    nums_copy[curr] -= 1\n                    direction *= -1\n                    curr += direction\n            return all(x == 0 for x in nums_copy)\n        \n        valid_selections = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                if simulate(i, 1):  # Try moving right\n                    valid_selections += 1\n                if simulate(i, -1): # Try moving left\n                    valid_selections += 1\n        return valid_selections",
      "solution_hash": "b9ebf49f0e0b767db0d824f837115fabb6e91f06f8840d5dcbcaeed35b266ef9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08794784545898438
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 48.74763321876526,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}