{
  "problem_id": "find-the-key-of-the-numbers",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits long\n        str_num1 = str(num1).zfill(4)\n        str_num2 = str(num2).zfill(4)\n        str_num3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Compare each digit and build the key\n        for i in range(4):\n            key_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            key += key_digit\n        \n        # Convert the key back to an integer to remove leading zeros\n        return int(key)",
  "passed_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits long\n        str_num1 = str(num1).zfill(4)\n        str_num2 = str(num2).zfill(4)\n        str_num3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Compare each digit and build the key\n        for i in range(4):\n            key_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            key += key_digit\n        \n        # Convert the key back to an integer to remove leading zeros\n        return int(key)",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Generate the key by taking the minimum digit at each position\n        key_digits = [\n            min(str_num1[i], str_num2[i], str_num3[i]) for i in range(4)\n        ]\n        \n        # Join the digits to form the key and convert to integer to remove leading zeros\n        key = int(''.join(key_digits))\n        \n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the minimum digit at the current position\n            min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            # Append the minimum digit to the key\n            key += min_digit\n        \n        # Convert the key to an integer to remove leading zeros\n        return int(key)"
  ],
  "all_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits long\n        str_num1 = str(num1).zfill(4)\n        str_num2 = str(num2).zfill(4)\n        str_num3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Compare each digit and build the key\n        for i in range(4):\n            key_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            key += key_digit\n        \n        # Convert the key back to an integer to remove leading zeros\n        return int(key)",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Generate the key by taking the minimum digit at each position\n        key_digits = [\n            min(str_num1[i], str_num2[i], str_num3[i]) for i in range(4)\n        ]\n        \n        # Join the digits to form the key and convert to integer to remove leading zeros\n        key = int(''.join(key_digits))\n        \n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the minimum digit at the current position\n            min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            # Append the minimum digit to the key\n            key += min_digit\n        \n        # Convert the key to an integer to remove leading zeros\n        return int(key)"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits long\n        str_num1 = str(num1).zfill(4)\n        str_num2 = str(num2).zfill(4)\n        str_num3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Compare each digit and build the key\n        for i in range(4):\n            key_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            key += key_digit\n        \n        # Convert the key back to an integer to remove leading zeros\n        return int(key)",
      "solution_hash": "3b16a06b145451ce8409f572da1a68e3c4a2337b398c0da47d75fa4dcea7707c",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06724786758422852
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Generate the key by taking the minimum digit at each position\n        key_digits = [\n            min(str_num1[i], str_num2[i], str_num3[i]) for i in range(4)\n        ]\n        \n        # Join the digits to form the key and convert to integer to remove leading zeros\n        key = int(''.join(key_digits))\n        \n        return key",
      "solution_hash": "160ef53810f97986423cf411f27c3a62d6c9e07d774179ef6e8471bc85d07852",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07079458236694336
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to four-digit strings with leading zeros\n        str_num1 = f\"{num1:04}\"\n        str_num2 = f\"{num2:04}\"\n        str_num3 = f\"{num3:04}\"\n        \n        # Initialize the key as an empty string\n        key = \"\"\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the minimum digit at the current position\n            min_digit = min(str_num1[i], str_num2[i], str_num3[i])\n            # Append the minimum digit to the key\n            key += min_digit\n        \n        # Convert the key to an integer to remove leading zeros\n        return int(key)",
      "solution_hash": "0efa738805266763a74fd88fe5d741b7d035e36e50cd0b8f38a60f823dd5bffb",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07076716423034668
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 43.40222764015198,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}