{
  "problem_id": "check-balanced-string",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
  "passed_solutions": [
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum"
  ],
  "all_solutions": [
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
    "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
      "solution_hash": "d0e2c8c91b6287ff4cf4cc2e59bf0cf6b43333f0359caada94016abd34d33f01",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0677950382232666
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
      "solution_hash": "d0e2c8c91b6287ff4cf4cc2e59bf0cf6b43333f0359caada94016abd34d33f01",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0717020034790039
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def isBalanced(self, num: str) -> bool:\n        even_sum = 0\n        odd_sum = 0\n        for i, digit in enumerate(num):\n            if i % 2 == 0:\n                even_sum += int(digit)\n            else:\n                odd_sum += int(digit)\n        return even_sum == odd_sum",
      "solution_hash": "d0e2c8c91b6287ff4cf4cc2e59bf0cf6b43333f0359caada94016abd34d33f01",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07034921646118164
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 29.443125009536743,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}