{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
  "passed_solutions": [
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        for num, cnt in count.items():\n            if cnt == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers"
  ],
  "all_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n                if len(sneaky_numbers) == 2:\n                    break\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = set()\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.add(num)\n            else:\n                seen.add(num)\n        \n        return list(sneaky_numbers)",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        for num, cnt in count.items():\n            if cnt == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 2,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "f61386e2e4cd26900ab687c5a01d0bd244f2db238b9854e2e265ceceffddbd21",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp6udu_gvd.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp6udu_gvd.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.06988763809204102
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_1",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_2",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_3",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_4",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_5",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_6",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_7",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_8",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_9",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_10",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "ec5c43b8bfac6f1a1a0433cec40b8052ca4e5f0159d2f768d4d7660f34976dd4",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 102, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.0717003345489502
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_11",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n                if len(sneaky_numbers) == 2:\n                    break\n        \n        return sneaky_numbers",
              "solution_hash": "4352f2ee2094ce6ed89b4890c4e29bd17a620e69b8b41a6b9dbe8cd66705b537",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpan7fy4z7.py\", line 178, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpan7fy4z7.py\", line 101, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07172155380249023
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_12",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "f61386e2e4cd26900ab687c5a01d0bd244f2db238b9854e2e265ceceffddbd21",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpdrcu2i0c.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpdrcu2i0c.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.07718276977539062
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_14",
          "solution": "from collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "6676fd5541cc6e005079fa999459ebc10b8b1df1e82d08e264b6102259d4961d",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpbibt1p9i.py\", line 175, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpbibt1p9i.py\", line 98, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07039093971252441
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_15",
              "solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "fda3acbfabd515df167be79a7075b8caabe9929509f7ff043c71ca6d5028f10e",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07010126113891602
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_16",
              "solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "fda3acbfabd515df167be79a7075b8caabe9929509f7ff043c71ca6d5028f10e",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07010126113891602
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_17",
              "solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "fda3acbfabd515df167be79a7075b8caabe9929509f7ff043c71ca6d5028f10e",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpwfrkd_4w.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07010126113891602
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_18",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_19",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        \n        for num in nums:\n            count[num] += 1\n        \n        sneaky_numbers = [num for num, cnt in count.items() if cnt == 2]\n        \n        return sneaky_numbers",
              "solution_hash": "4adf6ea1b94efdbf5c350635491b61181819d49258118a7734f1791b5238e579",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07006216049194336
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_20",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_21",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_22",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_23",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_24",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_25",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "ec5c43b8bfac6f1a1a0433cec40b8052ca4e5f0159d2f768d4d7660f34976dd4",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 102, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.0717003345489502
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
      "solution_hash": "f61386e2e4cd26900ab687c5a01d0bd244f2db238b9854e2e265ceceffddbd21",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpfmmol131.py\", line 173, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpfmmol131.py\", line 96, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.06976890563964844
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_27",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_28",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "ec5c43b8bfac6f1a1a0433cec40b8052ca4e5f0159d2f768d4d7660f34976dd4",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 102, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.0717003345489502
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_29",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_30",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_31",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_32",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = set()\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.add(num)\n            else:\n                seen.add(num)\n        \n        return list(sneaky_numbers)",
              "solution_hash": "47f5c87b63f570481ca4564aa58796196149985a7ec04dfe3eb73ed2b8d7f3e0",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp5kxaglkt.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp5kxaglkt.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.0700979232788086
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_33",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_34",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        for num, cnt in count.items():\n            if cnt == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "fbb2ac4126fbca6b674e51e8e94f62ce525c435177e6f1c85b01bc4cbd89ac0d",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07051873207092285
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": true
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_35",
          "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
          "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07053279876708984
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_36",
              "solution": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = defaultdict(int)\n        sneaky_numbers = []\n        \n        for num in nums:\n            count[num] += 1\n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "172006f08da9fb3d2fc1ce14f0d9691839959ad529c6218ce3f99befe0362931",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpyeo46xat.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.07053279876708984
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_37",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            \n            if count[num] == 2:\n                sneaky_numbers.append(num)\n        \n        return sneaky_numbers",
              "solution_hash": "ec5c43b8bfac6f1a1a0433cec40b8052ca4e5f0159d2f768d4d7660f34976dd4",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp219oyd9b.py\", line 102, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.0717003345489502
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_38",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        seen = set()\n        sneaky_numbers = []\n        \n        for num in nums:\n            if num in seen:\n                sneaky_numbers.append(num)\n            else:\n                seen.add(num)\n        \n        return sneaky_numbers",
              "solution_hash": "0b064b7ca74917618be752ed5fde0ed39c9e2792efb85c8291c04dd2e69eddc2",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp0yk72tl4.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
                "execution_time": 0.06992530822753906
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 2,
    "tests_failed": 37,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 485.1471312046051,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.07500000000000007,
      "pass@3": 0.21356275303643724,
      "pass@5": 0.33755060728744934,
      "pass@10": 0.5890688259109311
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}