{
  "problem_id": "find-indices-of-stable-mountains",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
  "passed_solutions": [
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices"
  ],
  "all_solutions": [
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
    "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
      "solution_hash": "a1bc71fb49bf7327a89172679f48bad4d680ab2a1e5a84c55591ccbbb49c6018",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06846094131469727
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
      "solution_hash": "a1bc71fb49bf7327a89172679f48bad4d680ab2a1e5a84c55591ccbbb49c6018",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07253265380859375
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        stable_indices = []\n        for i in range(1, len(height)):\n            if height[i - 1] > threshold:\n                stable_indices.append(i)\n        return stable_indices",
      "solution_hash": "a1bc71fb49bf7327a89172679f48bad4d680ab2a1e5a84c55591ccbbb49c6018",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07259011268615723
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 28.779579639434814,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}