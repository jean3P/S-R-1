{
  "problem_id": "construct-the-minimum-bitwise-array-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]",
  "passed_solutions": [
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]",
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            x = 0\n            while True:\n                if x | (x + 1) == num:\n                    return x\n                x += 1\n                if x > num:  # Early exit if x exceeds num\n                    return -1\n        \n        return [find_min_ans(num) for num in nums]",
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]"
  ],
  "all_solutions": [
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]",
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            x = 0\n            while True:\n                if x | (x + 1) == num:\n                    return x\n                x += 1\n                if x > num:  # Early exit if x exceeds num\n                    return -1\n        \n        return [find_min_ans(num) for num in nums]",
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]",
      "solution_hash": "658fc961fba23d9d53991737d95a6da0e06c636a6211d9236446872935a7945f",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0922091007232666
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            x = 0\n            while True:\n                if x | (x + 1) == num:\n                    return x\n                x += 1\n                if x > num:  # Early exit if x exceeds num\n                    return -1\n        \n        return [find_min_ans(num) for num in nums]",
      "solution_hash": "106af8d7a02c347c411b730b8323a8f3b8bbc6f6995d2e228ee3b278b54c63a0",
      "test_result": {
        "status": "pass",
        "execution_time": 0.10434937477111816
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        def find_min_ans(num):\n            for ans in range(num):\n                if (ans | (ans + 1)) == num:\n                    return ans\n            return -1\n        \n        return [find_min_ans(num) for num in nums]",
      "solution_hash": "658fc961fba23d9d53991737d95a6da0e06c636a6211d9236446872935a7945f",
      "test_result": {
        "status": "pass",
        "execution_time": 0.09522843360900879
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 37.78021693229675,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}