{
  "problem_id": "check-if-two-chessboard-squares-have-the-same-color",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            # Convert column ('a'-'h') to 0-7 and row ('1'-'8') to 0-7\n            col_num = ord(col) - ord('a')\n            row_num = int(row) - 1\n            # Calculate the sum of the coordinates\n            return (col_num + row_num) % 2\n        \n        # Compare the colors of both coordinates\n        return get_color(coordinate1) == get_color(coordinate2)",
  "passed_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            # Convert column ('a'-'h') to 0-7 and row ('1'-'8') to 0-7\n            col_num = ord(col) - ord('a')\n            row_num = int(row) - 1\n            # Calculate the sum of the coordinates\n            return (col_num + row_num) % 2\n        \n        # Compare the colors of both coordinates\n        return get_color(coordinate1) == get_color(coordinate2)",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)"
  ],
  "all_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            # Convert column ('a'-'h') to 0-7 and row ('1'-'8') to 0-7\n            col_num = ord(col) - ord('a')\n            row_num = int(row) - 1\n            # Calculate the sum of the coordinates\n            return (col_num + row_num) % 2\n        \n        # Compare the colors of both coordinates\n        return get_color(coordinate1) == get_color(coordinate2)",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            # Convert column ('a'-'h') to 0-7 and row ('1'-'8') to 0-7\n            col_num = ord(col) - ord('a')\n            row_num = int(row) - 1\n            # Calculate the sum of the coordinates\n            return (col_num + row_num) % 2\n        \n        # Compare the colors of both coordinates\n        return get_color(coordinate1) == get_color(coordinate2)",
      "solution_hash": "8ed11effdc2071f8ae5e5e30a1a47d6088d8446ed5a6a043277a43bbdebcc605",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06901144981384277
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)",
      "solution_hash": "139628579550bd23e286df05a9ab15446c0879eefe800a4b5ee585c75e06a0ac",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07199907302856445
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate: str) -> int:\n            col, row = coordinate\n            col_value = ord(col) - ord('a')\n            row_value = int(row) - 1\n            return (col_value + row_value) % 2\n        \n        return get_color(coordinate1) == get_color(coordinate2)",
      "solution_hash": "139628579550bd23e286df05a9ab15446c0879eefe800a4b5ee585c75e06a0ac",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07129240036010742
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 36.58280539512634,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}