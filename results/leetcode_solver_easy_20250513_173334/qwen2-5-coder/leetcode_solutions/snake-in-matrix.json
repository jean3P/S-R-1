{
  "problem_id": "snake-in-matrix",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        i, j = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            di, dj = direction_map[command]\n            i += di\n            j += dj\n        \n        # Calculate the final cell position\n        final_position = (i * n) + j\n        return final_position",
  "passed_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        i, j = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            di, dj = direction_map[command]\n            i += di\n            j += dj\n        \n        # Calculate the final cell position\n        final_position = (i * n) + j\n        return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to grid index\n        final_position = (row * n) + col\n        return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to cell number\n        final_position = (row * n) + col\n        return final_position"
  ],
  "all_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        i, j = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            di, dj = direction_map[command]\n            i += di\n            j += dj\n        \n        # Calculate the final cell position\n        final_position = (i * n) + j\n        return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to grid index\n        final_position = (row * n) + col\n        return final_position",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to cell number\n        final_position = (row * n) + col\n        return final_position"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        i, j = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            di, dj = direction_map[command]\n            i += di\n            j += dj\n        \n        # Calculate the final cell position\n        final_position = (i * n) + j\n        return final_position",
      "solution_hash": "aaa20fa2051a5f012f57876ee81cbcac6b3da9c88fb3cc3d97bc7900c9ae5aac",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06614303588867188
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to grid index\n        final_position = (row * n) + col\n        return final_position",
      "solution_hash": "deb30143d47f7f7dfd9d90c5e7f7ccf1a346b911513891324e82f8156f4cfa04",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06863856315612793
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initial position of the snake at cell 0\n        row, col = 0, 0\n        \n        # Mapping of commands to coordinate changes\n        direction_map = {\n            \"UP\": (-1, 0),\n            \"RIGHT\": (0, 1),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1)\n        }\n        \n        # Process each command\n        for command in commands:\n            dr, dc = direction_map[command]\n            row += dr\n            col += dc\n        \n        # Convert final position to cell number\n        final_position = (row * n) + col\n        return final_position",
      "solution_hash": "deb30143d47f7f7dfd9d90c5e7f7ccf1a346b911513891324e82f8156f4cfa04",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0708765983581543
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 112.35805416107178,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.75,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: invalid syntax (<string>, line 101)",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}