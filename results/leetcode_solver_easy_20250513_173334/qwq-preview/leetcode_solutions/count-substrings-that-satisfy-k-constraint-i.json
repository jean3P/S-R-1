{
  "problem_id": "count-substrings-that-satisfy-k-constraint-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
  "passed_solutions": [
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count"
  ],
  "all_solutions": [
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
      "solution_hash": "7852ce14be704e8f749c59d7f2485758861653e7fb4ca12992856555a0e76321",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0734555721282959
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
      "solution_hash": "8bbf7c3de0c6dca3a2533f1c084f1b33405b135abe38a2c3a8374aff4aac6f83",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07628679275512695
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            zeros = 0\n            ones = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
      "solution_hash": "7852ce14be704e8f749c59d7f2485758861653e7fb4ca12992856555a0e76321",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0782771110534668
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 207.26096534729004,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}