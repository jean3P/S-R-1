{
  "problem_id": "find-the-k-th-character-in-string-game-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            # Generate the new string by shifting each character to the next in alphabet\n            new_part = \"\".join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n            word += new_part\n        return word[k-1]",
  "passed_solutions": [
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            # Generate the new string by shifting each character to the next in alphabet\n            new_part = \"\".join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n            word += new_part\n        return word[k-1]",
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            next_str = \"\".join(chr((ord(c) - ord('a') + 1) % 26 + ord('a')) for c in word)\n            word += next_str\n        return word[k - 1]",
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            new_part = \"\"\n            for char in word:\n                next_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))\n                new_part += next_char\n            word += new_part\n        return word[k-1]"
  ],
  "all_solutions": [
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            # Generate the new string by shifting each character to the next in alphabet\n            new_part = \"\".join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n            word += new_part\n        return word[k-1]",
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            next_str = \"\".join(chr((ord(c) - ord('a') + 1) % 26 + ord('a')) for c in word)\n            word += next_str\n        return word[k - 1]",
    "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            new_part = \"\"\n            for char in word:\n                next_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))\n                new_part += next_char\n            word += new_part\n        return word[k-1]"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            # Generate the new string by shifting each character to the next in alphabet\n            new_part = \"\".join(chr((ord(char) - ord('a') + 1) % 26 + ord('a')) for char in word)\n            word += new_part\n        return word[k-1]",
      "solution_hash": "07a33eb0c3a1d053ac24c60a5ca91b72918862448c3e827ff3722e8d073443bf",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06871771812438965
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            next_str = \"\".join(chr((ord(c) - ord('a') + 1) % 26 + ord('a')) for c in word)\n            word += next_str\n        return word[k - 1]",
      "solution_hash": "00ac3bcc3cabe2c3d6d52d0d3b14d0a423b888a981432790e6339c2abeece17b",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07317447662353516
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def kthCharacter(self, k: int) -> str:\n        word = \"a\"\n        while len(word) < k:\n            new_part = \"\"\n            for char in word:\n                next_char = chr(((ord(char) - ord('a') + 1) % 26) + ord('a'))\n                new_part += next_char\n            word += new_part\n        return word[k-1]",
      "solution_hash": "eec6c7aee8a02eb56a54866a66103e33e989936c4ff0d799288ef30bafa02f1b",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07431483268737793
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 60.2329306602478,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}