{
  "problem_id": "construct-the-minimum-bitwise-array-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        ans = []\n        for num in nums:\n            found = False\n            for x in range(num + 1):\n                if x | (x + 1) == num:\n                    ans.append(x)\n                    found = True\n                    break\n            if not found:\n                ans.append(-1)\n        return ans",
  "passed_solutions": [
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        ans = []\n        for num in nums:\n            found = False\n            for x in range(num + 1):\n                if x | (x + 1) == num:\n                    ans.append(x)\n                    found = True\n                    break\n            if not found:\n                ans.append(-1)\n        return ans"
  ],
  "all_solutions": [
    "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        ans = []\n        for num in nums:\n            found = False\n            for x in range(num + 1):\n                if x | (x + 1) == num:\n                    ans.append(x)\n                    found = True\n                    break\n            if not found:\n                ans.append(-1)\n        return ans"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minBitwiseArray(self, nums: List[int]) -> List[int]:\n        ans = []\n        for num in nums:\n            found = False\n            for x in range(num + 1):\n                if x | (x + 1) == num:\n                    ans.append(x)\n                    found = True\n                    break\n            if not found:\n                ans.append(-1)\n        return ans",
      "solution_hash": "3e17c2252ed6cc6eb117bdb61abaeb2f910558570b564d48307309b16cedbe2d",
      "test_result": {
        "status": "pass",
        "execution_time": 0.09298992156982422
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 512.2890622615814,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}