{
  "problem_id": "make-array-elements-equal-to-zero",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i, num in enumerate(nums) if num == 0]\n        count = 0\n\n        for start in zeros:\n            # Try moving right\n            arr_right = nums.copy()\n            curr = start\n            direction = 1  # 1 for right, -1 for left\n            while 0 <= curr < n:\n                if arr_right[curr] == 0:\n                    curr += direction\n                elif arr_right[curr] > 0:\n                    arr_right[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_right):\n                count += 1\n\n            # Try moving left\n            arr_left = nums.copy()\n            curr = start\n            direction = -1\n            while 0 <= curr < n:\n                if arr_left[curr] == 0:\n                    curr += direction\n                elif arr_left[curr] > 0:\n                    arr_left[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_left):\n                count += 1\n\n        return count",
  "passed_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i, num in enumerate(nums) if num == 0]\n        count = 0\n\n        for start in zeros:\n            # Try moving right\n            arr_right = nums.copy()\n            curr = start\n            direction = 1  # 1 for right, -1 for left\n            while 0 <= curr < n:\n                if arr_right[curr] == 0:\n                    curr += direction\n                elif arr_right[curr] > 0:\n                    arr_right[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_right):\n                count += 1\n\n            # Try moving left\n            arr_left = nums.copy()\n            curr = start\n            direction = -1\n            while 0 <= curr < n:\n                if arr_left[curr] == 0:\n                    curr += direction\n                elif arr_left[curr] > 0:\n                    arr_left[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_left):\n                count += 1\n\n        return count",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        for start in range(n):\n            if nums[start] == 0:\n                # Try moving right\n                arr_right = nums.copy()\n                curr = start\n                direction = 1  # 1 for right, -1 for left\n                valid_right = self.simulate(arr_right, n, curr, direction)\n                \n                # Try moving left\n                arr_left = nums.copy()\n                curr = start\n                direction = -1\n                valid_left = self.simulate(arr_left, n, curr, direction)\n                \n                if valid_right:\n                    count += 1\n                if valid_left:\n                    count += 1\n        return count\n    \n    def simulate(self, arr, n, curr, direction):\n        while 0 <= curr < n:\n            if arr[curr] == 0:\n                curr += direction\n            elif arr[curr] > 0:\n                arr[curr] -= 1\n                direction *= -1\n                curr += direction\n            else:\n                # Negative values shouldn't occur, but handle just in case\n                return False\n        # Check if all elements are zero\n        return all(x == 0 for x in arr)",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i in range(n) if nums[i] == 0]\n        directions = [1, -1]  # 1 for right, -1 for left\n        valid_count = 0\n        \n        for start in zeros:\n            for direction in directions:\n                # Copy the original array to simulate changes\n                nums_copy = nums.copy()\n                curr = start\n                dir = direction\n                \n                while 0 <= curr < n:\n                    if nums_copy[curr] == 0:\n                        curr += dir\n                    elif nums_copy[curr] > 0:\n                        nums_copy[curr] -= 1\n                        dir *= -1\n                        curr += dir\n                \n                # Check if all elements are zero\n                if all(x == 0 for x in nums_copy):\n                    valid_count += 1\n                    \n        return valid_count"
  ],
  "all_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i, num in enumerate(nums) if num == 0]\n        count = 0\n\n        for start in zeros:\n            # Try moving right\n            arr_right = nums.copy()\n            curr = start\n            direction = 1  # 1 for right, -1 for left\n            while 0 <= curr < n:\n                if arr_right[curr] == 0:\n                    curr += direction\n                elif arr_right[curr] > 0:\n                    arr_right[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_right):\n                count += 1\n\n            # Try moving left\n            arr_left = nums.copy()\n            curr = start\n            direction = -1\n            while 0 <= curr < n:\n                if arr_left[curr] == 0:\n                    curr += direction\n                elif arr_left[curr] > 0:\n                    arr_left[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_left):\n                count += 1\n\n        return count",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        for start in range(n):\n            if nums[start] == 0:\n                # Try moving right\n                arr_right = nums.copy()\n                curr = start\n                direction = 1  # 1 for right, -1 for left\n                valid_right = self.simulate(arr_right, n, curr, direction)\n                \n                # Try moving left\n                arr_left = nums.copy()\n                curr = start\n                direction = -1\n                valid_left = self.simulate(arr_left, n, curr, direction)\n                \n                if valid_right:\n                    count += 1\n                if valid_left:\n                    count += 1\n        return count\n    \n    def simulate(self, arr, n, curr, direction):\n        while 0 <= curr < n:\n            if arr[curr] == 0:\n                curr += direction\n            elif arr[curr] > 0:\n                arr[curr] -= 1\n                direction *= -1\n                curr += direction\n            else:\n                # Negative values shouldn't occur, but handle just in case\n                return False\n        # Check if all elements are zero\n        return all(x == 0 for x in arr)",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i in range(n) if nums[i] == 0]\n        directions = [1, -1]  # 1 for right, -1 for left\n        valid_count = 0\n        \n        for start in zeros:\n            for direction in directions:\n                # Copy the original array to simulate changes\n                nums_copy = nums.copy()\n                curr = start\n                dir = direction\n                \n                while 0 <= curr < n:\n                    if nums_copy[curr] == 0:\n                        curr += dir\n                    elif nums_copy[curr] > 0:\n                        nums_copy[curr] -= 1\n                        dir *= -1\n                        curr += dir\n                \n                # Check if all elements are zero\n                if all(x == 0 for x in nums_copy):\n                    valid_count += 1\n                    \n        return valid_count"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i, num in enumerate(nums) if num == 0]\n        count = 0\n\n        for start in zeros:\n            # Try moving right\n            arr_right = nums.copy()\n            curr = start\n            direction = 1  # 1 for right, -1 for left\n            while 0 <= curr < n:\n                if arr_right[curr] == 0:\n                    curr += direction\n                elif arr_right[curr] > 0:\n                    arr_right[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_right):\n                count += 1\n\n            # Try moving left\n            arr_left = nums.copy()\n            curr = start\n            direction = -1\n            while 0 <= curr < n:\n                if arr_left[curr] == 0:\n                    curr += direction\n                elif arr_left[curr] > 0:\n                    arr_left[curr] -= 1\n                    direction *= -1\n                    curr += direction\n                else:\n                    break\n            if all(num == 0 for num in arr_left):\n                count += 1\n\n        return count",
      "solution_hash": "fbf3d9f7bf89054473921d7579322678f0ba5b2685cd6c56e5a61d8c556a94ff",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07969284057617188
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        for start in range(n):\n            if nums[start] == 0:\n                # Try moving right\n                arr_right = nums.copy()\n                curr = start\n                direction = 1  # 1 for right, -1 for left\n                valid_right = self.simulate(arr_right, n, curr, direction)\n                \n                # Try moving left\n                arr_left = nums.copy()\n                curr = start\n                direction = -1\n                valid_left = self.simulate(arr_left, n, curr, direction)\n                \n                if valid_right:\n                    count += 1\n                if valid_left:\n                    count += 1\n        return count\n    \n    def simulate(self, arr, n, curr, direction):\n        while 0 <= curr < n:\n            if arr[curr] == 0:\n                curr += direction\n            elif arr[curr] > 0:\n                arr[curr] -= 1\n                direction *= -1\n                curr += direction\n            else:\n                # Negative values shouldn't occur, but handle just in case\n                return False\n        # Check if all elements are zero\n        return all(x == 0 for x in arr)",
      "solution_hash": "a35c857518409d44cebcc52bf45bfc2d0661512b84d578c2830231223ab5ff47",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08185172080993652
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        zeros = [i for i in range(n) if nums[i] == 0]\n        directions = [1, -1]  # 1 for right, -1 for left\n        valid_count = 0\n        \n        for start in zeros:\n            for direction in directions:\n                # Copy the original array to simulate changes\n                nums_copy = nums.copy()\n                curr = start\n                dir = direction\n                \n                while 0 <= curr < n:\n                    if nums_copy[curr] == 0:\n                        curr += dir\n                    elif nums_copy[curr] > 0:\n                        nums_copy[curr] -= 1\n                        dir *= -1\n                        curr += dir\n                \n                # Check if all elements are zero\n                if all(x == 0 for x in nums_copy):\n                    valid_count += 1\n                    \n        return valid_count",
      "solution_hash": "72b7be054d20fb2e49a42d9ec1fec031cab4312fe23715a260dc6163dfe4162c",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08234953880310059
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 110.31642007827759,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}