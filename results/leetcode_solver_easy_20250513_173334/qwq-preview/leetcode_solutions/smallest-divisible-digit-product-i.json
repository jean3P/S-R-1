{
  "problem_id": "smallest-divisible-digit-product-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1",
  "passed_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0  # Early return if any digit is 0, as product will be 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0:\n                if t != 0:\n                    return current\n            elif prod % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1"
  ],
  "all_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0  # Early return if any digit is 0, as product will be 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0:\n                if t != 0:\n                    return current\n            elif prod % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1",
      "solution_hash": "2f403a02050227497a6b837dacd1851e9f8081dfd410ae02abc729e2b237b4f6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06494426727294922
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0  # Early return if any digit is 0, as product will be 0\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod == 0:\n                if t != 0:\n                    return current\n            elif prod % t == 0:\n                return current\n            current += 1",
      "solution_hash": "7297df9250299d826c1d3c5692b9482f6a29e9701aa5c25f2399492649dbcbc5",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06865310668945312
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                product *= digit\n                num //= 10\n            return product\n        \n        current = n\n        while True:\n            prod = digit_product(current)\n            if prod % t == 0:\n                return current\n            current += 1",
      "solution_hash": "2f403a02050227497a6b837dacd1851e9f8081dfd410ae02abc729e2b237b4f6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06750607490539551
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 70.19312477111816,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}