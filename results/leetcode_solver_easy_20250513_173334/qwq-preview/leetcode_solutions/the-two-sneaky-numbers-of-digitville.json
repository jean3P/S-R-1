{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "unsolved",
  "best_solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
  "passed_solutions": [
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        result = [num for num, count in count_dict.items() if count == 2]\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result"
  ],
  "all_solutions": [
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, n should be len(nums) - 2\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = max(nums) + 1  # Determine n based on the maximum number in nums\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        # Determine the value of n based on the maximum number in nums\n        n = max(nums) + 1\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                    else:\n                        raise ValueError(\"Number out of expected range\")\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        result = [num for num, count in count_dict.items() if count == 2]\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = max(nums) + 1\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count == 2:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count == 2:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count > 1:\n                result.append(num)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are two extra numbers\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are two extra numbers\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since there are two extra numbers\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c > 1:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                frequency = {}\n                for num in nums:\n                    if num in frequency:\n                        frequency[num] += 1\n                    else:\n                        frequency[num] = 1\n                result = []\n                for num, count in frequency.items():\n                    if count > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated extra times\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n            else:\n                # Handle numbers out of expected range, though per constraints they should be within 0 to n-1\n                pass  # or raise an error, but per constraints, this shouldn't happen\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                xor = 0\n                for num in nums:\n                    xor ^= num\n                for i in range(n):\n                    xor ^= i\n                # Now xor is num1 XOR num2\n                # Find a set bit in xor\n                set_bit = xor & -xor\n                num1 = num2 = 0\n                for num in nums:\n                    if num & set_bit:\n                        num1 ^= num\n                    else:\n                        num2 ^= num\n                for i in range(n):\n                    if i & set_bit:\n                        num1 ^= i\n                    else:\n                        num2 ^= i\n                return [num1, num2]",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                xor = 0\n                for num in nums:\n                    xor ^= num\n                for i in range(n):\n                    xor ^= i\n                # Now xor is num1 XOR num2\n                # Find a set bit in xor\n                set_bit = xor & -xor\n                num1 = num2 = 0\n                for num in nums:\n                    if num & set_bit:\n                        num1 ^= num\n                    else:\n                        num2 ^= num\n                for i in range(n):\n                    if i & set_bit:\n                        num1 ^= i\n                    else:\n                        num2 ^= i\n                return [num1, num2]",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated extra times\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1  # All nums are within [0, n-1] per constraints\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = max(nums) + 1  # Determine the range of numbers\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, original list should have had n elements\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = (len(nums) - 2) + 1  # Since two numbers are repeated, n = len(nums) - 2\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * n\n                for num in nums:\n                    if num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * (n + 1)  # Adjusted to n+1 to cover all possible numbers\n                for num in nums:\n                    if 0 <= num <= n:  # Ensure num is within expected range\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
    "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                    else:\n                        # According to constraints, this shouldn't happen\n                        raise ValueError(\"Invalid input: numbers out of expected range\")\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                # If fewer than two duplicates are found, something is wrong\n                if len(result) < 2:\n                    raise ValueError(\"Expected exactly two duplicates, but found fewer\")\n                return result",
    "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Expected number of unique elements\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n            else:\n                # According to constraints, this should not happen\n                raise ValueError(\"Invalid input: numbers must be between 0 and n-1\")\n        result = [i for i, c in enumerate(count) if c == 2]\n        if len(result) != 2:\n            # According to constraints, there should be exactly two repeated numbers\n            raise ValueError(\"Input does not contain exactly two repeated numbers\")\n        return result"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 2,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
      "solution_hash": "673adae7e079caa689e8617a4acc57c79d58454a3e60d90f920b69a708617b41",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpug801vll.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpug801vll.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.07096219062805176
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_1",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated, n should be len(nums) - 2\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
          "solution_hash": "b437d573e5f27e1f518f2c4755c73f27df879fc97e81b73914c569a970c7fef3",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmpkm7mmd0j.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.0577242374420166
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_2",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = max(nums) + 1  # Determine n based on the maximum number in nums\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
              "solution_hash": "63fe250a65eb58768fd30bfecc5211c9dfa50ded07f4dd2ba1344aefe7430ddd",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpoqy3z0mc.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.0565180778503418
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_3",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        # Determine the value of n based on the maximum number in nums\n        n = max(nums) + 1\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n        return result",
              "solution_hash": "63fe250a65eb58768fd30bfecc5211c9dfa50ded07f4dd2ba1344aefe7430ddd",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpoqy3z0mc.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.0565180778503418
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_4",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                    else:\n                        raise ValueError(\"Number out of expected range\")\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
              "solution_hash": "f090d875eb89c245beb21e260d2316a3bb458ef3514a5779f2133e4b67901176",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpu7sha8uk.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05542254447937012
              },
              "depth": 2,
              "parent_id": "1_1",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_5",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
          "solution_hash": "94fc2a35af70ddec1430bd6ae0008e388866f0d33626e6c1cdb757a5642f7778",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmptwx9te5f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.05584597587585449
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_6",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
              "solution_hash": "57c305d4224a52ac96406c5e20327638327c6a9dae85af06f5f8d279bd264786",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07230615615844727
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_7",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        result = [num for num, count in count_dict.items() if count == 2]\n        return result",
              "solution_hash": "d20a5ea670366aaf5b2e6a14542194997157f4d090a3b20df3ecd9407259df08",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07490968704223633
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_8",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "d7edad6e73f3f8472c6de4d1faf17750b86dd93cb18e8007fe87ab7dada714d8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmps4kyaz37.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.06026172637939453
              },
              "depth": 2,
              "parent_id": "1_5",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_9",
          "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = max(nums) + 1\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
          "solution_hash": "42c8e107a78dc523d491db32b89b552e4d82085fa72847219ef727b035d7e9e0",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpt6ogpp58.py\", line 177, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpt6ogpp58.py\", line 100, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07063984870910645
          },
          "depth": 1,
          "parent_id": "0_0",
          "children": [
            {
              "node_id": "2_10",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count == 2:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "fbc3169c63841dcfe838dbbef1115e89001748627019fd7d7e2faeafb102c68f",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpzbzkh64y.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05692696571350098
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_11",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "39ddeac9b8b1603c2699e4e91b26de7d89225b3e268e846d0682de6bdfbd0ab8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpt8wgn5x9.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05574846267700195
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_12",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                count_dict = {}\n                for num in nums:\n                    if num in count_dict:\n                        count_dict[num] += 1\n                    else:\n                        count_dict[num] = 1\n                result = []\n                for num, count in count_dict.items():\n                    if count == 2:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "fbc3169c63841dcfe838dbbef1115e89001748627019fd7d7e2faeafb102c68f",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpzbzkh64y.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05692696571350098
              },
              "depth": 2,
              "parent_id": "1_9",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
      "solution_hash": "673adae7e079caa689e8617a4acc57c79d58454a3e60d90f920b69a708617b41",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmptxquuxo5.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmptxquuxo5.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.07179045677185059
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_14",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
          "solution_hash": "94fc2a35af70ddec1430bd6ae0008e388866f0d33626e6c1cdb757a5642f7778",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmptwx9te5f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.05584597587585449
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_15",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = []\n        for num, count in frequency.items():\n            if count > 1:\n                result.append(num)\n                if len(result) == 2:\n                    break\n        return result",
              "solution_hash": "eaa0f07250ce4e1a6f502740acadf46a574e254f403aafae006ea831e3d3bcac",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpe4wkz0um.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpe4wkz0um.py\", line 120, in check\n    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 0]\nAssertionError\n",
                "execution_time": 0.07021045684814453
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_16",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "d7edad6e73f3f8472c6de4d1faf17750b86dd93cb18e8007fe87ab7dada714d8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmps4kyaz37.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.06026172637939453
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_17",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "d7edad6e73f3f8472c6de4d1faf17750b86dd93cb18e8007fe87ab7dada714d8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmps4kyaz37.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.06026172637939453
              },
              "depth": 2,
              "parent_id": "1_14",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_18",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are two extra numbers\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
          "solution_hash": "94fc2a35af70ddec1430bd6ae0008e388866f0d33626e6c1cdb757a5642f7778",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmptwx9te5f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.05584597587585449
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_19",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are two extra numbers\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                return result",
              "solution_hash": "b437d573e5f27e1f518f2c4755c73f27df879fc97e81b73914c569a970c7fef3",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpkm7mmd0j.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.0577242374420166
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_20",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since there are two extra numbers\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c > 1:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
              "solution_hash": "d00e8f847699d824d35b3c1a1b3b259e1960d4786b888b069b023f24b8bc84d9",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpt_qfs8c2.py\", line 178, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpt_qfs8c2.py\", line 100, in check\n    assert candidate(nums = [5, 5, 3, 2, 1, 4, 0]) == [5]\nAssertionError\n",
                "execution_time": 0.07044720649719238
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_21",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                frequency = {}\n                for num in nums:\n                    if num in frequency:\n                        frequency[num] += 1\n                    else:\n                        frequency[num] = 1\n                result = []\n                for num, count in frequency.items():\n                    if count > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "eaa0f07250ce4e1a6f502740acadf46a574e254f403aafae006ea831e3d3bcac",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpe4wkz0um.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpe4wkz0um.py\", line 120, in check\n    assert candidate(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 0]\nAssertionError\n",
                "execution_time": 0.07021045684814453
              },
              "depth": 2,
              "parent_id": "1_18",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_22",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
          "solution_hash": "94fc2a35af70ddec1430bd6ae0008e388866f0d33626e6c1cdb757a5642f7778",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmptwx9te5f.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.05584597587585449
          },
          "depth": 1,
          "parent_id": "0_1",
          "children": [
            {
              "node_id": "2_23",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
              "solution_hash": "57c305d4224a52ac96406c5e20327638327c6a9dae85af06f5f8d279bd264786",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07230615615844727
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_24",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        from collections import Counter\n        count = Counter(nums)\n        result = [num for num, freq in count.items() if freq == 2]\n        return result",
              "solution_hash": "57c305d4224a52ac96406c5e20327638327c6a9dae85af06f5f8d279bd264786",
              "test_result": {
                "status": "pass",
                "execution_time": 0.07230615615844727
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": true
            },
            {
              "node_id": "2_25",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                from collections import Counter\n                count = Counter(nums)\n                result = []\n                for num, freq in count.items():\n                    if freq > 1:\n                        result.append(num)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "d7edad6e73f3f8472c6de4d1faf17750b86dd93cb18e8007fe87ab7dada714d8",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmps4kyaz37.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.06026172637939453
              },
              "depth": 2,
              "parent_id": "1_22",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = [0] * len(nums)\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
      "solution_hash": "673adae7e079caa689e8617a4acc57c79d58454a3e60d90f920b69a708617b41",
      "test_result": {
        "status": "fail",
        "error_message": "Test execution failed with return code 1",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmp_zkql7dq.py\", line 176, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmp_zkql7dq.py\", line 99, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
        "execution_time": 0.070159912109375
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        {
          "node_id": "1_27",
          "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated extra times\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n            else:\n                # Handle numbers out of expected range, though per constraints they should be within 0 to n-1\n                pass  # or raise an error, but per constraints, this shouldn't happen\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
          "solution_hash": "8a33d7fcdd5e6b57fb0834fa60090d4b9146849d35cfe5de5b4d2358eb3f399d",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpb1k2kw8s.py\", line 181, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpb1k2kw8s.py\", line 103, in check\n    assert candidate(nums = [5, 5, 3, 2, 1, 4, 0]) == [5]\nAssertionError\n",
            "execution_time": 0.07024431228637695
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_28",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                xor = 0\n                for num in nums:\n                    xor ^= num\n                for i in range(n):\n                    xor ^= i\n                # Now xor is num1 XOR num2\n                # Find a set bit in xor\n                set_bit = xor & -xor\n                num1 = num2 = 0\n                for num in nums:\n                    if num & set_bit:\n                        num1 ^= num\n                    else:\n                        num2 ^= num\n                for i in range(n):\n                    if i & set_bit:\n                        num1 ^= i\n                    else:\n                        num2 ^= i\n                return [num1, num2]",
              "solution_hash": "22d3dcd054b7bd9a7dfb7aa5cd385de6d0590784883d7e10b1b83acd098c85d7",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpyo6r_zfp.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05767369270324707
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_29",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2\n                xor = 0\n                for num in nums:\n                    xor ^= num\n                for i in range(n):\n                    xor ^= i\n                # Now xor is num1 XOR num2\n                # Find a set bit in xor\n                set_bit = xor & -xor\n                num1 = num2 = 0\n                for num in nums:\n                    if num & set_bit:\n                        num1 ^= num\n                    else:\n                        num2 ^= num\n                for i in range(n):\n                    if i & set_bit:\n                        num1 ^= i\n                    else:\n                        num2 ^= i\n                return [num1, num2]",
              "solution_hash": "22d3dcd054b7bd9a7dfb7aa5cd385de6d0590784883d7e10b1b83acd098c85d7",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpyo6r_zfp.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05767369270324707
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_30",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since two numbers are repeated extra times\n                count = [0] * n\n                for num in nums:\n                    count[num] += 1  # All nums are within [0, n-1] per constraints\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "66820b510a3025a681782944604ada43c471bfadc0ebd7823ca13e2f09fcf5d5",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpeyplvlut.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05709218978881836
              },
              "depth": 2,
              "parent_id": "1_27",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_31",
          "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = max(nums) + 1  # Determine the range of numbers\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
          "solution_hash": "42c8e107a78dc523d491db32b89b552e4d82085fa72847219ef727b035d7e9e0",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpt6ogpp58.py\", line 177, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpt6ogpp58.py\", line 100, in check\n    assert candidate(nums = [7, 1, 5, 4, 3, 4, 6, 0, 9, 5, 8, 2]) == [5, 4]\nAssertionError\n",
            "execution_time": 0.07063984870910645
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_32",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, original list should have had n elements\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
              "solution_hash": "66820b510a3025a681782944604ada43c471bfadc0ebd7823ca13e2f09fcf5d5",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpeyplvlut.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05709218978881836
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_33",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = (len(nums) - 2) + 1  # Since two numbers are repeated, n = len(nums) - 2\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "254d9b80ff74298c6a8fa56929b224a7ec95146ae837dafbeabdc410eea5b0af",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpba93mn1s.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05723285675048828
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_34",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Since two numbers are repeated, the original list should have had n elements\n        count = [0] * n\n        for num in nums:\n            count[num] += 1\n        result = []\n        for i, c in enumerate(count):\n            if c == 2:\n                result.append(i)\n                if len(result) == 2:\n                    break\n        return result",
              "solution_hash": "66820b510a3025a681782944604ada43c471bfadc0ebd7823ca13e2f09fcf5d5",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpeyplvlut.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05709218978881836
              },
              "depth": 2,
              "parent_id": "1_31",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        },
        {
          "node_id": "1_35",
          "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * n\n                for num in nums:\n                    if num < n:\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
          "solution_hash": "e59b899ed12b43a24b816b29bda62971938727d5e6654d70dcbd45b7ac9c7915",
          "test_result": {
            "status": "fail",
            "error_message": "Test execution failed with return code 1",
            "stdout": "",
            "stderr": "  File \"/scratch/local/21419948/tmp5uzq_flt.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
            "execution_time": 0.05633187294006348
          },
          "depth": 1,
          "parent_id": "0_2",
          "children": [
            {
              "node_id": "2_36",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * (n + 1)  # Adjusted to n+1 to cover all possible numbers\n                for num in nums:\n                    if 0 <= num <= n:  # Ensure num is within expected range\n                        count[num] += 1\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                return result",
              "solution_hash": "965943a3b3e4a8e796d75e5aedb0a8d1fbc4a49233f8703534cad2c1c03cbeae",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmpfqha519u.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05774545669555664
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_37",
              "solution": "from typing import List\n\n        class Solution:\n            def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n                n = len(nums) - 2  # Since there are n elements normally, but 2 extra\n                count = [0] * n\n                for num in nums:\n                    if 0 <= num < n:\n                        count[num] += 1\n                    else:\n                        # According to constraints, this shouldn't happen\n                        raise ValueError(\"Invalid input: numbers out of expected range\")\n                result = []\n                for i, c in enumerate(count):\n                    if c == 2:\n                        result.append(i)\n                        if len(result) == 2:\n                            break\n                # If fewer than two duplicates are found, something is wrong\n                if len(result) < 2:\n                    raise ValueError(\"Expected exactly two duplicates, but found fewer\")\n                return result",
              "solution_hash": "1606b15d39322e5af9632d3464a32a764e8d4d2778080a060a091ce4a4cbd229",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "  File \"/scratch/local/21419948/tmp_y9gu3ca.py\", line 83\n    class Solution:\nIndentationError: unexpected indent\n",
                "execution_time": 0.05771303176879883
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            },
            {
              "node_id": "2_38",
              "solution": "from typing import List\n\nclass Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums) - 2  # Expected number of unique elements\n        count = [0] * n\n        for num in nums:\n            if 0 <= num < n:\n                count[num] += 1\n            else:\n                # According to constraints, this should not happen\n                raise ValueError(\"Invalid input: numbers must be between 0 and n-1\")\n        result = [i for i, c in enumerate(count) if c == 2]\n        if len(result) != 2:\n            # According to constraints, there should be exactly two repeated numbers\n            raise ValueError(\"Input does not contain exactly two repeated numbers\")\n        return result",
              "solution_hash": "30eac7af5270c20d7605244791bdb8c7827f9aaa230b278487737fb8807c0f1e",
              "test_result": {
                "status": "fail",
                "error_message": "Test execution failed with return code 1",
                "stdout": "",
                "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/21419948/tmpdzq17oi2.py\", line 179, in <module>\n    check(Solution().getSneakyNumbers)\n  File \"/scratch/local/21419948/tmpdzq17oi2.py\", line 101, in check\n    assert candidate(nums = [5, 5, 3, 2, 1, 4, 0]) == [5]\n  File \"/scratch/local/21419948/tmpdzq17oi2.py\", line 92, in getSneakyNumbers\n    raise ValueError(\"Invalid input: numbers must be between 0 and n-1\")\nValueError: Invalid input: numbers must be between 0 and n-1\n",
                "execution_time": 0.0757148265838623
              },
              "depth": 2,
              "parent_id": "1_35",
              "children": [],
              "passed": false
            }
          ],
          "passed": false
        }
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 4,
    "tests_failed": 35,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 686.9200019836426,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.1250000000000001,
      "pass@3": 0.33755060728744946,
      "pass@5": 0.5066442961179802,
      "pass@10": 0.7834281650071123
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: list index out of range",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 97)",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: Invalid input: numbers must be between 0 and n-1",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}