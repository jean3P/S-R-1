{
  "problem_id": "find-the-key-of-the-numbers",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Initialize an empty string to store the key digits\n        key_str = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position across the three numbers\n            min_digit = str(min(int(s1[i]), int(s2[i]), int(s3[i])))\n            key_str += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        key = int(key_str)\n        \n        return key",
  "passed_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Initialize an empty string to store the key digits\n        key_str = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position across the three numbers\n            min_digit = str(min(int(s1[i]), int(s2[i]), int(s3[i])))\n            key_str += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        key = int(key_str)\n        \n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings with padding\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Find the smallest digit for each position\n        key_digits = [\n            str(min(int(s1[0]), int(s2[0]), int(s3[0]))),\n            str(min(int(s1[1]), int(s2[1]), int(s3[1]))),\n            str(min(int(s1[2]), int(s2[2]), int(s3[2]))),\n            str(min(int(s1[3]), int(s2[3]), int(s3[3]))),\n        ]\n        \n        # Combine digits and convert to integer, removing leading zeros\n        key = int(''.join(key_digits))\n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = str(num1).zfill(4)\n        s2 = str(num2).zfill(4)\n        s3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position\n            min_digit = min(s1[i], s2[i], s3[i])\n            # Append the smallest digit to the key\n            key += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        result = int(key)\n        \n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Initialize an empty string to store the key digits\n        key_str = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position across the three numbers\n            min_digit = str(min(int(s1[i]), int(s2[i]), int(s3[i])))\n            key_str += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        key = int(key_str)\n        \n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings with padding\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Find the smallest digit for each position\n        key_digits = [\n            str(min(int(s1[0]), int(s2[0]), int(s3[0]))),\n            str(min(int(s1[1]), int(s2[1]), int(s3[1]))),\n            str(min(int(s1[2]), int(s2[2]), int(s3[2]))),\n            str(min(int(s1[3]), int(s2[3]), int(s3[3]))),\n        ]\n        \n        # Combine digits and convert to integer, removing leading zeros\n        key = int(''.join(key_digits))\n        return key",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = str(num1).zfill(4)\n        s2 = str(num2).zfill(4)\n        s3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position\n            min_digit = min(s1[i], s2[i], s3[i])\n            # Append the smallest digit to the key\n            key += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        result = int(key)\n        \n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Initialize an empty string to store the key digits\n        key_str = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position across the three numbers\n            min_digit = str(min(int(s1[i]), int(s2[i]), int(s3[i])))\n            key_str += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        key = int(key_str)\n        \n        return key",
      "solution_hash": "c0c309791f20c0653522af9a069c1e54dc00b41f56d89ecd36665731c21079ef",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06772780418395996
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings with padding\n        s1 = format(num1, '04d')\n        s2 = format(num2, '04d')\n        s3 = format(num3, '04d')\n        \n        # Find the smallest digit for each position\n        key_digits = [\n            str(min(int(s1[0]), int(s2[0]), int(s3[0]))),\n            str(min(int(s1[1]), int(s2[1]), int(s3[1]))),\n            str(min(int(s1[2]), int(s2[2]), int(s3[2]))),\n            str(min(int(s1[3]), int(s2[3]), int(s3[3]))),\n        ]\n        \n        # Combine digits and convert to integer, removing leading zeros\n        key = int(''.join(key_digits))\n        return key",
      "solution_hash": "b346399d5d59aab6b3beca630dde78e912143b8c8a523a1a48ab91d4fa2f8f0e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07303619384765625
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert numbers to strings and pad with leading zeros to make them 4 digits\n        s1 = str(num1).zfill(4)\n        s2 = str(num2).zfill(4)\n        s3 = str(num3).zfill(4)\n        \n        # Initialize the key as an empty string\n        key = ''\n        \n        # Iterate through each digit position\n        for i in range(4):\n            # Find the smallest digit at the current position\n            min_digit = min(s1[i], s2[i], s3[i])\n            # Append the smallest digit to the key\n            key += min_digit\n        \n        # Convert the key string to an integer, removing leading zeros\n        result = int(key)\n        \n        return result",
      "solution_hash": "4f3b7be18c05450bc1912f1b4a494b5b42d81f846171529c9077565ee87b32d9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0728902816772461
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 68.61232304573059,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}