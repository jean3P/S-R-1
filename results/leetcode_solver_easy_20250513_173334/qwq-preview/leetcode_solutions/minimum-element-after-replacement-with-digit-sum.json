{
  "problem_id": "minimum-element-after-replacement-with-digit-sum",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n: int) -> int:\n            return sum(int(digit) for digit in str(n))\n        \n        replaced_nums = [digit_sum(num) for num in nums]\n        return min(replaced_nums)",
  "passed_solutions": [
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n: int) -> int:\n            return sum(int(digit) for digit in str(n))\n        \n        replaced_nums = [digit_sum(num) for num in nums]\n        return min(replaced_nums)",
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            num = nums[i]\n            digit_sum = sum(int(digit) for digit in str(num))\n            nums[i] = digit_sum\n        # Find and return the minimum element in the modified array\n        return min(nums)",
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n):\n            return sum(int(digit) for digit in str(n))\n        \n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            nums[i] = digit_sum(nums[i])\n        \n        # Find and return the minimum element\n        return min(nums)"
  ],
  "all_solutions": [
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n: int) -> int:\n            return sum(int(digit) for digit in str(n))\n        \n        replaced_nums = [digit_sum(num) for num in nums]\n        return min(replaced_nums)",
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            num = nums[i]\n            digit_sum = sum(int(digit) for digit in str(num))\n            nums[i] = digit_sum\n        # Find and return the minimum element in the modified array\n        return min(nums)",
    "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n):\n            return sum(int(digit) for digit in str(n))\n        \n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            nums[i] = digit_sum(nums[i])\n        \n        # Find and return the minimum element\n        return min(nums)"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n: int) -> int:\n            return sum(int(digit) for digit in str(n))\n        \n        replaced_nums = [digit_sum(num) for num in nums]\n        return min(replaced_nums)",
      "solution_hash": "ec083aac103368b6c221a942be49b460c1cd675e2f0c3cde9a9065a55199eaba",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07003903388977051
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            num = nums[i]\n            digit_sum = sum(int(digit) for digit in str(num))\n            nums[i] = digit_sum\n        # Find and return the minimum element in the modified array\n        return min(nums)",
      "solution_hash": "31d3e3a71a4c5dcc8370ed1fcbe893dfebcdb0159291983457b47a0e04df38eb",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07288050651550293
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        def digit_sum(n):\n            return sum(int(digit) for digit in str(n))\n        \n        # Replace each element with the sum of its digits\n        for i in range(len(nums)):\n            nums[i] = digit_sum(nums[i])\n        \n        # Find and return the minimum element\n        return min(nums)",
      "solution_hash": "041f62085f2dd71f23594a265d98feb42561eaeda272972c717ef6e4887f67c3",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07368969917297363
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 79.0958354473114,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}