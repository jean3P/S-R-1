{
  "problem_id": "convert-date-to-binary",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year_bin = bin(int(parts[0]))[2:]\n        month_bin = bin(int(parts[1]))[2:]\n        day_bin = bin(int(parts[2]))[2:]\n        return f\"{year_bin}-{month_bin}-{day_bin}\"",
  "passed_solutions": [
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year_bin = bin(int(parts[0]))[2:]\n        month_bin = bin(int(parts[1]))[2:]\n        day_bin = bin(int(parts[2]))[2:]\n        return f\"{year_bin}-{month_bin}-{day_bin}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year, month, day = parts\n        binary_year = bin(int(year))[2:]\n        binary_month = bin(int(month))[2:]\n        binary_day = bin(int(day))[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n            def convertDateToBinary(self, date: str) -> str:\n                parts = date.split('-')\n                year = bin(int(parts[0]))[2:]\n                month = bin(int(parts[1]))[2:]\n                day = bin(int(parts[2]))[2:]\n                return f\"{year}-{month}-{day}\""
  ],
  "all_solutions": [
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year_bin = bin(int(parts[0]))[2:]\n        month_bin = bin(int(parts[1]))[2:]\n        day_bin = bin(int(parts[2]))[2:]\n        return f\"{year_bin}-{month_bin}-{day_bin}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year, month, day = parts\n        binary_year = bin(int(year))[2:]\n        binary_month = bin(int(month))[2:]\n        binary_day = bin(int(day))[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n            def convertDateToBinary(self, date: str) -> str:\n                parts = date.split('-')\n                year = bin(int(parts[0]))[2:]\n                month = bin(int(parts[1]))[2:]\n                day = bin(int(parts[2]))[2:]\n                return f\"{year}-{month}-{day}\""
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year_bin = bin(int(parts[0]))[2:]\n        month_bin = bin(int(parts[1]))[2:]\n        day_bin = bin(int(parts[2]))[2:]\n        return f\"{year_bin}-{month_bin}-{day_bin}\"",
      "solution_hash": "0465d05fd93b17f4b9cc21b7ac86845d0d6a0fa8a16c9fe47d3826974f939eef",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06742334365844727
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        parts = date.split('-')\n        year, month, day = parts\n        binary_year = bin(int(year))[2:]\n        binary_month = bin(int(month))[2:]\n        binary_day = bin(int(day))[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
      "solution_hash": "0d6a3602f648cd968099c3a01f42a5d0ffba40f6657cb27d0c20c5e8cf35722e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0716698169708252
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n            def convertDateToBinary(self, date: str) -> str:\n                parts = date.split('-')\n                year = bin(int(parts[0]))[2:]\n                month = bin(int(parts[1]))[2:]\n                day = bin(int(parts[2]))[2:]\n                return f\"{year}-{month}-{day}\"",
      "solution_hash": "7d60b000b69693a271cedfdce83da8d276d49ac41d9bd1e79ab11e8f9568e5bc",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07153654098510742
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 48.738853931427,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}