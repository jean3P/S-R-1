{
  "problem_id": "check-if-two-chessboard-squares-have-the-same-color",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return (col + row) % 2 == 0\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
  "passed_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return (col + row) % 2 == 0\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate):\n            col = ord(coordinate[0]) - ord('a') + 1\n            row = int(coordinate[1])\n            return (col + row) % 2 == 0\n        \n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Define a function to get the color based on coordinate\n        def get_color(coordinate):\n            # Convert letter to column index (a=0, b=1, ..., h=7)\n            col = ord(coordinate[0]) - ord('a')\n            # Convert number to row index (1=0, 2=1, ..., 8=7)\n            row = int(coordinate[1]) - 1\n            # Sum of indices\n            total = col + row\n            # If sum is even, it's one color; otherwise, the other color\n            return total % 2 == 0\n        \n        # Get colors for both coordinates\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        \n        # Return True if colors are the same, False otherwise\n        return color1 == color2"
  ],
  "all_solutions": [
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return (col + row) % 2 == 0\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate):\n            col = ord(coordinate[0]) - ord('a') + 1\n            row = int(coordinate[1])\n            return (col + row) % 2 == 0\n        \n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
    "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Define a function to get the color based on coordinate\n        def get_color(coordinate):\n            # Convert letter to column index (a=0, b=1, ..., h=7)\n            col = ord(coordinate[0]) - ord('a')\n            # Convert number to row index (1=0, 2=1, ..., 8=7)\n            row = int(coordinate[1]) - 1\n            # Sum of indices\n            total = col + row\n            # If sum is even, it's one color; otherwise, the other color\n            return total % 2 == 0\n        \n        # Get colors for both coordinates\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        \n        # Return True if colors are the same, False otherwise\n        return color1 == color2"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coord):\n            col = ord(coord[0]) - ord('a') + 1\n            row = int(coord[1])\n            return (col + row) % 2 == 0\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
      "solution_hash": "990b12c8399399ad6494daabdc3b17ad557ffb3a6cb3608a59207b0e7625b3b2",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06859326362609863
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        def get_color(coordinate):\n            col = ord(coordinate[0]) - ord('a') + 1\n            row = int(coordinate[1])\n            return (col + row) % 2 == 0\n        \n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        return color1 == color2",
      "solution_hash": "216c8e2ce595d9b6e919d15569f5d9498f284eb427a8528d02942b095dc8a219",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07209014892578125
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def checkTwoChessboards(self, coordinate1: str, coordinate2: str) -> bool:\n        # Define a function to get the color based on coordinate\n        def get_color(coordinate):\n            # Convert letter to column index (a=0, b=1, ..., h=7)\n            col = ord(coordinate[0]) - ord('a')\n            # Convert number to row index (1=0, 2=1, ..., 8=7)\n            row = int(coordinate[1]) - 1\n            # Sum of indices\n            total = col + row\n            # If sum is even, it's one color; otherwise, the other color\n            return total % 2 == 0\n        \n        # Get colors for both coordinates\n        color1 = get_color(coordinate1)\n        color2 = get_color(coordinate2)\n        \n        # Return True if colors are the same, False otherwise\n        return color1 == color2",
      "solution_hash": "f209075141f3c7a11a4faf81cc1aa1de15d2499d833084926ff447a693a8d630",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07137799263000488
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 47.02900290489197,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}