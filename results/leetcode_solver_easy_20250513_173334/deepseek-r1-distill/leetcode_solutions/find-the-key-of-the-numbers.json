{
  "problem_id": "find-the-key-of-the-numbers",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer\n        key_str = ''.join(key)\n        return int(key_str) if key_str else 0",
  "passed_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer\n        key_str = ''.join(key)\n        return int(key_str) if key_str else 0",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Pad each number with leading zeros to make them 4 digits\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Take the minimum digit from each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))"
  ],
  "all_solutions": [
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer\n        key_str = ''.join(key)\n        return int(key_str) if key_str else 0",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Pad each number with leading zeros to make them 4 digits\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Take the minimum digit from each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))",
    "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer\n        key_str = ''.join(key)\n        return int(key_str) if key_str else 0",
      "solution_hash": "1f229d3552193596cc1023fb97a2ac0ef9f848f4540db1fe10006a06881931cc",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06844377517700195
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Pad each number with leading zeros to make them 4 digits\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Take the minimum digit from each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))",
      "solution_hash": "fd9b56d69c054d81322abe06046c16ad7a64ee6b89f45621cadb9e9cff1a292a",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07302665710449219
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        # Convert each number to a 4-digit string with leading zeros\n        s1 = f\"{num1:04d}\"\n        s2 = f\"{num2:04d}\"\n        s3 = f\"{num3:04d}\"\n        \n        key = []\n        for i in range(4):\n            # Find the minimum digit at each position\n            min_digit = min(s1[i], s2[i], s3[i])\n            key.append(min_digit)\n        \n        # Combine the digits and convert to integer to remove leading zeros\n        return int(''.join(key))",
      "solution_hash": "fd9b56d69c054d81322abe06046c16ad7a64ee6b89f45621cadb9e9cff1a292a",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07203125953674316
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 46.24337291717529,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}