{
  "problem_id": "final-array-state-after-k-multiplication-operations-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums",
  "passed_solutions": [
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums",
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            min_index = nums.index(min_val)\n            # Multiply the found minimum value by the multiplier\n            nums[min_index] *= multiplier\n        return nums",
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of min_val\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums"
  ],
  "all_solutions": [
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums",
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            min_index = nums.index(min_val)\n            # Multiply the found minimum value by the multiplier\n            nums[min_index] *= multiplier\n        return nums",
    "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of min_val\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums",
      "solution_hash": "a55de140b7088a878316f162c37d1a100ccaf186b8471884d5329216de545101",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06873345375061035
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of the minimum value\n            min_index = nums.index(min_val)\n            # Multiply the found minimum value by the multiplier\n            nums[min_index] *= multiplier\n        return nums",
      "solution_hash": "d421cc12b6d5b36ad44a694627c7c0b63edfaf281c37bb7e1f85cc08b6acbeba",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07138276100158691
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            # Find the index of the first occurrence of min_val\n            index = nums.index(min_val)\n            nums[index] *= multiplier\n        return nums",
      "solution_hash": "a55de140b7088a878316f162c37d1a100ccaf186b8471884d5329216de545101",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0736546516418457
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 33.06935405731201,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}