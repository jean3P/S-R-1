{
  "problem_id": "smallest-divisible-digit-product-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
  "passed_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(x):\n            product = 1\n            while x > 0:\n                digit = x % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                x = x // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1"
  ],
  "all_solutions": [
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(x):\n            product = 1\n            while x > 0:\n                digit = x % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                x = x // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
    "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
      "solution_hash": "add4cef9da7cc96695f97a16b632acd95961294358efd306aed3a69078e21040",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06549263000488281
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(x):\n            product = 1\n            while x > 0:\n                digit = x % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                x = x // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
      "solution_hash": "11f03401b7a95508c4e1b0b5bfee67ef6ada2fd1e7f7c26b428a83dbf02916f6",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0699307918548584
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        def digit_product(num):\n            product = 1\n            while num > 0:\n                digit = num % 10\n                if digit == 0:\n                    return 0\n                product *= digit\n                num = num // 10\n            return product\n        \n        current = n\n        while True:\n            if digit_product(current) % t == 0:\n                return current\n            current += 1",
      "solution_hash": "add4cef9da7cc96695f97a16b632acd95961294358efd306aed3a69078e21040",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0697941780090332
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 47.253068923950195,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}