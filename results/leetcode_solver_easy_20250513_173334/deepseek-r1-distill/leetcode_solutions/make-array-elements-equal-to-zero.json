{
  "problem_id": "make-array-elements-equal-to-zero",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        valid = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy to avoid modifying the original array\n                temp = nums.copy()\n                curr = i\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(x == 0 for x in temp):\n                    valid += 1\n        return valid",
  "passed_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        valid = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy to avoid modifying the original array\n                temp = nums.copy()\n                curr = i\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(x == 0 for x in temp):\n                    valid += 1\n        return valid",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy of nums to simulate\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(v == 0 for v in temp):\n                    count += 1\n        return count",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions: left and right\n            for direction in ['left', 'right']:\n                # Make a copy of nums to avoid modifying the original\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in the current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # After the process, check if all elements are zero\n                if all(x == 0 for x in temp):\n                    count += 1\n        return count"
  ],
  "all_solutions": [
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        valid = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy to avoid modifying the original array\n                temp = nums.copy()\n                curr = i\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(x == 0 for x in temp):\n                    valid += 1\n        return valid",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy of nums to simulate\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(v == 0 for v in temp):\n                    count += 1\n        return count",
    "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions: left and right\n            for direction in ['left', 'right']:\n                # Make a copy of nums to avoid modifying the original\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in the current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # After the process, check if all elements are zero\n                if all(x == 0 for x in temp):\n                    count += 1\n        return count"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        valid = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy to avoid modifying the original array\n                temp = nums.copy()\n                curr = i\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(x == 0 for x in temp):\n                    valid += 1\n        return valid",
      "solution_hash": "f88244b6cfeee84321f0f77b2519afe66fe24128c8076d3f2f3c2b4b942ab8a9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08184361457824707
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions\n            for direction in ['left', 'right']:\n                # Make a copy of nums to simulate\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # Check if all elements are zero\n                if all(v == 0 for v in temp):\n                    count += 1\n        return count",
      "solution_hash": "603475aad6ecd8f063a0562be3a4f319a9a56c3c5b92e101d8c35bed2bbb7912",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08528757095336914
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def countValidSelections(self, nums: List[int]) -> int:\n        n = len(nums)\n        count = 0\n        \n        for i in range(n):\n            if nums[i] != 0:\n                continue\n            # Try both directions: left and right\n            for direction in ['left', 'right']:\n                # Make a copy of nums to avoid modifying the original\n                temp = nums.copy()\n                curr = i\n                valid = True\n                current_dir = direction\n                while True:\n                    if curr < 0 or curr >= n:\n                        break\n                    if temp[curr] == 0:\n                        # Move in the current direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                    else:\n                        # Decrement and reverse direction\n                        temp[curr] -= 1\n                        # Reverse direction\n                        current_dir = 'right' if current_dir == 'left' else 'left'\n                        # Move in the new direction\n                        if current_dir == 'right':\n                            curr += 1\n                        else:\n                            curr -= 1\n                # After the process, check if all elements are zero\n                if all(x == 0 for x in temp):\n                    count += 1\n        return count",
      "solution_hash": "38f04e605b41a6ce7cee13dcae02b8d19c15e7e5685651b0b07c63c64b1cff58",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08622527122497559
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 63.200865507125854,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}