{
  "problem_id": "convert-date-to-binary",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
  "passed_solutions": [
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\""
  ],
  "all_solutions": [
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
    "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\""
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
      "solution_hash": "a472b7d9ec4237b6edd8be89efd0e80ac8bd027b99d7df0ac16a9a759a29b5e2",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06731414794921875
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
      "solution_hash": "a472b7d9ec4237b6edd8be89efd0e80ac8bd027b99d7df0ac16a9a759a29b5e2",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07078886032104492
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = map(int, date.split('-'))\n        binary_year = bin(year)[2:]\n        binary_month = bin(month)[2:]\n        binary_day = bin(day)[2:]\n        return f\"{binary_year}-{binary_month}-{binary_day}\"",
      "solution_hash": "a472b7d9ec4237b6edd8be89efd0e80ac8bd027b99d7df0ac16a9a759a29b5e2",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07206010818481445
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 32.669524908065796,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}