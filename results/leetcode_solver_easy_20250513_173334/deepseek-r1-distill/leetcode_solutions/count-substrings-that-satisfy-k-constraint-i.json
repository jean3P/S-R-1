{
  "problem_id": "count-substrings-that-satisfy-k-constraint-i",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
  "passed_solutions": [
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n+1):\n                substr = s[i:j]\n                zeros = substr.count('0')\n                ones = substr.count('1')\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count"
  ],
  "all_solutions": [
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n+1):\n                substr = s[i:j]\n                zeros = substr.count('0')\n                ones = substr.count('1')\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
    "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
      "solution_hash": "23cf29dac36ac0985ee444228bb805125dea88c72b4f30b4147c693bd3f3e4a9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07424235343933105
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        n = len(s)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n+1):\n                substr = s[i:j]\n                zeros = substr.count('0')\n                ones = substr.count('1')\n                if zeros <= k or ones <= k:\n                    count += 1\n        return count",
      "solution_hash": "32c3ef471c796987f343e6a5c1d1ee2a955d1a832559307e5c48cec5e8affc5e",
      "test_result": {
        "status": "pass",
        "execution_time": 0.08902764320373535
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int) -> int:\n        count = 0\n        n = len(s)\n        for i in range(n):\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if s[j] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                if zero_count <= k or one_count <= k:\n                    count += 1\n        return count",
      "solution_hash": "23cf29dac36ac0985ee444228bb805125dea88c72b4f30b4147c693bd3f3e4a9",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0773000717163086
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 50.3067889213562,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}