{
  "problem_id": "the-two-sneaky-numbers-of-digitville",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = [num for num, count in frequency.items() if count == 2]\n        return result",
  "passed_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = [num for num, count in frequency.items() if count == 2]\n        return result",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        result = [num for num, count in freq.items() if count == 2]\n        return result",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        result = [num for num, cnt in count.items() if cnt == 2]\n        return result"
  ],
  "all_solutions": [
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = [num for num, count in frequency.items() if count == 2]\n        return result",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        result = [num for num, count in freq.items() if count == 2]\n        return result",
    "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        result = [num for num, cnt in count.items() if cnt == 2]\n        return result"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        frequency = {}\n        for num in nums:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        result = [num for num, count in frequency.items() if count == 2]\n        return result",
      "solution_hash": "cf0815512dafc2413b68e227c27178fae5a038a6415bb70f3fd88c2d1ae25993",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07025146484375
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        freq = {}\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        result = [num for num, count in freq.items() if count == 2]\n        return result",
      "solution_hash": "8da2b472c626baca79d3286925f302ad435da86c889d6790b142a5cc5df99f84",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07339119911193848
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getSneakyNumbers(self, nums: List[int]) -> List[int]:\n        count = {}\n        for num in nums:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        result = [num for num, cnt in count.items() if cnt == 2]\n        return result",
      "solution_hash": "7f4ababe19e0387af0f8db428202720a80c26389027433f0c144941b970011c5",
      "test_result": {
        "status": "pass",
        "execution_time": 0.0735008716583252
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 30.231471061706543,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}