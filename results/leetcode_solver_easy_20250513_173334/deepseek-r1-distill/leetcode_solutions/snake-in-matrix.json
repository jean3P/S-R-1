{
  "problem_id": "snake-in-matrix",
  "problem_title": "",
  "difficulty": "Easy",
  "status": "solved",
  "best_solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
  "passed_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n            elif cmd == \"RIGHT\":\n                j += 1\n        return i * n + j"
  ],
  "all_solutions": [
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
    "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n            elif cmd == \"RIGHT\":\n                j += 1\n        return i * n + j"
  ],
  "total_candidates": 3,
  "nodes_explored": 3,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
      "solution_hash": "10501d21597a07f52611266e737e6a5ebb971f1e4a50c8a452f6cf9c7e5c4425",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06558704376220703
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"RIGHT\":\n                j += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n        return i * n + j",
      "solution_hash": "10501d21597a07f52611266e737e6a5ebb971f1e4a50c8a452f6cf9c7e5c4425",
      "test_result": {
        "status": "pass",
        "execution_time": 0.06864070892333984
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        i, j = 0, 0\n        for cmd in commands:\n            if cmd == \"UP\":\n                i -= 1\n            elif cmd == \"DOWN\":\n                i += 1\n            elif cmd == \"LEFT\":\n                j -= 1\n            elif cmd == \"RIGHT\":\n                j += 1\n        return i * n + j",
      "solution_hash": "c0ac73fa3e2a8df8f6be66f00c4189ad890ca3d65632fed83b680582e1abc251",
      "test_result": {
        "status": "pass",
        "execution_time": 0.07001209259033203
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 3,
    "candidates_generated": 3,
    "tests_passed": 3,
    "tests_failed": 0,
    "test_errors": 0,
    "execution_times": [],
    "tree_depth": 0
  },
  "processing_time": 106.32918000221252,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.75,
      "pass@3": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: invalid syntax (<string>, line 101)",
            "completion_id": 3
          }
        ]
      ]
    },
    "solutions_evaluated": 4,
    "test_cases": 1
  }
}