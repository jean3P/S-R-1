{
  "problem_id": "count-the-number-of-good-nodes",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        if not edges:\n            return 0\n        \n        n = len(edges) + 1\n        # Build adjacency list\n        adj = [[] for _ in range(n)]\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # Build the tree structure with parent pointers\n        parent = [-1] * n\n        children = [[] for _ in range(n)]\n        visited = [False] * n\n        q = deque([0])\n        visited[0] = True\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    parent[v] = u\n                    children[u].append(v)\n                    q.append(v)\n        \n        # Compute subtree sizes using post-order traversal\n        subtree_size = [1] * n\n        stack = []\n        visited = [False] * n\n        stack.append((0, False))\n        while stack:\n            node, processed = stack.pop()\n            if processed:\n                for child in children[node]:\n                    subtree_size[node] += subtree_size[child]\n            else:\n                stack.append((node, True))\n                for child in reversed(children[node]):\n                    stack.append((child, False))\n        \n        # Count good nodes\n        good_count = 0\n        for node in range(n):\n            # Get all children's subtree sizes\n            child_sizes = [subtree_size[child] for child in children[node]]\n            if not child_sizes:\n                # Leaf nodes are good\n                good_count += 1\n            else:\n                # Check if all sizes are equal\n                first = child_sizes[0]\n                all_equal = True\n                for s in child_sizes[1:]:\n                    if s != first:\n                        all_equal = False\n                        break\n                if all_equal:\n                    good_count += 1\n        return good_count",
  "passed_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        if not edges:\n            return 0\n        \n        n = len(edges) + 1\n        # Build adjacency list\n        adj = [[] for _ in range(n)]\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # Build the tree structure with parent pointers\n        parent = [-1] * n\n        children = [[] for _ in range(n)]\n        visited = [False] * n\n        q = deque([0])\n        visited[0] = True\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    parent[v] = u\n                    children[u].append(v)\n                    q.append(v)\n        \n        # Compute subtree sizes using post-order traversal\n        subtree_size = [1] * n\n        stack = []\n        visited = [False] * n\n        stack.append((0, False))\n        while stack:\n            node, processed = stack.pop()\n            if processed:\n                for child in children[node]:\n                    subtree_size[node] += subtree_size[child]\n            else:\n                stack.append((node, True))\n                for child in reversed(children[node]):\n                    stack.append((child, False))\n        \n        # Count good nodes\n        good_count = 0\n        for node in range(n):\n            # Get all children's subtree sizes\n            child_sizes = [subtree_size[child] for child in children[node]]\n            if not child_sizes:\n                # Leaf nodes are good\n                good_count += 1\n            else:\n                # Check if all sizes are equal\n                first = child_sizes[0]\n                all_equal = True\n                for s in child_sizes[1:]:\n                    if s != first:\n                        all_equal = False\n                        break\n                if all_equal:\n                    good_count += 1\n        return good_count"
  ],
  "all_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        if not edges:\n            return 0\n        \n        n = len(edges) + 1\n        # Build adjacency list\n        adj = [[] for _ in range(n)]\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # Build the tree structure with parent pointers\n        parent = [-1] * n\n        children = [[] for _ in range(n)]\n        visited = [False] * n\n        q = deque([0])\n        visited[0] = True\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    parent[v] = u\n                    children[u].append(v)\n                    q.append(v)\n        \n        # Compute subtree sizes using post-order traversal\n        subtree_size = [1] * n\n        stack = []\n        visited = [False] * n\n        stack.append((0, False))\n        while stack:\n            node, processed = stack.pop()\n            if processed:\n                for child in children[node]:\n                    subtree_size[node] += subtree_size[child]\n            else:\n                stack.append((node, True))\n                for child in reversed(children[node]):\n                    stack.append((child, False))\n        \n        # Count good nodes\n        good_count = 0\n        for node in range(n):\n            # Get all children's subtree sizes\n            child_sizes = [subtree_size[child] for child in children[node]]\n            if not child_sizes:\n                # Leaf nodes are good\n                good_count += 1\n            else:\n                # Check if all sizes are equal\n                first = child_sizes[0]\n                all_equal = True\n                for s in child_sizes[1:]:\n                    if s != first:\n                        all_equal = False\n                        break\n                if all_equal:\n                    good_count += 1\n        return good_count"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        if not edges:\n            return 0\n        \n        n = len(edges) + 1\n        # Build adjacency list\n        adj = [[] for _ in range(n)]\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # Build the tree structure with parent pointers\n        parent = [-1] * n\n        children = [[] for _ in range(n)]\n        visited = [False] * n\n        q = deque([0])\n        visited[0] = True\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    parent[v] = u\n                    children[u].append(v)\n                    q.append(v)\n        \n        # Compute subtree sizes using post-order traversal\n        subtree_size = [1] * n\n        stack = []\n        visited = [False] * n\n        stack.append((0, False))\n        while stack:\n            node, processed = stack.pop()\n            if processed:\n                for child in children[node]:\n                    subtree_size[node] += subtree_size[child]\n            else:\n                stack.append((node, True))\n                for child in reversed(children[node]):\n                    stack.append((child, False))\n        \n        # Count good nodes\n        good_count = 0\n        for node in range(n):\n            # Get all children's subtree sizes\n            child_sizes = [subtree_size[child] for child in children[node]]\n            if not child_sizes:\n                # Leaf nodes are good\n                good_count += 1\n            else:\n                # Check if all sizes are equal\n                first = child_sizes[0]\n                all_equal = True\n                for s in child_sizes[1:]:\n                    if s != first:\n                        all_equal = False\n                        break\n                if all_equal:\n                    good_count += 1\n        return good_count",
      "solution_hash": "68f9096d210334580cc53575735a8d8691319bb206e335c9ed70c92f762ba331",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.835852861404419,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.835852861404419
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 2064,
        "max": 2064,
        "avg": 2064.0
      },
      "algorithm_approaches": {
        "breadth_first_search": 1
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 1
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 11,
            "max": 11,
            "avg": 11.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 6,
            "max": 6,
            "avg": 6.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 23,
            "max": 23,
            "avg": 23.0,
            "variance": 0.0
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 64,
            "max": 64,
            "avg": 64.0,
            "variance": 0.0
          },
          "char_count": {
            "min": 2064,
            "max": 2064,
            "avg": 2064.0,
            "variance": 0.0
          },
          "max_indent": {
            "min": 24,
            "max": 24,
            "avg": 24.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 64.0,
          "avg_loop_count": 11.0,
          "avg_condition_count": 8.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 23.0,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 1.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "feedback_impact": {
      "depths": {},
      "error_types": {},
      "test_case_improvements": {},
      "error_transitions": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0,
        "test_success_rate": 1.0
      },
      "test_results": {
        "total": 1,
        "passed": 1,
        "failed": 0,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 0,
        "total_improvements": 0,
        "recovery_rate": 0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 91.87613463401794,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}