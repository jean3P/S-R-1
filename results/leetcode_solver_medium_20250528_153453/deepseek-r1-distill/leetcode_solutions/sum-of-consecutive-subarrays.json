{
  "problem_id": "sum-of-consecutive-subarrays",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total = sum(nums) % MOD\n        current_sequences = []\n        \n        for i in range(1, n):\n            diff = nums[i] - nums[i-1]\n            if diff not in (1, -1):\n                current_sequences = []\n                continue\n            \n            new_sequences = []\n            for seq in current_sequences:\n                if seq['diff'] == diff:\n                    new_sequences.append(seq)\n            \n            new_sequences.append({'start': i-1, 'diff': diff})\n            current_sequences = new_sequences\n            \n            for seq in current_sequences:\n                start = seq['start']\n                sub_sum = sum(nums[start:i+1])\n                total = (total + sub_sum) % MOD\n        \n        return total % MOD",
  "passed_solutions": [
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total = 0\n        \n        for i in range(n):\n            # Each single element is a consecutive subarray\n            total = (total + nums[i]) % MOD\n            \n            # Check for increasing and decreasing sequences starting at i\n            for step in [1, -1]:\n                current_sum = nums[i]\n                prev = nums[i]\n                for j in range(i + 1, n):\n                    if nums[j] - prev == step:\n                        current_sum += nums[j]\n                        total = (total + current_sum) % MOD\n                        prev = nums[j]\n                    else:\n                        break\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total = sum(nums) % MOD\n        current_sequences = []\n        \n        for i in range(1, n):\n            diff = nums[i] - nums[i-1]\n            if diff not in (1, -1):\n                current_sequences = []\n                continue\n            \n            new_sequences = []\n            for seq in current_sequences:\n                if seq['diff'] == diff:\n                    new_sequences.append(seq)\n            \n            new_sequences.append({'start': i-1, 'diff': diff})\n            current_sequences = new_sequences\n            \n            for seq in current_sequences:\n                start = seq['start']\n                sub_sum = sum(nums[start:i+1])\n                total = (total + sub_sum) % MOD\n        \n        return total % MOD"
  ],
  "all_solutions": [
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sum = 0\n        prev = nums[0]\n        direction = 0  # 0: start, 1: increasing, -1: decreasing\n        count = 1\n        current_sum = nums[0]\n        total += current_sum\n        \n        for i in range(1, n):\n            diff = nums[i] - prev\n            if diff == 1:\n                new_dir = 1\n            elif diff == -1:\n                new_dir = -1\n            else:\n                new_dir = 0\n            \n            if new_dir == 0:\n                # Start a new subarray\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                prev = nums[i]\n                direction = 0\n                count = 1\n            else:\n                if direction == 0:\n                    # Starting a new consecutive subarray\n                    direction = new_dir\n                    current_sum += nums[i]\n                    total = (total + current_sum) % MOD\n                    count += 1\n                else:\n                    if new_dir == direction:\n                        # Continue the current consecutive subarray\n                        current_sum += nums[i]\n                        total = (total + current_sum) % MOD\n                        count += 1\n                    else:\n                        # Change in direction, reset\n                        current_sum = nums[i-1] + nums[i]\n                        total = (total + current_sum) % MOD\n                        direction = new_dir\n                        count = 2\n            prev = nums[i]\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sum = 0\n        prev = nums[0]\n        direction = 0  # 0: start, 1: increasing, -1: decreasing\n        count = 1\n        current_sum = nums[0]\n        total += current_sum\n        \n        for i in range(1, n):\n            diff = nums[i] - prev\n            if diff == 1:\n                new_dir = 1\n            elif diff == -1:\n                new_dir = -1\n            else:\n                new_dir = 0\n            \n            if new_dir == 0:\n                # Start a new subarray\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                prev = nums[i]\n                direction = 0\n                count = 1\n            else:\n                if direction == 0:\n                    # Starting a new consecutive subarray\n                    direction = new_dir\n                    current_sum += nums[i]\n                    total = (total + current_sum) % MOD\n                    count += 1\n                else:\n                    if new_dir == direction:\n                        # Continue the current consecutive subarray\n                        current_sum += nums[i]\n                        total = (total + current_sum) % MOD\n                        count += 1\n                    else:\n                        # Change in direction, reset\n                        # The new subarray starts from the previous element\n                        current_sum = nums[i-1] + nums[i]\n                        total = (total + current_sum) % MOD\n                        direction = new_dir\n                        count = 2\n            prev = nums[i]\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        for i in range(n):\n            # Check for increasing sequences starting at i\n            current_sum = nums[i]\n            total = (total + current_sum) % MOD\n            for j in range(i + 1, n):\n                if nums[j] - nums[j - 1] == 1:\n                    current_sum += nums[j]\n                    total = (total + current_sum) % MOD\n                else:\n                    break\n            # Check for decreasing sequences starting at i\n            current_sum = nums[i]\n            total = (total + current_sum) % MOD\n            for j in range(i + 1, n):\n                if nums[j] - nums[j - 1] == -1:\n                    current_sum += nums[j]\n                    total = (total + current_sum) % MOD\n                else:\n                    break\n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sum = 0\n        prev = nums[0]\n        direction = 0  # 0: start, 1: increasing, -1: decreasing\n        start = 0\n        \n        for i in range(n):\n            if i == 0:\n                current_sum = nums[i]\n                total += current_sum\n                continue\n            \n            diff = nums[i] - nums[i-1]\n            if diff == 1:\n                new_dir = 1\n            elif diff == -1:\n                new_dir = -1\n            else:\n                new_dir = 0\n            \n            if new_dir == 0:\n                # Start a new subarray\n                start = i\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                prev = nums[i]\n                direction = 0\n            else:\n                if direction == 0:\n                    # Starting a new consecutive subarray\n                    direction = new_dir\n                    current_sum += nums[i]\n                    total = (total + current_sum) % MOD\n                    start = i - 1\n                else:\n                    if new_dir == direction:\n                        # Continue the current consecutive subarray\n                        current_sum += nums[i]\n                        total = (total + current_sum) % MOD\n                    else:\n                        # Change in direction, reset\n                        # The new subarray starts from the previous element\n                        start = i - 1\n                        current_sum = nums[i-1] + nums[i]\n                        total = (total + current_sum) % MOD\n                        direction = new_dir\n            prev = nums[i]\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sum = 0\n        prev = nums[0]\n        direction = 0  # 0: start, 1: increasing, -1: decreasing\n        start = 0\n        \n        for i in range(n):\n            if i == 0:\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                continue\n            \n            diff = nums[i] - prev\n            if diff == 1:\n                new_dir = 1\n            elif diff == -1:\n                new_dir = -1\n            else:\n                new_dir = 0\n            \n            if new_dir == 0:\n                # Start a new subarray\n                start = i\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                prev = nums[i]\n                direction = 0\n            else:\n                if direction == 0:\n                    # Starting a new consecutive subarray\n                    direction = new_dir\n                    current_sum += nums[i]\n                    total = (total + current_sum) % MOD\n                    prev = nums[i]\n                else:\n                    if new_dir == direction:\n                        # Continue the current consecutive subarray\n                        current_sum += nums[i]\n                        total = (total + current_sum) % MOD\n                        prev = nums[i]\n                    else:\n                        # Change in direction, reset\n                        # The new subarray starts from the previous element\n                        start = i - 1\n                        current_sum = nums[i-1] + nums[i]\n                        total = (total + current_sum) % MOD\n                        direction = new_dir\n                        prev = nums[i]\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sequences = []\n        \n        for i in range(n):\n            total = (total + nums[i]) % MOD\n            new_sequences = []\n            for seq in current_sequences:\n                prev_diff = seq['diff']\n                start = seq['start']\n                new_diff = nums[i] - nums[i-1]\n                if new_diff == prev_diff:\n                    new_sequences.append({'start': start, 'diff': new_diff})\n                else:\n                    if new_diff in (1, -1):\n                        new_sequences.append({'start': i-1, 'diff': new_diff})\n            if i > 0:\n                diff = nums[i] - nums[i-1]\n                if diff in (1, -1):\n                    new_sequences.append({'start': i-1, 'diff': diff})\n            current_sequences = new_sequences\n            for seq in current_sequences:\n                start = seq['start']\n                sum_sub = sum(nums[start:i+1])\n                total = (total + sum_sub) % MOD\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total = 0\n        \n        for i in range(n):\n            # Each single element is a consecutive subarray\n            total = (total + nums[i]) % MOD\n            \n            # Check for increasing and decreasing sequences starting at i\n            for step in [1, -1]:\n                current_sum = nums[i]\n                prev = nums[i]\n                for j in range(i + 1, n):\n                    if nums[j] - prev == step:\n                        current_sum += nums[j]\n                        total = (total + current_sum) % MOD\n                        prev = nums[j]\n                    else:\n                        break\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        \n        total = sum(nums) % MOD\n        current_sequences = []\n        \n        for i in range(1, n):\n            diff = nums[i] - nums[i-1]\n            if diff not in (1, -1):\n                current_sequences = []\n                continue\n            \n            new_sequences = []\n            for seq in current_sequences:\n                if seq['diff'] == diff:\n                    new_sequences.append(seq)\n            \n            new_sequences.append({'start': i-1, 'diff': diff})\n            current_sequences = new_sequences\n            \n            for seq in current_sequences:\n                start = seq['start']\n                sub_sum = sum(nums[start:i+1])\n                total = (total + sub_sum) % MOD\n        \n        return total % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_length = 1  # Each single element is a consecutive subarray\n        prev_diff = None\n        \n        for i in range(1, n):\n            diff = nums[i] - nums[i-1]\n            if diff == 1 or diff == -1:\n                if prev_diff is None:\n                    # Starting a new consecutive subarray\n                    current_length = 2\n                    prev_diff = diff\n                else:\n                    if diff == prev_diff:\n                        current_length += 1\n                    else:\n                        # The direction changed, so we can only start a new subarray of length 2\n                        current_length = 2\n                        prev_diff = diff\n            else:\n                # Not consecutive, reset\n                prev_diff = None\n                current_length = 1\n            \n            # Add all possible subarrays ending at i\n            # The number of new subarrays is current_length\n            # The sum of these subarrays can be calculated based on the previous sum\n            # For example, if current_length is k, then the new subarrays are of lengths 1 to k\n            # But since we are adding to the total, we can compute the sum incrementally\n            # Let's compute the sum of the current consecutive subarray ending at i\n            # The sum is sum(nums[i - current_length + 1 : i + 1])\n            # But calculating this directly each time would be O(n^2), which is too slow for n=1e5\n            # So we need a way to compute this efficiently\n            \n            # Instead, we can keep track of the sum of the current consecutive subarray\n            # Let's maintain a variable current_sum which is the sum of the current consecutive subarray\n            # When we extend the subarray, we add the new element\n            # When the subarray resets, we start fresh\n            \n            # So, let's adjust the approach:\n            # We'll track the current consecutive subarray's start index and its sum\n            # For each i, if the current subarray can be extended, we do so and update the sum\n            # Otherwise, we reset\n            \n            # Let's re-implement with this in mind\n            \n            # Initialize variables\n            total = 0\n            current_start = 0\n            current_sum = nums[0]\n            total += current_sum\n            \n            for i in range(1, n):\n                diff = nums[i] - nums[i-1]\n                if diff == 1 or diff == -1:\n                    if i == 1 or (nums[i-1] - nums[i-2] == diff):\n                        # Continue the consecutive subarray\n                        current_sum += nums[i]\n                        current_length += 1\n                    else:\n                        # Start a new consecutive subarray\n                        current_start = i-1\n                        current_sum = nums[i-1] + nums[i]\n                        current_length = 2\n                else:\n                    # Reset\n                    current_start = i\n                    current_sum = nums[i]\n                    current_length = 1\n                \n                # Add all possible subarrays ending at i\n                # The number of new subarrays is current_length\n                # The sum of these subarrays is the sum of the last k elements, where k ranges from 1 to current_length\n                # But calculating this directly is O(n^2), which is too slow\n                # Instead, we can find a mathematical formula to compute the sum of all subarrays ending at i\n                # For a consecutive subarray of length L ending at i, the number of subarrays is L\n                # The sum of all these subarrays is sum_{k=1 to L} sum_{j=i-L+1 to i} nums[j]\n                # This can be simplified using prefix sums\n                \n                # Let's precompute the prefix sums\n                prefix = [0] * (n + 1)\n                for i in range(n):\n                    prefix[i+1] = prefix[i] + nums[i]\n                \n                # Now, for each i, find all possible consecutive subarrays ending at i\n                # For each such subarray of length l, add (prefix[i+1] - prefix[i+1 - l]) to the total\n                # But again, this is O(n^2), which is not feasible for n=1e5\n                \n                # We need a way to compute this in O(n) time\n                # Let's think differently: for each position, determine the maximum possible consecutive subarray ending there\n                # Then, for each such subarray of length l, the number of subarrays is l, and their sum can be computed based on the prefix sums\n                \n                # Let's try to find for each i, the maximum l such that the subarray ending at i is consecutive\n                # Then, the sum contributed by all subarrays ending at i is sum_{k=1 to l} (prefix[i+1] - prefix[i+1 -k])\n                # Which is equal to sum_{k=1 to l} sum_{m=i+1 -k}^{i} nums[m]\n                # This can be rewritten as sum_{m=i - l +1}^{i} nums[m] * (i - m + 1)\n                # Which is the same as sum_{m=0}^{l-1} nums[i - m] * (m + 1)\n                \n                # To compute this efficiently, we can keep track of the current consecutive subarray's start and the sum of the elements multiplied by their respective counts\n                \n                # Let's maintain two variables:\n                # - current_sum: the sum of the current consecutive subarray\n                # - current_contribution: the sum of nums[i] * (position in subarray)\n                # For example, for subarray [a, b, c], the contribution is a*1 + b*2 + c*3\n                # When we add a new element d, the new contribution is a*2 + b*3 + c*4 + d*1\n                # Which can be computed as (current_contribution + current_sum) + d\n                \n                # So, let's adjust the variables:\n                # current_sum is the sum of the current consecutive subarray\n                # current_contribution is the sum of nums[j] * (i - j + 1) for j in current subarray\n                # When we extend the subarray by one element, the contribution becomes (current_contribution + current_sum) + new_element\n                # Because each existing element's multiplier increases by 1, and the new element has multiplier 1\n                \n                # Let's implement this:\n                current_sum = 0\n                current_contribution = 0\n                total = 0\n                \n                for i in range(n):\n                    if i == 0:\n                        current_sum = nums[i]\n                        current_contribution = nums[i]\n                        total += current_contribution\n                        continue\n                    \n                    diff = nums[i] - nums[i-1]\n                    if diff == 1 or diff == -1:\n                        if i == 1 or (nums[i-1] - nums[i-2] == diff):\n                            # Extend the current subarray\n                            current_sum += nums[i]\n                            current_contribution = current_contribution + current_sum\n                        else:\n                            # Start a new subarray with the previous element and current\n                            current_sum = nums[i-1] + nums[i]\n                            current_contribution = nums[i-1] * 2 + nums[i]\n                    else:\n                        # Reset to single element\n                        current_sum = nums[i]\n                        current_contribution = nums[i]\n                    \n                    total = (total + current_contribution) % MOD\n                \n                return total % MOD"
  ],
  "total_candidates": 9,
  "nodes_explored": 9,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        if n == 0:\n            return 0\n        total = 0\n        current_sum = 0\n        prev = nums[0]\n        direction = 0  # 0: start, 1: increasing, -1: decreasing\n        count = 1\n        current_sum = nums[0]\n        total += current_sum\n        \n        for i in range(1, n):\n            diff = nums[i] - prev\n            if diff == 1:\n                new_dir = 1\n            elif diff == -1:\n                new_dir = -1\n            else:\n                new_dir = 0\n            \n            if new_dir == 0:\n                # Start a new subarray\n                current_sum = nums[i]\n                total = (total + current_sum) % MOD\n                prev = nums[i]\n                direction = 0\n                count = 1\n            else:\n                if direction == 0:\n                    # Starting a new consecutive subarray\n                    direction = new_dir\n                    current_sum += nums[i]\n                    total = (total + current_sum) % MOD\n                    count += 1\n                else:\n                    if new_dir == direction:\n                        # Continue the current consecutive subarray\n                        current_sum += nums[i]\n                        total = (total + current_sum) % MOD\n                        count += 1\n                    else:\n                        # Change in direction, reset\n                        current_sum = nums[i-1] + nums[i]\n                        total = (total + current_sum) % MOD\n                        direction = new_dir\n                        count = 2\n            prev = nums[i]\n        \n        return total % MOD",
      "solution_hash": "d4ee6fe901f27260c65a578e5e5e45eb6afffe00935db2a3fc63693c9e544f34",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpwrdzuni6.py\", line 269, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpwrdzuni6.py\", line 136, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpwrdzuni6.py` failed. (See above for error)\n",
        "execution_time": 13.727179527282715,
        "failed_tests": [
          {
            "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
            "expected": "72",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpwrdzuni6.py\", line 269, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpwrdzuni6.py\", line 136, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpwrdzuni6.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 9,
    "candidates_generated": 9,
    "tests_passed": 2,
    "tests_failed": 7,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.727179527282715,
      13.727179527282715,
      13.695175647735596,
      13.748714685440063,
      13.627875089645386,
      13.847120761871338,
      13.824743032455444,
      13.782843589782715,
      13.744830846786499
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 8,
      "unique_ratio": 0.8888888888888888,
      "similarity_score": 0.8237018180475926,
      "solution_lengths": {
        "min": 781,
        "max": 7866,
        "avg": 2115.5555555555557
      },
      "algorithm_approaches": {
        "sliding_window": 1,
        "other": 8
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 9
          },
          "uses_list": {
            "true_ratio": 0.2222222222222222,
            "count": 2
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.5555555555555556,
            "count": 5
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 4,
            "avg": 2.2222222222222223,
            "variance": 1.2839506172839505
          },
          "if_count": {
            "min": 1,
            "max": 9,
            "avg": 4.777777777777778,
            "variance": 4.617283950617284
          },
          "else_count": {
            "min": 0,
            "max": 7,
            "avg": 3.0,
            "variance": 4.222222222222222
          },
          "return_count": {
            "min": 1,
            "max": 2,
            "avg": 1.8888888888888888,
            "variance": 0.09876543209876545
          },
          "assignment_count": {
            "min": 10,
            "max": 55,
            "avg": 28.11111111111111,
            "variance": 210.0987654320988
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 23,
            "max": 148,
            "avg": 52.888888888888886,
            "variance": 1287.2098765432102
          },
          "char_count": {
            "min": 781,
            "max": 7866,
            "avg": 2115.5555555555557,
            "variance": 4316333.580246914
          },
          "max_indent": {
            "min": 20,
            "max": 28,
            "avg": 23.555555555555557,
            "variance": 5.135802469135803
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 9
        },
        "avg_complexity_metrics": {
          "avg_line_count": 52.888888888888886,
          "avg_loop_count": 2.2222222222222223,
          "avg_condition_count": 8.222222222222221,
          "avg_method_count": 1.0,
          "avg_assignment_count": 28.11111111111111,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 6,
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 1
      },
      "first_failing_tests": {
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 6,
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 6,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 3,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 6,
        "assertion_failure->unknown": 2
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5555555555555556,
        "solutions_per_depth": {
          "0": 1,
          "1": 2,
          "2": 6
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.20000000000000007,
        "pass@3": 0.5333333333333333,
        "pass@5": 0.7777777777777778,
        "pass@10": 1.0
      },
      "solutions_evaluated": 10,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.2222222222222222,
        "branch_success_rate": 0.2222222222222222,
        "test_success_rate": 0.2222222222222222
      },
      "test_results": {
        "total": 9,
        "passed": 2,
        "failed": 7,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 3,
        "total_improvements": 2,
        "recovery_rate": 0.6666666666666666
      },
      "top_errors": [
        [
          "assertion_failure",
          3
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
          6
        ],
        [
          "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 895.8753447532654,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.20000000000000007,
      "pass@3": 0.5333333333333333,
      "pass@5": 0.7777777777777778,
      "pass@10": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 9
          }
        ]
      ]
    },
    "solutions_evaluated": 10,
    "test_cases": 1
  }
}