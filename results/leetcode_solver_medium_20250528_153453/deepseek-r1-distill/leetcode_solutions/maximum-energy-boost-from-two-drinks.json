{
  "problem_id": "maximum-energy-boost-from-two-drinks",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        # dp[i][0] represents the max energy ending with A at i-th hour\n        # dp[i][1] represents the max energy ending with B at i-th hour\n        dp = [[0]*2 for _ in range(n)]\n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose A at i, we can either continue from A or switch from B (but then we lose i-1)\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], \n                          (dp[i-2][1] + energyDrinkA[i]) if i >=2 else energyDrinkA[i])\n            # Similarly for B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], \n                          (dp[i-2][0] + energyDrinkB[i]) if i >=2 else energyDrinkB[i])\n        \n        return max(dp[n-1][0], dp[n-1][1])",
  "passed_solutions": [
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        # dp[i][0] represents the max energy ending with A at i-th hour\n        # dp[i][1] represents the max energy ending with B at i-th hour\n        dp = [[0]*2 for _ in range(n)]\n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose A at i, we can either continue from A or switch from B (but then we lose i-1)\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], \n                          (dp[i-2][1] + energyDrinkA[i]) if i >=2 else energyDrinkA[i])\n            # Similarly for B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], \n                          (dp[i-2][0] + energyDrinkB[i]) if i >=2 else energyDrinkB[i])\n        \n        return max(dp[n-1][0], dp[n-1][1])"
  ],
  "all_solutions": [
    "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        # dp[i][0] represents the max energy ending with A at i-th hour\n        # dp[i][1] represents the max energy ending with B at i-th hour\n        dp = [[0]*2 for _ in range(n)]\n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose A at i, we can either continue from A or switch from B (but then we lose i-1)\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], \n                          (dp[i-2][1] + energyDrinkA[i]) if i >=2 else energyDrinkA[i])\n            # Similarly for B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], \n                          (dp[i-2][0] + energyDrinkB[i]) if i >=2 else energyDrinkB[i])\n        \n        return max(dp[n-1][0], dp[n-1][1])"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def maxEnergyBoost(self, energyDrinkA: List[int], energyDrinkB: List[int]) -> int:\n        n = len(energyDrinkA)\n        if n == 0:\n            return 0\n        # dp[i][0] represents the max energy ending with A at i-th hour\n        # dp[i][1] represents the max energy ending with B at i-th hour\n        dp = [[0]*2 for _ in range(n)]\n        dp[0][0] = energyDrinkA[0]\n        dp[0][1] = energyDrinkB[0]\n        \n        for i in range(1, n):\n            # If we choose A at i, we can either continue from A or switch from B (but then we lose i-1)\n            dp[i][0] = max(dp[i-1][0] + energyDrinkA[i], \n                          (dp[i-2][1] + energyDrinkA[i]) if i >=2 else energyDrinkA[i])\n            # Similarly for B\n            dp[i][1] = max(dp[i-1][1] + energyDrinkB[i], \n                          (dp[i-2][0] + energyDrinkB[i]) if i >=2 else energyDrinkB[i])\n        \n        return max(dp[n-1][0], dp[n-1][1])",
      "solution_hash": "b4d74eb20a5c48d739fa654d03b106b55547b512c0bc43b0724ea74b5684b3a4",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.797839164733887,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.797839164733887
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 943,
        "max": 943,
        "avg": 943.0
      },
      "algorithm_approaches": {
        "dynamic_programming": 1
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 1
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 3,
            "max": 3,
            "avg": 3.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 9,
            "max": 9,
            "avg": 9.0,
            "variance": 0.0
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 20,
            "max": 20,
            "avg": 20.0,
            "variance": 0.0
          },
          "char_count": {
            "min": 943,
            "max": 943,
            "avg": 943.0,
            "variance": 0.0
          },
          "max_indent": {
            "min": 26,
            "max": 26,
            "avg": 26.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 20.0,
          "avg_loop_count": 2.0,
          "avg_condition_count": 5.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 9.0,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 1.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "feedback_impact": {
      "depths": {},
      "error_types": {},
      "test_case_improvements": {},
      "error_transitions": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0,
        "test_success_rate": 1.0
      },
      "test_results": {
        "total": 1,
        "passed": 1,
        "failed": 0,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 0,
        "total_improvements": 0,
        "recovery_rate": 0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 100.54322242736816,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}