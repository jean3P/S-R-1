{
  "problem_id": "maximize-score-of-numbers-in-ranges",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        left = 0\n        right = intervals[-1][1] - intervals[0][0]\n        max_gap = 0\n\n        def is_possible(gap):\n            prev = intervals[0][0]\n            for i in range(1, len(intervals)):\n                s, e = intervals[i]\n                if s >= prev + gap:\n                    prev = s\n                elif e >= prev + gap:\n                    prev = prev + gap\n                else:\n                    return False\n            return True\n\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                max_gap = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return max_gap",
  "passed_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        left = 0\n        right = intervals[-1][1] - intervals[0][0]\n        max_gap = 0\n\n        def is_possible(gap):\n            prev = intervals[0][0]\n            for i in range(1, len(intervals)):\n                s, e = intervals[i]\n                if s >= prev + gap:\n                    prev = s\n                elif e >= prev + gap:\n                    prev = prev + gap\n                else:\n                    return False\n            return True\n\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                max_gap = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return max_gap"
  ],
  "all_solutions": [
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        max_score = 0\n        prev = start[0] + d\n        for i in range(1, n):\n            current_min = start[i]\n            if current_min > prev:\n                max_score = max(max_score, current_min - prev)\n                prev = current_min\n            else:\n                current_max = start[i] + d\n                if current_max > prev:\n                    max_score = max(max_score, current_max - prev)\n                    prev = current_max\n                else:\n                    prev = current_max\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        n = len(intervals)\n        max_score = 0\n        prev = intervals[0][1]\n        for i in range(1, n):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                max_score = current_start - prev\n                prev = current_start\n            else:\n                if current_end > prev:\n                    max_score = max(max_score, current_end - prev)\n                    prev = current_end\n                else:\n                    prev = current_end\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        n = len(intervals)\n        max_score = 0\n        prev = intervals[0][1]\n        for i in range(1, n):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                current_score = current_start - prev\n                prev = current_start\n            else:\n                if current_end > prev:\n                    current_score = current_end - prev\n                    prev = current_end\n                else:\n                    current_score = 0\n            if current_score > max_score:\n                max_score = current_score\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        n = len(intervals)\n        if n == 0:\n            return 0\n        \n        prev = intervals[0][1]\n        max_score = 0\n        \n        for i in range(1, n):\n            current_start, current_end = intervals[i]\n            \n            if current_start > prev:\n                current_gap = current_start - prev\n                if current_gap > max_score:\n                    max_score = current_gap\n                prev = current_start\n            else:\n                new_pos = max(current_start, prev - max_score)\n                if new_pos > current_end:\n                    new_pos = current_end\n                    current_gap = new_pos - prev\n                    if current_gap < max_score:\n                        max_score = current_gap\n                else:\n                    current_gap = new_pos - prev\n                    if current_gap > max_score:\n                        max_score = current_gap\n                prev = new_pos\n        \n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        n = len(intervals)\n        if n == 0:\n            return 0\n        max_score = 0\n        prev = intervals[0][1]\n        for i in range(1, n):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                current_score = current_start - prev\n                prev = current_start\n            else:\n                if current_end > prev:\n                    current_score = current_end - prev\n                    prev = current_end\n                else:\n                    current_score = 0\n            if current_score > max_score:\n                max_score = current_score\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([s + d for s in start])\n        max_score = 0\n        prev = intervals[0]\n        for i in range(1, len(intervals)):\n            current = intervals[i]\n            if current > prev:\n                max_score = max(max_score, current - prev)\n                prev = current\n            else:\n                prev = current\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(prev)\n        max_score = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < max_score:\n                max_score = diff\n        return max_score if max_score != float('inf') else 0",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        prev = intervals[0][1]\n        max_score = 0\n        for i in range(1, len(intervals)):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                max_score = current_start - prev\n                prev = current_start\n            else:\n                if current_end > prev:\n                    max_score = max(max_score, current_end - prev)\n                    prev = current_end\n                else:\n                    prev = current_end\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([s + d for s in start])\n        max_score = 0\n        for i in range(1, len(intervals)):\n            gap = intervals[i] - intervals[i-1]\n            max_score = max(max_score, (gap + 1) // 2)\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        prev_end = intervals[0][1]\n        max_score = 0\n        for i in range(1, len(intervals)):\n            current_start, current_end = intervals[i]\n            if current_start > prev_end:\n                max_score = max(max_score, current_start - prev_end)\n                prev_end = current_end\n            else:\n                prev_end = max(prev_end, current_end)\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        prev_end = intervals[0][1]\n        max_score = 0\n        for i in range(1, len(intervals)):\n            current_start, current_end = intervals[i]\n            if current_start > prev_end:\n                max_score = max(max_score, current_start - prev_end)\n                prev_end = current_end\n            else:\n                prev_end = max(prev_end, current_end)\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        prev = intervals[0][1]\n        max_score = 0\n        for i in range(1, len(intervals)):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                max_score = max(max_score, current_start - prev)\n                prev = current_end\n            else:\n                prev = max(prev, current_end)\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        prev = intervals[0][1]\n        max_score = 0\n        for i in range(1, len(intervals)):\n            current_start, current_end = intervals[i]\n            if current_start > prev:\n                max_score = max(max_score, current_start - prev)\n                prev = current_end\n            else:\n                prev = max(prev, current_end)\n        return max_score",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = inf\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        left = 0\n        right = intervals[-1][1] - intervals[0][0]\n        max_gap = 0\n\n        def is_possible(gap):\n            prev = intervals[0][0]\n            for i in range(1, len(intervals)):\n                s, e = intervals[i]\n                if s >= prev + gap:\n                    prev = s\n                elif e >= prev + gap:\n                    prev = prev + gap\n                else:\n                    return False\n            return True\n\n        while left <= right:\n            mid = (left + right) // 2\n            if is_possible(mid):\n                max_gap = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return max_gap",
    "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s >= prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = float('inf')\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff"
  ],
  "total_candidates": 26,
  "nodes_explored": 26,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        start.sort()\n        n = len(start)\n        max_score = 0\n        prev = start[0] + d\n        for i in range(1, n):\n            current_min = start[i]\n            if current_min > prev:\n                max_score = max(max_score, current_min - prev)\n                prev = current_min\n            else:\n                current_max = start[i] + d\n                if current_max > prev:\n                    max_score = max(max_score, current_max - prev)\n                    prev = current_max\n                else:\n                    prev = current_max\n        return max_score",
      "solution_hash": "76ad296565a291f4c5f85bd672ba9b20692b701d30a2b61782721be6cdab1262",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpqb0hyxn4.py\", line 214, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/22242032/tmpqb0hyxn4.py\", line 103, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpqb0hyxn4.py` failed. (See above for error)\n",
        "execution_time": 13.671861410140991,
        "failed_tests": [
          {
            "input": "start = [5, 10, 15, 20, 25],d = 4",
            "expected": "6",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpqb0hyxn4.py\", line 214, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/22242032/tmpqb0hyxn4.py\", line 103, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpqb0hyxn4.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        intervals = sorted([(s, s + d) for s in start])\n        selected = []\n        for s, e in intervals:\n            if not selected:\n                selected.append(s)\n            else:\n                prev = selected[-1]\n                if s > prev:\n                    selected.append(s)\n                else:\n                    selected.append(e)\n        min_diff = inf\n        for i in range(1, len(selected)):\n            diff = selected[i] - selected[i-1]\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff",
      "solution_hash": "b00235cdbe8452458940b13120d84418469547ff1e1af182b3816319d8ffa0fe",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpo_cr4q8f.py\", line 214, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/22242032/tmpo_cr4q8f.py\", line 103, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpo_cr4q8f.py` failed. (See above for error)\n",
        "execution_time": 13.717480897903442,
        "failed_tests": [
          {
            "input": "start = [5, 10, 15, 20, 25],d = 4",
            "expected": "6",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpo_cr4q8f.py\", line 214, in <module>\n    check(Solution().maxPossibleScore)\n  File \"/scratch/local/22242032/tmpo_cr4q8f.py\", line 103, in check\n    assert candidate(start = [5, 10, 15, 20, 25],d = 4) == 6\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpo_cr4q8f.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 26,
    "candidates_generated": 26,
    "tests_passed": 1,
    "tests_failed": 25,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.671861410140991,
      13.696022272109985,
      13.501475811004639,
      13.529643297195435,
      13.6592378616333,
      13.721646547317505,
      13.742290019989014,
      13.759070634841919,
      13.718610763549805,
      13.77177095413208,
      13.77177095413208,
      13.680484533309937,
      13.680484533309937,
      13.717480897903442,
      13.660047769546509,
      13.660047769546509,
      13.660047769546509,
      13.660047769546509,
      13.68668818473816,
      13.660047769546509,
      13.660047769546509,
      13.68668818473816,
      13.68668818473816,
      13.68668818473816,
      13.7152099609375,
      13.660047769546509
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 15,
      "unique_ratio": 0.5769230769230769,
      "similarity_score": 0.8891417179409674,
      "solution_lengths": {
        "min": 324,
        "max": 1126,
        "avg": 645.5
      },
      "algorithm_approaches": {
        "binary_search": 1,
        "other": 25
      },
      "feature_diversity": 0.5769230769230769,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 26
          },
          "uses_list": {
            "true_ratio": 0.5,
            "count": 13
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.038461538461538464,
            "count": 1
          },
          "nested_loops": {
            "true_ratio": 0.9615384615384616,
            "count": 25
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 3,
            "avg": 2.5,
            "variance": 0.3269230769230769
          },
          "if_count": {
            "min": 0,
            "max": 6,
            "avg": 2.5384615384615383,
            "variance": 1.4792899408284035
          },
          "else_count": {
            "min": 0,
            "max": 3,
            "avg": 1.7692307692307692,
            "variance": 0.3313609467455624
          },
          "return_count": {
            "min": 1,
            "max": 3,
            "avg": 1.1538461538461537,
            "variance": 0.2071005917159763
          },
          "assignment_count": {
            "min": 4,
            "max": 16,
            "avg": 8.038461538461538,
            "variance": 7.498520710059174
          },
          "class_method_count": {
            "min": 1,
            "max": 2,
            "avg": 1.0384615384615385,
            "variance": 0.036982248520710054
          },
          "line_count": {
            "min": 8,
            "max": 32,
            "avg": 18.26923076923077,
            "variance": 20.58136094674557
          },
          "char_count": {
            "min": 324,
            "max": 1126,
            "avg": 645.5,
            "variance": 19129.096153846152
          },
          "max_indent": {
            "min": 12,
            "max": 24,
            "avg": 19.076923076923077,
            "variance": 5.301775147928998
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 26
        },
        "avg_complexity_metrics": {
          "avg_line_count": 18.26923076923077,
          "avg_loop_count": 2.5,
          "avg_condition_count": 4.346153846153846,
          "avg_method_count": 1.0384615384615385,
          "avg_assignment_count": 8.038461538461538,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "start = [5, 10, 15, 20, 25],d = 4": 25
      },
      "first_failing_tests": {
        "start = [5, 10, 15, 20, 25],d = 4": 25
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 6,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 18,
          "improvements": 0,
          "solved": 1
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 8,
          "improvements": 1
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 23,
        "assertion_failure->unknown": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 2,
          "1": 6,
          "2": 18
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.07407407407407396,
        "pass@3": 0.2136752136752138,
        "pass@5": 0.3418803418803418,
        "pass@10": 0.6125356125356125
      },
      "solutions_evaluated": 27,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.038461538461538464,
        "branch_success_rate": 0.038461538461538464,
        "test_success_rate": 0.038461538461538464
      },
      "test_results": {
        "total": 26,
        "passed": 1,
        "failed": 25,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 8,
        "total_improvements": 1,
        "recovery_rate": 0.125
      },
      "top_errors": [
        [
          "assertion_failure",
          8
        ]
      ],
      "hardest_test_cases": [
        [
          "start = [5, 10, 15, 20, 25],d = 4",
          25
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1325.5644361972809,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.07407407407407396,
      "pass@3": 0.2136752136752138,
      "pass@5": 0.3418803418803418,
      "pass@10": 0.6125356125356125
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 26
          }
        ]
      ]
    },
    "solutions_evaluated": 27,
    "test_cases": 1
  }
}