{
  "problem_id": "count-almost-equal-pairs-i",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        str_nums = [str(num).zfill(7) for num in nums]  # Convert to strings with leading zeros if necessary\n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if self.are_almost_equal(str_nums[i], str_nums[j]):\n                    count += 1\n        return count\n\n    def are_almost_equal(self, a: str, b: str) -> bool:\n        if a == b:\n            return True\n        diff_indices = [i for i in range(len(a)) if a[i] != b[i]]\n        if len(diff_indices) != 2:\n            return False\n        i, j = diff_indices\n        return a[i] == b[j] and a[j] == b[i]",
  "passed_solutions": [
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        str_nums = [str(num).zfill(7) for num in nums]  # Convert to strings with leading zeros if necessary\n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if self.are_almost_equal(str_nums[i], str_nums[j]):\n                    count += 1\n        return count\n\n    def are_almost_equal(self, a: str, b: str) -> bool:\n        if a == b:\n            return True\n        diff_indices = [i for i in range(len(a)) if a[i] != b[i]]\n        if len(diff_indices) != 2:\n            return False\n        i, j = diff_indices\n        return a[i] == b[j] and a[j] == b[i]",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from collections import defaultdict\n        \n        def can_become_equal(num1, num2):\n            num1_str = str(num1)\n            num2_str = str(num2)\n            # Pad the shorter string with leading zeros\n            max_len = max(len(num1_str), len(num2_str))\n            num1_str = num1_str.zfill(max_len)\n            num2_str = num2_str.zfill(max_len)\n            \n            # Find positions where num1 and num2 differ\n            diff_indices = [i for i in range(max_len) if num1_str[i] != num2_str[i]]\n            \n            # If there are no differences, they are already equal\n            if not diff_indices:\n                return True\n            # If there are exactly two differences, check if swapping makes them equal\n            elif len(diff_indices) == 2:\n                i, j = diff_indices\n                # Swap the digits in num1_str and check if it matches num2_str\n                swapped = list(num1_str)\n                swapped[i], swapped[j] = swapped[j], swapped[i]\n                return ''.join(swapped) == num2_str\n            else:\n                return False\n        \n        count = 0\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if can_become_equal(nums[i], nums[j]):\n                    count += 1\n        return count"
  ],
  "all_solutions": [
    "class Solution:\n            def countPairs(self, nums: List[int]) -> int:\n                def almost_equal(a, b):\n                    a_str, b_str = str(a), str(b)\n                    if len(a_str) != len(b_str):\n                        return False\n                    diff_indices = []\n                    for i in range(len(a_str)):\n                        if a_str[i] != b_str[i]:\n                            diff_indices.append(i)\n                        if len(diff_indices) > 2:\n                            return False\n                    if len(diff_indices) == 0:\n                        return True\n                    if len(diff_indices) == 2:\n                        i, j = diff_indices\n                        return a_str[i] == b_str[j] and a_str[j] == b_str[i]\n                    return False\n                \n                count = 0\n                n = len(nums)\n                for i in range(n):\n                    for j in range(i + 1, n):\n                        if almost_equal(nums[i], nums[j]):\n                            count += 1\n                return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from collections import defaultdict\n        groups = defaultdict(int)\n        for num in nums:\n            sorted_num = ''.join(sorted(str(num)))\n            groups[sorted_num] += 1\n        count = 0\n        for cnt in groups.values():\n            if cnt >= 2:\n                count += cnt * (cnt - 1) // 2\n        return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        def is_almost_equal(x, y):\n            x_str, y_str = str(x), str(y)\n            if len(x_str) != len(y_str):\n                return False\n            diff = []\n            for i in range(len(x_str)):\n                if x_str[i] != y_str[i]:\n                    diff.append(i)\n                if len(diff) > 2:\n                    return False\n            if len(diff) == 0:\n                return True\n            if len(diff) == 2:\n                i, j = diff\n                return x_str[i] == y_str[j] and x_str[j] == y_str[i]\n            return False\n        \n        count = 0\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if is_almost_equal(nums[i], nums[j]):\n                    count += 1\n        return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        def can_become_equal(x, y):\n            x_str, y_str = str(x), str(y)\n            if len(x_str) != len(y_str):\n                return False\n            diff_indices = []\n            for i in range(len(x_str)):\n                if x_str[i] != y_str[i]:\n                    diff_indices.append(i)\n                if len(diff_indices) > 2:\n                    return False\n            if len(diff_indices) == 0:\n                return True\n            if len(diff_indices) == 2:\n                i, j = diff_indices\n                return x_str[i] == y_str[j] and x_str[j] == y_str[i]\n            return False\n        \n        count = 0\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if can_become_equal(nums[i], nums[j]):\n                    count += 1\n        return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from collections import defaultdict\n        freq_map = defaultdict(int)\n        for num in nums:\n            num_str = str(num)\n            freq = [0] * 10\n            for char in num_str:\n                freq[int(char)] += 1\n            freq_tuple = tuple(freq)\n            freq_map[freq_tuple] += 1\n        count = 0\n        for cnt in freq_map.values():\n            if cnt >= 2:\n                count += cnt * (cnt - 1) // 2\n        return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from collections import defaultdict\n        \n        def generate_swaps(num_str):\n            swaps = set()\n            for i in range(len(num_str)):\n                for j in range(i + 1, len(num_str)):\n                    # Swap digits at positions i and j\n                    swapped = list(num_str)\n                    swapped[i], swapped[j] = swapped[j], swapped[i]\n                    swaps.add(''.join(swapped))\n            return swaps\n        \n        # Create a dictionary to group numbers by their sorted digit patterns\n        sorted_dict = defaultdict(list)\n        for num in nums:\n            num_str = str(num)\n            sorted_num = ''.join(sorted(num_str))\n            sorted_dict[sorted_num].append(num_str)\n        \n        count = 0\n        for key in sorted_dict:\n            group = sorted_dict[key]\n            n = len(group)\n            # For each pair in the group, check if they are almost equal\n            for i in range(n):\n                for j in range(i + 1, n):\n                    num1, num2 = group[i], group[j]\n                    if num1 == num2:\n                        count += 1\n                        continue\n                    # Generate all possible swaps for num1 and check if num2 is in them\n                    swaps = generate_swaps(num1)\n                    if num2 in swaps:\n                        count += 1\n        return count",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        str_nums = [str(num).zfill(7) for num in nums]  # Convert to strings with leading zeros if necessary\n        count = 0\n        n = len(str_nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if self.are_almost_equal(str_nums[i], str_nums[j]):\n                    count += 1\n        return count\n\n    def are_almost_equal(self, a: str, b: str) -> bool:\n        if a == b:\n            return True\n        diff_indices = [i for i in range(len(a)) if a[i] != b[i]]\n        if len(diff_indices) != 2:\n            return False\n        i, j = diff_indices\n        return a[i] == b[j] and a[j] == b[i]",
    "class Solution:\n    def countPairs(self, nums: List[int]) -> int:\n        from collections import defaultdict\n        \n        def can_become_equal(num1, num2):\n            num1_str = str(num1)\n            num2_str = str(num2)\n            # Pad the shorter string with leading zeros\n            max_len = max(len(num1_str), len(num2_str))\n            num1_str = num1_str.zfill(max_len)\n            num2_str = num2_str.zfill(max_len)\n            \n            # Find positions where num1 and num2 differ\n            diff_indices = [i for i in range(max_len) if num1_str[i] != num2_str[i]]\n            \n            # If there are no differences, they are already equal\n            if not diff_indices:\n                return True\n            # If there are exactly two differences, check if swapping makes them equal\n            elif len(diff_indices) == 2:\n                i, j = diff_indices\n                # Swap the digits in num1_str and check if it matches num2_str\n                swapped = list(num1_str)\n                swapped[i], swapped[j] = swapped[j], swapped[i]\n                return ''.join(swapped) == num2_str\n            else:\n                return False\n        \n        count = 0\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if can_become_equal(nums[i], nums[j]):\n                    count += 1\n        return count"
  ],
  "total_candidates": 8,
  "nodes_explored": 8,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n            def countPairs(self, nums: List[int]) -> int:\n                def almost_equal(a, b):\n                    a_str, b_str = str(a), str(b)\n                    if len(a_str) != len(b_str):\n                        return False\n                    diff_indices = []\n                    for i in range(len(a_str)):\n                        if a_str[i] != b_str[i]:\n                            diff_indices.append(i)\n                        if len(diff_indices) > 2:\n                            return False\n                    if len(diff_indices) == 0:\n                        return True\n                    if len(diff_indices) == 2:\n                        i, j = diff_indices\n                        return a_str[i] == b_str[j] and a_str[j] == b_str[i]\n                    return False\n                \n                count = 0\n                n = len(nums)\n                for i in range(n):\n                    for j in range(i + 1, n):\n                        if almost_equal(nums[i], nums[j]):\n                            count += 1\n                return count",
      "solution_hash": "35f32ab740c9cd43f8b678e1ddea907f65327d8fafcebf1e0f0ba861b09dec11",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp45q908_7.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/22242032/tmp45q908_7.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp45q908_7.py` failed. (See above for error)\n",
        "execution_time": 13.89812707901001,
        "failed_tests": [
          {
            "input": "nums = [101, 110, 111, 1001, 1100]",
            "expected": "5",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp45q908_7.py\", line 237, in <module>\n    check(Solution().countPairs)\n  File \"/scratch/local/22242032/tmp45q908_7.py\", line 111, in check\n    assert candidate(nums = [101, 110, 111, 1001, 1100]) == 5\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp45q908_7.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 8,
    "candidates_generated": 8,
    "tests_passed": 2,
    "tests_failed": 6,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.89812707901001,
      13.810462474822998,
      13.878682613372803,
      13.91208553314209,
      13.893124341964722,
      13.945842266082764,
      13.844930648803711,
      13.864386320114136
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 8,
      "unique_ratio": 1.0,
      "similarity_score": 0.8324909455864734,
      "solution_lengths": {
        "min": 401,
        "max": 1458,
        "avg": 914.5
      },
      "algorithm_approaches": {
        "hash_table": 4,
        "other": 4
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 8
          },
          "uses_list": {
            "true_ratio": 0.625,
            "count": 5
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.125,
            "count": 1
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 8
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 6,
            "avg": 3.375,
            "variance": 1.234375
          },
          "if_count": {
            "min": 1,
            "max": 6,
            "avg": 3.625,
            "variance": 4.234375
          },
          "else_count": {
            "min": 0,
            "max": 1,
            "avg": 0.125,
            "variance": 0.109375
          },
          "return_count": {
            "min": 1,
            "max": 6,
            "avg": 3.75,
            "variance": 4.1875
          },
          "assignment_count": {
            "min": 6,
            "max": 15,
            "avg": 11.375,
            "variance": 6.984375
          },
          "class_method_count": {
            "min": 1,
            "max": 2,
            "avg": 1.75,
            "variance": 0.1875
          },
          "line_count": {
            "min": 12,
            "max": 37,
            "avg": 24.625,
            "variance": 66.484375
          },
          "char_count": {
            "min": 401,
            "max": 1458,
            "avg": 914.5,
            "variance": 127986.25
          },
          "max_indent": {
            "min": 16,
            "max": 28,
            "avg": 20.5,
            "variance": 13.75
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 8
        },
        "avg_complexity_metrics": {
          "avg_line_count": 24.625,
          "avg_loop_count": 3.375,
          "avg_condition_count": 3.875,
          "avg_method_count": 1.75,
          "avg_assignment_count": 11.375,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.16666666666666666
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [101, 110, 111, 1001, 1100]": 6
      },
      "first_failing_tests": {
        "nums = [101, 110, 111, 1001, 1100]": 6
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 5,
          "improvements": 0,
          "solved": 2
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 3,
          "improvements": 2
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 5,
        "assertion_failure->unknown": 2
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5,
        "solutions_per_depth": {
          "0": 1,
          "1": 2,
          "2": 5
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 2
        }
      },
      "pass_at_k": {
        "pass@1": 0.33333333333333337,
        "pass@3": 0.7619047619047619,
        "pass@5": 0.9523809523809523
      },
      "solutions_evaluated": 9,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.25,
        "branch_success_rate": 0.25,
        "test_success_rate": 0.25
      },
      "test_results": {
        "total": 8,
        "passed": 2,
        "failed": 6,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 3,
        "total_improvements": 2,
        "recovery_rate": 0.6666666666666666
      },
      "top_errors": [
        [
          "assertion_failure",
          3
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [101, 110, 111, 1001, 1100]",
          6
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 595.4652078151703,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.33333333333333337,
      "pass@3": 0.7619047619047619,
      "pass@5": 0.9523809523809523
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 8
          }
        ]
      ]
    },
    "solutions_evaluated": 9,
    "test_cases": 1
  }
}