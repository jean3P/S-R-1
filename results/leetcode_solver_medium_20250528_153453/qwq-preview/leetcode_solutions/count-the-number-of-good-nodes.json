{
  "problem_id": "count-the-number-of-good-nodes",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * (len(adj))\n        \n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor not in visited:\n                    size += dfs(neighbor)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0)  # Start from root 0\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes",
  "passed_solutions": [
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * len(adj)\n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor not in visited:\n                    size += dfs(neighbor)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0)  # Start from root 0\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * (len(adj))\n        \n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor not in visited:\n                    size += dfs(neighbor)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0)  # Start from root 0\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * (len(adj))\n        \n        visited = set()\n        \n        def dfs(node, parent):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor != parent and neighbor not in visited:\n                    size += dfs(neighbor, node)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0, -1)  # Start from root 0 with no parent\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if child != -1 and subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes"
  ],
  "all_solutions": [
    "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                # DFS to calculate subtree sizes\n                subtree_sizes = []\n                visited = set()\n                \n                def dfs(node):\n                    visited.add(node)\n                    size = 1  # Count itself\n                    for neighbor in adj[node]:\n                        if neighbor not in visited:\n                            size += dfs(neighbor)\n                    subtree_sizes[node] = size\n                    return size\n                \n                # Initialize subtree_sizes with default size 0\n                subtree_sizes = [0] * len(adj)\n                dfs(0)  # Start from root 0\n                \n                # Check for good nodes\n                good_nodes = 0\n                for node in adj:\n                    children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n                    if not children_sizes:\n                        good_nodes += 1\n                    elif len(set(children_sizes)) == 1:\n                        good_nodes += 1\n                return good_nodes",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * len(adj)\n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor not in visited:\n                    size += dfs(neighbor)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0)  # Start from root 0\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * (len(adj))\n        \n        visited = set()\n        \n        def dfs(node):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor not in visited:\n                    size += dfs(neighbor)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0)  # Start from root 0\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes",
    "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        # Build adjacency list\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        # DFS to calculate subtree sizes\n        subtree_sizes = [0] * (len(adj))\n        \n        visited = set()\n        \n        def dfs(node, parent):\n            visited.add(node)\n            size = 1  # Count itself\n            for neighbor in adj[node]:\n                if neighbor != parent and neighbor not in visited:\n                    size += dfs(neighbor, node)\n            subtree_sizes[node] = size\n            return size\n        \n        dfs(0, -1)  # Start from root 0 with no parent\n        \n        # Check for good nodes\n        good_nodes = 0\n        for node in adj:\n            children_sizes = [subtree_sizes[child] for child in adj[node] if child != -1 and subtree_sizes[child] < subtree_sizes[node]]\n            if not children_sizes:\n                good_nodes += 1\n            elif len(set(children_sizes)) == 1:\n                good_nodes += 1\n        return good_nodes"
  ],
  "total_candidates": 4,
  "nodes_explored": 4,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\n        from collections import defaultdict\n\n        class Solution:\n            def countGoodNodes(self, edges: List[List[int]]) -> int:\n                # Build adjacency list\n                adj = defaultdict(list)\n                for a, b in edges:\n                    adj[a].append(b)\n                    adj[b].append(a)\n                \n                # DFS to calculate subtree sizes\n                subtree_sizes = []\n                visited = set()\n                \n                def dfs(node):\n                    visited.add(node)\n                    size = 1  # Count itself\n                    for neighbor in adj[node]:\n                        if neighbor not in visited:\n                            size += dfs(neighbor)\n                    subtree_sizes[node] = size\n                    return size\n                \n                # Initialize subtree_sizes with default size 0\n                subtree_sizes = [0] * len(adj)\n                dfs(0)  # Start from root 0\n                \n                # Check for good nodes\n                good_nodes = 0\n                for node in adj:\n                    children_sizes = [subtree_sizes[child] for child in adj[node] if subtree_sizes[child] < subtree_sizes[node]]\n                    if not children_sizes:\n                        good_nodes += 1\n                    elif len(set(children_sizes)) == 1:\n                        good_nodes += 1\n                return good_nodes",
      "solution_hash": "b04f81a61e50d4ce44571ade2a71f3fc5e89a315396b1eea5d44eb3a27e6face",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "  File \"/scratch/local/22242032/tmpzk6z_qne.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpzk6z_qne.py` failed. (See above for error)\n",
        "execution_time": 13.986772775650024,
        "failed_tests": [],
        "error_message": "File \"/scratch/local/22242032/tmpzk6z_qne.py\", line 82\n    from collections import defaultdict\nIndentationError: unexpected indent\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpzk6z_qne.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_2",
        "1_3"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 4,
    "candidates_generated": 4,
    "tests_passed": 3,
    "tests_failed": 1,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.986772775650024,
      13.794010639190674,
      13.741336822509766,
      13.800288677215576
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 4,
      "unique_ratio": 1.0,
      "similarity_score": 0.9823363739284545,
      "solution_lengths": {
        "min": 1112,
        "max": 1474,
        "avg": 1226.0
      },
      "algorithm_approaches": {
        "depth_first_search": 4
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 1.0,
            "count": 4
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 4
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 4,
            "max": 4,
            "avg": 4.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 3,
            "max": 3,
            "avg": 3.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 0,
            "max": 0,
            "avg": 0.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 11,
            "max": 13,
            "avg": 11.75,
            "variance": 0.6875
          },
          "class_method_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 35,
            "max": 37,
            "avg": 36.0,
            "variance": 0.5
          },
          "char_count": {
            "min": 1112,
            "max": 1474,
            "avg": 1226.0,
            "variance": 21517.5
          },
          "max_indent": {
            "min": 20,
            "max": 28,
            "avg": 22.0,
            "variance": 12.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 4
        },
        "avg_complexity_metrics": {
          "avg_line_count": 36.0,
          "avg_loop_count": 4.0,
          "avg_condition_count": 4.0,
          "avg_method_count": 2.0,
          "avg_assignment_count": 11.75,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.25
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 3
        }
      },
      "error_types": {
        "other_error": {
          "attempts": 1,
          "improvements": 3
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "other_error->unknown": 3
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 1,
        "avg_depth": 0.75,
        "solutions_per_depth": {
          "0": 1,
          "1": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 3
        }
      },
      "pass_at_k": {
        "pass@1": 0.8,
        "pass@3": 1.0,
        "pass@5": 1.0
      },
      "solutions_evaluated": 5,
      "passing_solution_depths": {
        "min": 1,
        "max": 1,
        "avg": 1.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.75,
        "branch_success_rate": 0.75,
        "test_success_rate": 0.75
      },
      "test_results": {
        "total": 4,
        "passed": 3,
        "failed": 1,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 1,
        "total_improvements": 3,
        "recovery_rate": 3.0
      },
      "top_errors": [
        [
          "other_error",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 265.17719411849976,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.8,
      "pass@3": 1.0,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: unexpected indent (<string>, line 96)",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ]
      ]
    },
    "solutions_evaluated": 5,
    "test_cases": 1
  }
}