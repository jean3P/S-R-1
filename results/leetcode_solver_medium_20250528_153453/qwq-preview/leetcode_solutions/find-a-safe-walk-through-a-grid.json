{
  "problem_id": "find-a-safe-walk-through-a-grid",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Adjust health for starting cell\n        health -= grid[0][0]\n        if health <= 0:\n            return False\n        \n        # Adjust health for destination cell\n        if health - grid[m-1][n-1] < 1:\n            return False\n        \n        # Priority queue to prioritize higher health\n        pq = [(-health, 0, 0)]  # negative health for max-heap\n        \n        # Visit set to track visited positions with health\n        visited = set()\n        \n        while pq:\n            current_health, row, col = heappop(pq)\n            current_health = -current_health  # revert to positive\n            \n            if (row, col) == (m-1, n-1):\n                return True\n            \n            if (row, col, current_health) in visited:\n                continue\n            visited.add((row, col, current_health))\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health >= 1 and (nr, nc, next_health) not in visited:\n                        heappush(pq, (-next_health, nr, nc))\n        \n        return False",
  "passed_solutions": [
    "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Adjust health for starting cell\n        health -= grid[0][0]\n        if health <= 0:\n            return False\n        \n        # Adjust health for destination cell\n        if health - grid[m-1][n-1] < 1:\n            return False\n        \n        # Priority queue to prioritize higher health\n        pq = [(-health, 0, 0)]  # negative health for max-heap\n        \n        # Visit set to track visited positions with health\n        visited = set()\n        \n        while pq:\n            current_health, row, col = heappop(pq)\n            current_health = -current_health  # revert to positive\n            \n            if (row, col) == (m-1, n-1):\n                return True\n            \n            if (row, col, current_health) in visited:\n                continue\n            visited.add((row, col, current_health))\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health >= 1 and (nr, nc, next_health) not in visited:\n                        heappush(pq, (-next_health, nr, nc))\n        \n        return False"
  ],
  "all_solutions": [
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Check if start or end is unsafe\n        if grid[0][0] == 1:\n            health -= 1\n        if health <= 0:\n            return False\n        if grid[m-1][n-1] == 1:\n            health -= 1\n            if health < 0:\n                return False\n        \n        # Visit array to keep track of visited positions with remaining health\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Queue to hold (row, col, remaining health)\n        queue = deque()\n        queue.append((0, 0, health))\n        visited[0][0] = True\n        \n        while queue:\n            row, col, current_health = queue.popleft()\n            \n            # If reached destination\n            if row == m-1 and col == n-1:\n                return True\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        visited[nr][nc] = True\n                        queue.append((nr, nc, next_health))\n        \n        return False",
    "from typing import List\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        \n        # Create a DP table to store the minimum health required to reach the end from each cell\n        dp = [[float('inf')] * n for _ in range(m)]\n        \n        # Start from the bottom-right corner\n        dp[m-1][n-1] = 1 if grid[m-1][n-1] == 0 else 2\n        \n        # Fill the last row\n        for col in range(n-2, -1, -1):\n            required = dp[m-1][col+1] + grid[m-1][col]\n            dp[m-1][col] = max(1, required)\n        \n        # Fill the last column\n        for row in range(m-2, -1, -1):\n            required = dp[row+1][n-1] + grid[row][n-1]\n            dp[row][n-1] = max(1, required)\n        \n        # Fill the rest of the DP table\n        for row in range(m-2, -1, -1):\n            for col in range(n-2, -1, -1):\n                right = dp[row][col+1] + grid[row][col]\n                down = dp[row+1][col] + grid[row][col]\n                required = min(right, down)\n                dp[row][col] = max(1, required)\n        \n        # Check if the starting health is enough\n        return health >= dp[0][0]",
    "from typing import List\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        \n        # Create a DP table to store the minimum health required to reach the end from each cell\n        dp = [[float('inf')] * n for _ in range(m)]\n        \n        # Start from the bottom-right corner\n        dp[m-1][n-1] = 1 if grid[m-1][n-1] == 0 else 2  # Need at least 2 health to enter an unsafe cell\n        \n        # Fill the last row\n        for col in range(n-2, -1, -1):\n            required = dp[m-1][col+1] + grid[m-1][col]\n            dp[m-1][col] = max(1, required)\n        \n        # Fill the last column\n        for row in range(m-2, -1, -1):\n            required = dp[row+1][n-1] + grid[row][n-1]\n            dp[row][n-1] = max(1, required)\n        \n        # Fill the rest of the DP table\n        for row in range(m-2, -1, -1):\n            for col in range(n-2, -1, -1):\n                right = dp[row][col+1] + grid[row][col]\n                down = dp[row+1][col] + grid[row][col]\n                required = min(right, down)\n                dp[row][col] = max(1, required)\n        \n        # Check if the starting health is enough\n        return health >= dp[0][0]",
    "from typing import List\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        \n        # Create a DP table to store the minimum health required to reach the end from each cell\n        dp = [[float('inf')] * n for _ in range(m)]\n        \n        # Start from the bottom-right corner\n        dp[m-1][n-1] = 1 if grid[m-1][n-1] == 0 else 2\n        \n        # Fill the last row\n        for col in range(n-2, -1, -1):\n            required = dp[m-1][col+1] + grid[m-1][col]\n            dp[m-1][col] = max(1, required)\n        \n        # Fill the last column\n        for row in range(m-2, -1, -1):\n            required = dp[row+1][n-1] + grid[row][n-1]\n            dp[row][n-1] = max(1, required)\n        \n        # Fill the rest of the DP table\n        for row in range(m-2, -1, -1):\n            for col in range(n-2, -1, -1):\n                right = dp[row][col+1] + grid[row][col]\n                down = dp[row+1][col] + grid[row][col]\n                required = min(right, down)\n                dp[row][col] = max(1, required)\n        \n        # Check if the starting health is enough\n        return health >= dp[0][0]",
    "m, n = len(grid), len(grid[0])\n\ndp = [[float('inf')] * n for _ in range(m)]\n\ndp[m-1][n-1] = 1 if grid[m-1][n-1] == 0 else 2\n\n# Fill the last row\n\nfor col in range(n-2, -1, -1):\n\nrequired = dp[m-1][col+1] + grid[m-1][col]\n\ndp[m-1][col] = max(1, required)\n\n# Fill the last column\n\nfor row in range(m-2, -1, -1):\n\nrequired = dp[row+1][n-1] + grid[row][n-1]\n\ndp[row][n-1] = max(1, required)\n\n# Fill the rest of the DP table\n\nfor row in range(m-2, -1, -1):\n\nfor col in range(n-2, -1, -1):\n\nright = dp[row][col+1] + grid[row][col]\n\ndown = dp[row+1][col] + grid[row][col]\n\nrequired = min(right, down)\n\ndp[row][col] = max(1, required)\n\nreturn health >= dp[0][0]",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Check if start or end is unsafe\n        health -= grid[0][0]\n        if health <= 0:\n            return False\n        health -= grid[m-1][n-1]\n        if health < 0:\n            return False\n        \n        # Visit set to keep track of visited positions with remaining health\n        visited = set()\n        visited.add((0, 0, health))\n        \n        # Queue to hold (row, col, remaining health)\n        queue = deque()\n        queue.append((0, 0, health))\n        \n        while queue:\n            row, col, current_health = queue.popleft()\n            \n            # If reached destination\n            if row == m-1 and col == n-1:\n                return True\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and (nr, nc, next_health) not in visited:\n                        visited.add((nr, nc, next_health))\n                        queue.append((nr, nc, next_health))\n        \n        return False",
    "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Initialize a 3D visited array to track the minimum health required to reach each cell\n        visited = [[float('inf')] * n for _ in range(m)]\n        \n        # Start with initial position and health\n        queue = deque()\n        queue.append((0, 0, health))\n        visited[0][0] = health\n        \n        while queue:\n            row, col, current_health = queue.popleft()\n            \n            # If reached destination with positive health\n            if row == m-1 and col == n-1 and current_health > 0:\n                return True\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    # Only proceed if next health is positive and better than previous visits\n                    if next_health > 0 and next_health < visited[nr][nc]:\n                        visited[nr][nc] = next_health\n                        queue.append((nr, nc, next_health))\n        \n        return False",
    "from typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Adjust health for starting cell\n        health -= grid[0][0]\n        if health <= 0:\n            return False\n        \n        # Adjust health for destination cell\n        if health - grid[m-1][n-1] < 1:\n            return False\n        \n        # Priority queue to prioritize higher health\n        pq = [(-health, 0, 0)]  # negative health for max-heap\n        \n        # Visit set to track visited positions with health\n        visited = set()\n        \n        while pq:\n            current_health, row, col = heappop(pq)\n            current_health = -current_health  # revert to positive\n            \n            if (row, col) == (m-1, n-1):\n                return True\n            \n            if (row, col, current_health) in visited:\n                continue\n            visited.add((row, col, current_health))\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health >= 1 and (nr, nc, next_health) not in visited:\n                        heappush(pq, (-next_health, nr, nc))\n        \n        return False",
    "import heapq\n\nclass Solution:\n    def findSafeWalk"
  ],
  "total_candidates": 9,
  "nodes_explored": 9,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0,1), (1,0), (0,-1), (-1,0)]\n        \n        # Check if start or end is unsafe\n        if grid[0][0] == 1:\n            health -= 1\n        if health <= 0:\n            return False\n        if grid[m-1][n-1] == 1:\n            health -= 1\n            if health < 0:\n                return False\n        \n        # Visit array to keep track of visited positions with remaining health\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        # Queue to hold (row, col, remaining health)\n        queue = deque()\n        queue.append((0, 0, health))\n        visited[0][0] = True\n        \n        while queue:\n            row, col, current_health = queue.popleft()\n            \n            # If reached destination\n            if row == m-1 and col == n-1:\n                return True\n            \n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < m and 0 <= nc < n:\n                    next_health = current_health - grid[nr][nc]\n                    if next_health > 0 and not visited[nr][nc]:\n                        visited[nr][nc] = True\n                        queue.append((nr, nc, next_health))\n        \n        return False",
      "solution_hash": "9ceef6fdb72b6a8e28641dc25089d0f67c04638d1de09237d1e39cb6698152a5",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp9be89pnq.py\", line 211, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/22242032/tmp9be89pnq.py\", line 128, in check\n    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp9be89pnq.py` failed. (See above for error)\n",
        "execution_time": 14.069936037063599,
        "failed_tests": [
          {
            "input": "grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5",
            "expected": "True",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp9be89pnq.py\", line 211, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/22242032/tmp9be89pnq.py\", line 128, in check\n    assert candidate(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp9be89pnq.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 9,
    "candidates_generated": 9,
    "tests_passed": 1,
    "tests_failed": 8,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      14.069936037063599,
      13.961601734161377,
      13.961601734161377,
      13.961601734161377,
      14.076447248458862,
      13.869729042053223,
      13.900597333908081,
      13.872950792312622,
      13.94650411605835
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 7,
      "unique_ratio": 0.7777777777777778,
      "similarity_score": 0.7129961374639345,
      "solution_lengths": {
        "min": 50,
        "max": 1455,
        "avg": 1097.7777777777778
      },
      "algorithm_approaches": {
        "dynamic_programming": 4,
        "breadth_first_search": 3,
        "hash_table": 1,
        "other": 1
      },
      "feature_diversity": 0.8888888888888888,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 0.7777777777777778,
            "count": 7
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.2222222222222222,
            "count": 2
          },
          "uses_heap": {
            "true_ratio": 0.1111111111111111,
            "count": 1
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.4444444444444444,
            "count": 4
          },
          "uses_bfs": {
            "true_ratio": 0.3333333333333333,
            "count": 3
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.8888888888888888,
            "count": 8
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 0,
            "max": 5,
            "avg": 3.4444444444444446,
            "variance": 2.9135802469135808
          },
          "if_count": {
            "min": 0,
            "max": 7,
            "avg": 2.7777777777777777,
            "variance": 5.950617283950617
          },
          "else_count": {
            "min": 0,
            "max": 1,
            "avg": 0.4444444444444444,
            "variance": 0.2469135802469136
          },
          "return_count": {
            "min": 0,
            "max": 4,
            "avg": 2.0,
            "variance": 2.2222222222222223
          },
          "assignment_count": {
            "min": 0,
            "max": 18,
            "avg": 12.333333333333334,
            "variance": 21.333333333333332
          },
          "class_method_count": {
            "min": 0,
            "max": 1,
            "avg": 0.8888888888888888,
            "variance": 0.09876543209876545
          },
          "line_count": {
            "min": 4,
            "max": 42,
            "avg": 32.666666666666664,
            "variance": 118.88888888888889
          },
          "char_count": {
            "min": 50,
            "max": 1455,
            "avg": 1097.7777777777778,
            "variance": 186355.28395061727
          },
          "max_indent": {
            "min": 0,
            "max": 24,
            "avg": 16.444444444444443,
            "variance": 72.69135802469135
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 7,
          "linear": 1,
          "constant": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 32.666666666666664,
          "avg_loop_count": 3.4444444444444446,
          "avg_condition_count": 3.2222222222222223,
          "avg_method_count": 0.8888888888888888,
          "avg_assignment_count": 12.333333333333334,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.5
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5": 2,
        "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1": 3,
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 1
      },
      "first_failing_tests": {
        "grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5": 2,
        "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1": 3,
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 1
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 6,
          "improvements": 2,
          "solved": 1
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 3,
          "improvements": 3
        }
      },
      "test_case_improvements": {
        "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1": 1,
        "grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5": 1
      },
      "error_transitions": {
        "assertion_failure->assertion_failure": 5,
        "assertion_failure->other_error": 1,
        "assertion_failure->unknown": 1,
        "assertion_failure->syntax_error": 1
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.5555555555555556,
        "solutions_per_depth": {
          "0": 1,
          "1": 2,
          "2": 6
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 1
        }
      },
      "pass_at_k": {
        "pass@1": 0.09999999999999998,
        "pass@3": 0.30000000000000004,
        "pass@5": 0.5,
        "pass@10": 1.0
      },
      "solutions_evaluated": 10,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.1111111111111111,
        "branch_success_rate": 0.1111111111111111,
        "test_success_rate": 0.1111111111111111
      },
      "test_results": {
        "total": 9,
        "passed": 1,
        "failed": 8,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 3,
        "total_improvements": 3,
        "recovery_rate": 1.0
      },
      "top_errors": [
        [
          "assertion_failure",
          3
        ]
      ],
      "hardest_test_cases": [
        [
          "grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]],health = 1",
          3
        ],
        [
          "grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]],health = 5",
          2
        ],
        [
          "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5",
          1
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 941.8016383647919,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.09999999999999998,
      "pass@3": 0.30000000000000004,
      "pass@5": 0.5,
      "pass@10": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: expected an indented block (<string>, line 105)",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: invalid syntax (<string>, line 98)",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 9
          }
        ]
      ]
    },
    "solutions_evaluated": 10,
    "test_cases": 1
  }
}