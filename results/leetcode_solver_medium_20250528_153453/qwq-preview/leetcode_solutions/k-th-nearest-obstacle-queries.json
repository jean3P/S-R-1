{
  "problem_id": "k-th-nearest-obstacle-queries",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "solved",
  "best_solution": "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        import heapq\n        results = []\n        min_heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(min_heap, -dist)  # Use negative values to simulate max-heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            if len(min_heap) < k:\n                results.append(-1)\n            else:\n                results.append(-min_heap[0])  # Convert back to positive\n        return results",
  "passed_solutions": [
    "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        import heapq\n        results = []\n        min_heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(min_heap, -dist)  # Use negative values to simulate max-heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            if len(min_heap) < k:\n                results.append(-1)\n            else:\n                results.append(-min_heap[0])  # Convert back to positive\n        return results"
  ],
  "all_solutions": [
    "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        import heapq\n        results = []\n        min_heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(min_heap, -dist)  # Use negative values to simulate max-heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            if len(min_heap) < k:\n                results.append(-1)\n            else:\n                results.append(-min_heap[0])  # Convert back to positive\n        return results"
  ],
  "total_candidates": 1,
  "nodes_explored": 1,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        import heapq\n        results = []\n        min_heap = []\n        for query in queries:\n            x, y = query\n            dist = abs(x) + abs(y)\n            heapq.heappush(min_heap, -dist)  # Use negative values to simulate max-heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            if len(min_heap) < k:\n                results.append(-1)\n            else:\n                results.append(-min_heap[0])  # Convert back to positive\n        return results",
      "solution_hash": "7ee4093448ca696fe8cbd157b12b695b358762379427c5e6dc336bfd25260ff3",
      "test_result": {
        "status": "pass",
        "stdout": "",
        "stderr": "",
        "execution_time": 13.915567874908447,
        "failed_tests": [],
        "error_message": ""
      },
      "depth": 0,
      "parent_id": null,
      "children": [],
      "passed": true
    }
  ],
  "stats": {
    "nodes_explored": 1,
    "candidates_generated": 1,
    "tests_passed": 1,
    "tests_failed": 0,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.915567874908447
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 0
    },
    "solution_diversity": {
      "unique_solutions": 1,
      "unique_ratio": 1.0,
      "similarity_score": 0.0,
      "solution_lengths": {
        "min": 589,
        "max": 589,
        "avg": 589.0
      },
      "algorithm_approaches": {
        "simulation": 1
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_list": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 1.0,
            "count": 1
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.0,
            "count": 0
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "if_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 4,
            "max": 4,
            "avg": 4.0,
            "variance": 0.0
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 16,
            "max": 16,
            "avg": 16.0,
            "variance": 0.0
          },
          "char_count": {
            "min": 589,
            "max": 589,
            "avg": 589.0,
            "variance": 0.0
          },
          "max_indent": {
            "min": 16,
            "max": 16,
            "avg": 16.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 16.0,
          "avg_loop_count": 1.0,
          "avg_condition_count": 3.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 4.0,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 1.0
      }
    },
    "test_case_analysis": {
      "hardest_cases": {},
      "first_failing_tests": {}
    },
    "feedback_impact": {
      "depths": {},
      "error_types": {},
      "test_case_improvements": {},
      "error_transitions": {}
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 0,
        "avg_depth": 0.0,
        "solutions_per_depth": {
          "0": 1
        },
        "passing_solutions_per_depth": {
          "0": 1
        }
      },
      "pass_at_k": {
        "pass@1": 1.0
      },
      "solutions_evaluated": 2,
      "passing_solution_depths": {
        "min": 0,
        "max": 0,
        "avg": 0.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 1.0,
        "branch_success_rate": 1.0,
        "test_success_rate": 1.0
      },
      "test_results": {
        "total": 1,
        "passed": 1,
        "failed": 0,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 0,
        "total_improvements": 0,
        "recovery_rate": 0
      },
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 0
      }
    }
  },
  "processing_time": 80.46843719482422,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 1
          }
        ]
      ]
    },
    "solutions_evaluated": 2,
    "test_cases": 1
  }
}