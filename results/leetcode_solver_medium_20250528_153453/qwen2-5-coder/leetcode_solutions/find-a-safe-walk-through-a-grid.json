{
  "problem_id": "find-a-safe-walk-through-a-grid",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_remaining = [[-inf] * n for _ in range(m)]\n        max_health_remaining[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > max_health_remaining[nx][ny]:\n                        max_health_remaining[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
  "passed_solutions": [
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_remaining = [[-inf] * n for _ in range(m)]\n        max_health_remaining[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0 and new_health > max_health_remaining[nx][ny]:\n                        max_health_remaining[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_remaining = [[-inf] * n for _ in range(m)]\n        max_health_remaining[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > max_health_remaining[nx][ny]:\n                        max_health_remaining[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        min_health_needed = [[-inf] * n for _ in range(m)]\n        min_health_needed[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0 and new_health > min_health_needed[nx][ny]:\n                        min_health_needed[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False"
  ],
  "all_solutions": [
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = set((0, 0))\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0:\n                        visited.add((nx, ny))\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        min_health_needed = [[inf] * n for _ in range(m)]\n        min_health_needed[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0 and new_health < min_health_needed[nx][ny]:\n                        min_health_needed[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_remaining = [[-inf] * n for _ in range(m)]\n        max_health_remaining[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0 and new_health > max_health_remaining[nx][ny]:\n                        max_health_remaining[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        max_health_remaining = [[-inf] * n for _ in range(m)]\n        max_health_remaining[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > max_health_remaining[nx][ny]:\n                        max_health_remaining[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False",
    "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        min_health_needed = [[-inf] * n for _ in range(m)]\n        min_health_needed[0][0] = health\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0 and new_health > min_health_needed[nx][ny]:\n                        min_health_needed[nx][ny] = new_health\n                        queue.append((nx, ny, new_health))\n        \n        return False"
  ],
  "total_candidates": 5,
  "nodes_explored": 5,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:\n        from collections import deque\n        \n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        queue = deque([(0, 0, health)])\n        visited = set((0, 0))\n        \n        while queue:\n            x, y, current_health = queue.popleft()\n            \n            if x == m - 1 and y == n - 1 and current_health >= 1:\n                return True\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                    new_health = current_health - grid[nx][ny]\n                    if new_health > 0:\n                        visited.add((nx, ny))\n                        queue.append((nx, ny, new_health))\n        \n        return False",
      "solution_hash": "0b002793beb5e27f899dca65caba8ca203b87a11053c1329feb180baa575aab9",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp5f129hhe.py\", line 193, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/22242032/tmp5f129hhe.py\", line 144, in check\n    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp5f129hhe.py` failed. (See above for error)\n",
        "execution_time": 13.567553043365479,
        "failed_tests": [
          {
            "input": "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5",
            "expected": "True",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp5f129hhe.py\", line 193, in <module>\n    check(Solution().findSafeWalk)\n  File \"/scratch/local/22242032/tmp5f129hhe.py\", line 144, in check\n    assert candidate(grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5) == True\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp5f129hhe.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 5,
    "candidates_generated": 5,
    "tests_passed": 3,
    "tests_failed": 2,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.567553043365479,
      13.548878908157349,
      13.606027841567993,
      13.567899942398071,
      13.613118648529053
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 1,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 5,
      "unique_ratio": 1.0,
      "similarity_score": 0.9687246086634967,
      "solution_lengths": {
        "min": 891,
        "max": 1005,
        "avg": 973.4
      },
      "algorithm_approaches": {
        "breadth_first_search": 5
      },
      "feature_diversity": 1.0,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 1.0,
            "count": 5
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.2,
            "count": 1
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 1.0,
            "count": 5
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 1.0,
            "count": 5
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 2,
            "max": 3,
            "avg": 2.8,
            "variance": 0.15999999999999998
          },
          "if_count": {
            "min": 3,
            "max": 3,
            "avg": 3.0,
            "variance": 0.0
          },
          "else_count": {
            "min": 0,
            "max": 0,
            "avg": 0.0,
            "variance": 0.0
          },
          "return_count": {
            "min": 2,
            "max": 2,
            "avg": 2.0,
            "variance": 0.0
          },
          "assignment_count": {
            "min": 12,
            "max": 14,
            "avg": 13.6,
            "variance": 0.6399999999999999
          },
          "class_method_count": {
            "min": 1,
            "max": 1,
            "avg": 1.0,
            "variance": 0.0
          },
          "line_count": {
            "min": 24,
            "max": 25,
            "avg": 24.8,
            "variance": 0.15999999999999998
          },
          "char_count": {
            "min": 891,
            "max": 1005,
            "avg": 973.4,
            "variance": 1735.44
          },
          "max_indent": {
            "min": 24,
            "max": 24,
            "avg": 24.0,
            "variance": 0.0
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 5
        },
        "avg_complexity_metrics": {
          "avg_line_count": 24.8,
          "avg_loop_count": 2.8,
          "avg_condition_count": 3.0,
          "avg_method_count": 1.0,
          "avg_assignment_count": 13.6,
          "avg_max_loop_nesting": 1.0
        },
        "complexity_diversity_ratio": 0.2
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 2
      },
      "first_failing_tests": {
        "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5": 2
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 3,
          "improvements": 0,
          "solved": 0
        },
        "2": {
          "attempts": 3,
          "improvements": 0,
          "solved": 3
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 2,
          "improvements": 3
        }
      },
      "test_case_improvements": {},
      "error_transitions": {
        "assertion_failure->assertion_failure": 1,
        "assertion_failure->unknown": 3
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.4,
        "solutions_per_depth": {
          "0": 1,
          "1": 1,
          "2": 3
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 3
        }
      },
      "pass_at_k": {
        "pass@1": 0.4999999999999999,
        "pass@3": 0.95,
        "pass@5": 1.0
      },
      "solutions_evaluated": 6,
      "passing_solution_depths": {
        "min": 2,
        "max": 2,
        "avg": 2.0
      }
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.6,
        "branch_success_rate": 0.6,
        "test_success_rate": 0.6
      },
      "test_results": {
        "total": 5,
        "passed": 3,
        "failed": 2,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 2,
        "total_improvements": 3,
        "recovery_rate": 1.5
      },
      "top_errors": [
        [
          "assertion_failure",
          2
        ]
      ],
      "hardest_test_cases": [
        [
          "grid = [[0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1]],health = 5",
          2
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 1,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 260.16679406166077,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.4999999999999999,
      "pass@3": 0.95,
      "pass@5": 1.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": true,
            "result": "passed",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 5
          }
        ]
      ]
    },
    "solutions_evaluated": 6,
    "test_cases": 1
  }
}