{
  "problem_id": "sum-of-consecutive-subarrays",
  "problem_title": "",
  "difficulty": "Medium",
  "status": "unsolved",
  "best_solution": null,
  "passed_solutions": [],
  "all_solutions": [
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum = (total_sum + (length - j) * (nums[start + j])) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                total_sum = (total_sum + (j - start + 1) * (i - j + 1) * nums[j]) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to all subarrays ending at j\n                total_sum = (total_sum + nums[j] * (j - start + 1) * (i - j + 1)) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(start, i + 1):\n                # Contribution of nums[j] to the total sum\n                total_sum = (total_sum + nums[j] * (j - start + 1) * (length - (j - start))) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            current_sum = 0\n            for j in range(start, i + 1):\n                current_sum += nums[j]\n                total_sum = (total_sum + current_sum) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Each element nums[start + j] contributes to (j + 1) * (length - j) subarrays\n                total_sum = (total_sum + nums[start + j] * (j + 1) * (length - j)) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Each element nums[start + j] contributes to (j + 1) * (length - j) subarrays\n                total_sum = (total_sum + nums[start + j] * (j + 1) * (length - j)) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            current_sum = 0\n            for j in range(start, i + 1):\n                # Add the current element to the running sum of subarrays ending at j\n                current_sum += nums[j]\n                # Add the current sum to the total sum\n                total_sum = (total_sum + current_sum) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                # Each element nums[start + j] contributes to (j + 1) * (length - j) subarrays\n                total_sum = (total_sum + nums[start + j] * (j + 1) * (length - j)) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "# Test case from the feedback\nnums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]\nprint(Solution().getSum(nums))  # Expected output: 72",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Check for increasing sequence\n            while i + 1 < n and nums[i + 1] == nums[i] + 1:\n                i += 1\n            # Check for decreasing sequence\n            while i + 1 < n and nums[i + 1] == nums[i] - 1:\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current consecutive segment\n            length = i - start + 1\n            for j in range(start, i + 1):\n                total_sum += nums[j] * (length - (j - start))\n            \n            i += 1\n        \n        return total_sum % MOD\n\n# Test case from the feedback\nnums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]\nprint(Solution().getSum(nums))  # Expected output: 72",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Check for increasing consecutive sequence\n            while i + 1 < n and nums[i + 1] == nums[i] + 1:\n                i += 1\n            # Check for decreasing consecutive sequence\n            if i == start:\n                while i + 1 < n and nums[i + 1] == nums[i] - 1:\n                    i += 1\n            \n            # Calculate the sum of all subarrays in the current consecutive segment\n            length = i - start + 1\n            for j in range(length):\n                total_sum = (total_sum + (length - j) * (nums[start + j])) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        total_sum = 0\n        n = len(nums)\n        \n        i = 0\n        while i < n:\n            start = i\n            # Check for increasing consecutive sequence\n            while i + 1 < n and nums[i + 1] == nums[i] + 1:\n                i += 1\n            # Check for decreasing consecutive sequence\n            if start == i:\n                while i + 1 < n and nums[i + 1] == nums[i] - 1:\n                    i += 1\n            \n            # Calculate the sum of all subarrays in the current consecutive segment\n            length = i - start + 1\n            for j in range(length):\n                total_sum = (total_sum + (length - j) * (nums[start + j])) % MOD\n            \n            i += 1\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            direction = 0  # 0: unset, 1: increasing, -1: decreasing\n            \n            # Determine the direction of the sequence\n            if end < n:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            \n            # Extend the sequence based on the determined direction\n            while end < n:\n                if direction == 1 and nums[end] == nums[end - 1] + 1:\n                    end += 1\n                elif direction == -1 and nums[end] == nums[end - 1] - 1:\n                    end += 1\n                else:\n                    break\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            direction = 0  # 0: unset, 1: increasing, -1: decreasing\n            \n            # Determine the direction of the sequence\n            if end < n:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            \n            # Extend the sequence based on the determined direction\n            while end < n:\n                if direction == 1 and nums[end] == nums[end - 1] + 1:\n                    end += 1\n                elif direction == -1 and nums[end] == nums[end - 1] - 1:\n                    end += 1\n                else:\n                    break\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            direction = 0  # 0: unset, 1: increasing, -1: decreasing\n            \n            # Determine the direction of the sequence\n            if end < n:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            \n            # Extend the sequence based on the determined direction\n            while end < n:\n                if direction == 1 and nums[end] == nums[end - 1] + 1:\n                    end += 1\n                elif direction == -1 and nums[end] == nums[end - 1] - 1:\n                    end += 1\n                else:\n                    break\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            direction = 0  # 0: unset, 1: increasing, -1: decreasing\n            \n            # Determine the direction of the sequence\n            if end < n:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            \n            # Extend the sequence based on the determined direction\n            while end < n:\n                if direction == 1 and nums[end] == nums[end - 1] + 1:\n                    end += 1\n                elif direction == -1 and nums[end] == nums[end - 1] - 1:\n                    end += 1\n                else:\n                    break\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                # Contribution of nums[i] to the total sum\n                total_sum += nums[i] * (length - (i - start)) * (i - start + 1)\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                # Contribution of nums[i] to the total sum\n                # nums[i] appears in (i - start + 1) starting positions\n                # and (end - i) ending positions\n                total_sum += nums[i] * (i - start + 1) * (end - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            current_sum = nums[start]\n            total_sum += current_sum\n            \n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                current_sum += nums[end]\n                length = end - start + 1\n                total_sum += current_sum\n                end += 1\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            current_sum = 0\n            for i in range(start, end):\n                current_sum += nums[i]\n                total_sum += current_sum\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start)) * (i - start + 1)\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (i - start + 1) * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                # Contribution of nums[i] to the total sum\n                total_sum += nums[i] * (i - start + 1) * (length - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            for i in range(start, end):\n                total_sum += nums[i] * (i - start + 1) * (end - i)\n            \n            start = end\n        \n        return total_sum % MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    break\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    break\n            \n            if end == n - 1 or direction == 0:\n                length = end - start + 1\n                subarray_sum = (length * (nums[start] + nums[end])) // 2\n                total_sum = (total_sum + subarray_sum * length) % MOD\n                start = end\n                direction = 0\n        \n        # Handle the last segment\n        length = n - start\n        subarray_sum = (length * (nums[start] + nums[n - 1])) // 2\n        total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    # End of a consecutive increasing subarray\n                    length = end - start\n                    subarray_sum = (length * (nums[start] + nums[end - 1])) // 2\n                    total_sum = (total_sum + subarray_sum * length) % MOD\n                    start = end - 1\n                    direction = 1\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    # End of a consecutive decreasing subarray\n                    length = end - start\n                    subarray_sum = (length * (nums[start] + nums[end - 1])) // 2\n                    total_sum = (total_sum + subarray_sum * length) % MOD\n                    start = end - 1\n                    direction = -1\n        \n        # Handle the last segment\n        length = n - start\n        subarray_sum = (length * (nums[start] + nums[n - 1])) // 2\n        total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        # Add single element subarrays\n        total_sum = (total_sum + sum(nums)) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    # End of a consecutive increasing subarray\n                    length = end - start\n                    for i in range(start, end):\n                        subarray_sum = sum(nums[i:end])\n                        total_sum = (total_sum + subarray_sum) % MOD\n                    start = end - 1\n                    direction = 1\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    # End of a consecutive decreasing subarray\n                    length = end - start\n                    for i in range(start, end):\n                        subarray_sum = sum(nums[i:end])\n                        total_sum = (total_sum + subarray_sum) % MOD\n                    start = end - 1\n                    direction = -1\n        \n        # Handle the last segment\n        length = n - start\n        for i in range(start, n):\n            subarray_sum = sum(nums[i:n])\n            total_sum = (total_sum + subarray_sum) % MOD\n        \n        # Add single element subarrays\n        total_sum = (total_sum + sum(nums)) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    # End of a consecutive increasing subarray\n                    self.add_consecutive_subarray_sums(nums, start, end - 1, total_sum)\n                    start = end - 1\n                    direction = 1\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    # End of a consecutive decreasing subarray\n                    self.add_consecutive_subarray_sums(nums, start, end - 1, total_sum)\n                    start = end - 1\n                    direction = -1\n        \n        # Handle the last segment\n        self.add_consecutive_subarray_sums(nums, start, n - 1, total_sum)\n        \n        return total_sum % MOD\n    \n    def add_consecutive_subarray_sums(self, nums, start, end, total_sum):\n        MOD = 10**9 + 7\n        for i in range(start, end + 1):\n            subarray_sum = 0\n            for j in range(i, end + 1):\n                subarray_sum += nums[j]\n                total_sum += subarray_sum\n                total_sum %= MOD",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    # End of a consecutive increasing subarray\n                    length = end - start\n                    for i in range(start, end):\n                        total_sum = (total_sum + (end - i) * nums[i]) % MOD\n                    start = end - 1\n                    direction = 1\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    # End of a consecutive decreasing subarray\n                    length = end - start\n                    for i in range(start, end):\n                        total_sum = (total_sum + (end - i) * nums[i]) % MOD\n                    start = end - 1\n                    direction = -1\n        \n        # Handle the last segment\n        length = n - start\n        for i in range(start, n):\n            total_sum = (total_sum + (n - i) * nums[i]) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    direction = 0\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    direction = 0\n            \n            if direction == 0:\n                length = end - start\n                for i in range(start, end):\n                    subarray_sum = (i - start + 1) * (nums[i] + nums[i + 1]) // 2\n                    total_sum = (total_sum + subarray_sum) % MOD\n                start = end\n        \n        # Handle the last segment\n        length = n - start\n        for i in range(start, n):\n            subarray_sum = (i - start + 1) * (nums[i] + nums[i + 1]) // 2 if i < n - 1 else nums[i]\n            total_sum = (total_sum + subarray_sum) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if abs(nums[end] - nums[end - 1]) != 1:\n                # Calculate the sum of all subarrays in the range [start, end-1]\n                for i in range(start, end):\n                    subarray_sum = sum(nums[i:end])\n                    total_sum = (total_sum + subarray_sum) % MOD\n                start = end\n        \n        # Handle the last segment\n        for i in range(start, n):\n            subarray_sum = sum(nums[i:n])\n            total_sum = (total_sum + subarray_sum) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    direction = 0\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    direction = 0\n            \n            if direction == 0:\n                # Sum all subarrays ending at end-1\n                for i in range(start, end):\n                    subarray_sum = sum(nums[i:end])\n                    total_sum = (total_sum + subarray_sum) % MOD\n                start = end\n        \n        # Handle the last segment\n        for i in range(start, n):\n            subarray_sum = sum(nums[i:n])\n            total_sum = (total_sum + subarray_sum) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if nums[end] != nums[end - 1] + 1 and nums[end] != nums[end - 1] - 1:\n                # Calculate the sum of all subarrays in the segment from start to end-1\n                for i in range(start, end):\n                    for j in range(i, end):\n                        total_sum = (total_sum + sum(nums[i:j+1])) % MOD\n                start = end\n        \n        # Handle the last segment\n        for i in range(start, n):\n            for j in range(i, n):\n                total_sum = (total_sum + sum(nums[i:j+1])) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if end > start + 1 and not ((nums[end] == nums[end - 1] + 1 and nums[end - 1] == nums[end - 2] + 1) or \n                                       (nums[end] == nums[end - 1] - 1 and nums[end - 1] == nums[end - 2] - 1)):\n                # Reset start if the current element does not continue the consecutive sequence\n                start = end - 1\n            \n            # Calculate the sum of all subarrays ending at 'end' and starting from 'start'\n            length = end - start + 1\n            subarray_sum = (length * (nums[start] + nums[end])) // 2\n            total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        # Handle the last segment\n        length = n - start\n        subarray_sum = (length * (nums[start] + nums[n - 1])) // 2\n        total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if not ((nums[end] == nums[end - 1] + 1) or (nums[end] == nums[end - 1] - 1)):\n                # Reset start if the current element does not continue the consecutive sequence\n                total_sum = (total_sum + self.sum_consecutive_subarrays(nums, start, end - 1)) % MOD\n                start = end\n        \n        # Handle the last segment\n        total_sum = (total_sum + self.sum_consecutive_subarrays(nums, start, n - 1)) % MOD\n        \n        return total_sum\n    \n    def sum_consecutive_subarrays(self, nums, start, end):\n        total = 0\n        for i in range(start, end + 1):\n            length = end - i + 1\n            subarray_sum = (length * (nums[i] + nums[end])) // 2\n            total = (total + subarray_sum) % (10**9 + 7)\n        return total",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if not ((nums[end] == nums[end - 1] + 1) or (nums[end] == nums[end - 1] - 1)):\n                # Reset start if the current element does not continue the consecutive sequence\n                for i in range(start, end):\n                    length = end - i\n                    subarray_sum = sum(nums[i:end])\n                    total_sum = (total_sum + subarray_sum * length) % MOD\n                start = end\n        \n        # Handle the last segment\n        for i in range(start, n):\n            length = n - i\n            subarray_sum = sum(nums[i:n])\n            total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        return total_sum",
    "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        \n        for end in range(1, n):\n            if not ((nums[end] == nums[end - 1] + 1) or (nums[end] == nums[end - 1] - 1)):\n                # Process the segment from start to end-1\n                for i in range(start, end):\n                    for j in range(i, end):\n                        total_sum = (total_sum + sum(nums[i:j+1])) % MOD\n                start = end\n        \n        # Process the last segment\n        for i in range(start, n):\n            for j in range(i, n):\n                total_sum = (total_sum + sum(nums[i:j+1])) % MOD\n        \n        return total_sum"
  ],
  "total_candidates": 39,
  "nodes_explored": 39,
  "tree_depth": 0,
  "solution_tree": [
    {
      "node_id": "0_0",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        i = 0\n        while i < n:\n            start = i\n            # Determine the direction of the consecutive sequence\n            if i + 1 < n:\n                diff = nums[i + 1] - nums[i]\n            else:\n                diff = 0\n            \n            # Expand the window as long as the sequence is consecutive\n            while i + 1 < n and (nums[i + 1] - nums[i] == diff and (diff == 1 or diff == -1)):\n                i += 1\n            \n            # Calculate the sum of all subarrays in the current window\n            length = i - start + 1\n            for j in range(length):\n                total_sum = (total_sum + (length - j) * (nums[start + j])) % MOD\n            \n            i += 1\n        \n        return total_sum",
      "solution_hash": "8c4ef1b8e80deb5cbb9669a595f88875eda55e6fe95e65c20a02531342c642f2",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp49bunah3.py\", line 244, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmp49bunah3.py\", line 111, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp49bunah3.py` failed. (See above for error)\n",
        "execution_time": 13.551875591278076,
        "failed_tests": [
          {
            "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
            "expected": "72",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmp49bunah3.py\", line 244, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmp49bunah3.py\", line 111, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmp49bunah3.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_1",
        "1_5",
        "1_9"
      ],
      "passed": false
    },
    {
      "node_id": "0_1",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        while start < n:\n            end = start + 1\n            while end < n and (nums[end] == nums[end - 1] + 1 or nums[end] == nums[end - 1] - 1):\n                end += 1\n            \n            # Calculate the sum of all subarrays in the range [start, end)\n            length = end - start\n            for i in range(start, end):\n                total_sum += nums[i] * (length - (i - start))\n            \n            start = end\n        \n        return total_sum % MOD",
      "solution_hash": "308484f1ae9bbd60286287182f22130b18e402a72192ef786d5e887db706f270",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpigpr_e_b.py\", line 240, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpigpr_e_b.py\", line 107, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpigpr_e_b.py` failed. (See above for error)\n",
        "execution_time": 13.567341327667236,
        "failed_tests": [
          {
            "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
            "expected": "72",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpigpr_e_b.py\", line 240, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpigpr_e_b.py\", line 107, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpigpr_e_b.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_14",
        "1_18",
        "1_22"
      ],
      "passed": false
    },
    {
      "node_id": "0_2",
      "solution": "class Solution:\n    def getSum(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        total_sum = 0\n        \n        if n == 0:\n            return 0\n        \n        start = 0\n        direction = 0  # 0: unset, 1: increasing, -1: decreasing\n        \n        for end in range(1, n):\n            if direction == 0:\n                if nums[end] == nums[end - 1] + 1:\n                    direction = 1\n                elif nums[end] == nums[end - 1] - 1:\n                    direction = -1\n            else:\n                if direction == 1 and nums[end] != nums[end - 1] + 1:\n                    break\n                elif direction == -1 and nums[end] != nums[end - 1] - 1:\n                    break\n            \n            if end == n - 1 or direction == 0:\n                length = end - start + 1\n                subarray_sum = (length * (nums[start] + nums[end])) // 2\n                total_sum = (total_sum + subarray_sum * length) % MOD\n                start = end\n                direction = 0\n        \n        # Handle the last segment\n        length = n - start\n        subarray_sum = (length * (nums[start] + nums[n - 1])) // 2\n        total_sum = (total_sum + subarray_sum * length) % MOD\n        \n        return total_sum",
      "solution_hash": "adaf03d85f161d4a7b4c4f933df7b15365663ab3b15174afeebd1fcdfd69dc55",
      "test_result": {
        "status": "fail",
        "stdout": "",
        "stderr": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpqru8u5s6.py\", line 254, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpqru8u5s6.py\", line 121, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpqru8u5s6.py` failed. (See above for error)\n",
        "execution_time": 13.550445795059204,
        "failed_tests": [
          {
            "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
            "expected": "72",
            "actual": "unknown"
          }
        ],
        "error_message": "Traceback (most recent call last):\n  File \"/scratch/local/22242032/tmpqru8u5s6.py\", line 254, in <module>\n    check(Solution().getSum)\n  File \"/scratch/local/22242032/tmpqru8u5s6.py\", line 121, in check\n    assert candidate(nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]) == 72\nAssertionError\n\nERROR conda.cli.main_run:execute(125): `conda run python /scratch/local/22242032/tmpqru8u5s6.py` failed. (See above for error)"
      },
      "depth": 0,
      "parent_id": null,
      "children": [
        "1_27",
        "1_31",
        "1_35"
      ],
      "passed": false
    }
  ],
  "stats": {
    "nodes_explored": 39,
    "candidates_generated": 39,
    "tests_passed": 0,
    "tests_failed": 39,
    "test_timeouts": 0,
    "test_errors": 0,
    "import_errors": 0,
    "import_terminated_branches": 0,
    "unique_import_failures": [],
    "execution_times": [
      13.551875591278076,
      13.544597148895264,
      13.578728199005127,
      13.5400869846344,
      13.562913179397583,
      13.547374963760376,
      13.547374963760376,
      13.55094838142395,
      13.547374963760376,
      13.560006856918335,
      13.553101539611816,
      13.55500864982605,
      13.567857265472412,
      13.567341327667236,
      13.572758913040161,
      13.572758913040161,
      13.572758913040161,
      13.572758913040161,
      13.562681198120117,
      13.705293893814087,
      13.834519147872925,
      13.55032730102539,
      13.562681198120117,
      13.581424236297607,
      13.55366587638855,
      13.553634643554688,
      13.550445795059204,
      13.544366836547852,
      13.56570053100586,
      13.537613153457642,
      13.514999866485596,
      13.492521286010742,
      13.592957973480225,
      13.585209846496582,
      13.59155821800232,
      13.577311992645264,
      13.660197496414185,
      13.588823318481445,
      13.54550576210022
    ],
    "tree_depth": 0,
    "termination_reasons": {
      "depth_limit": 0,
      "adaptive_threshold": 0,
      "import_failures": 0,
      "early_stopping": 0,
      "iteration_limit": 1
    },
    "solution_diversity": {
      "unique_solutions": 33,
      "unique_ratio": 0.8461538461538461,
      "similarity_score": 0.8913359527408459,
      "solution_lengths": {
        "min": 121,
        "max": 1706,
        "avg": 984.9230769230769
      },
      "algorithm_approaches": {
        "sliding_window": 12,
        "simulation": 1,
        "other": 26
      },
      "feature_diversity": 0.8205128205128205,
      "features_analysis": {
        "boolean_features": {
          "has_recursion": {
            "true_ratio": 0.9743589743589743,
            "count": 38
          },
          "uses_list": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dict": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_set": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_heap": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_queue": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_stack": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dp": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_bfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_dfs": {
            "true_ratio": 0.0,
            "count": 0
          },
          "uses_binary_search": {
            "true_ratio": 0.0,
            "count": 0
          },
          "nested_loops": {
            "true_ratio": 0.8974358974358975,
            "count": 35
          }
        },
        "numeric_features": {
          "loop_count": {
            "min": 0,
            "max": 5,
            "avg": 2.948717948717949,
            "variance": 0.9204470742932279
          },
          "if_count": {
            "min": 0,
            "max": 6,
            "avg": 2.051282051282051,
            "variance": 2.4076265614727173
          },
          "else_count": {
            "min": 0,
            "max": 2,
            "avg": 0.5384615384615384,
            "variance": 0.2998027613412229
          },
          "return_count": {
            "min": 0,
            "max": 3,
            "avg": 1.6666666666666667,
            "variance": 0.3247863247863245
          },
          "assignment_count": {
            "min": 1,
            "max": 29,
            "avg": 15.743589743589743,
            "variance": 32.75476660092045
          },
          "class_method_count": {
            "min": 0,
            "max": 2,
            "avg": 1.0256410256410255,
            "variance": 0.07626561472715314
          },
          "line_count": {
            "min": 3,
            "max": 46,
            "avg": 29.256410256410255,
            "variance": 61.062458908612776
          },
          "char_count": {
            "min": 121,
            "max": 1706,
            "avg": 984.9230769230769,
            "variance": 97439.66074950693
          },
          "max_indent": {
            "min": 0,
            "max": 39,
            "avg": 18.333333333333332,
            "variance": 26.58119658119659
          }
        }
      },
      "complexity_diversity": {
        "complexity_distribution": {
          "exponential": 38,
          "constant": 1
        },
        "avg_complexity_metrics": {
          "avg_line_count": 29.256410256410255,
          "avg_loop_count": 2.948717948717949,
          "avg_condition_count": 3.1538461538461537,
          "avg_method_count": 1.0256410256410255,
          "avg_assignment_count": 15.743589743589743,
          "avg_max_loop_nesting": 0.9743589743589743
        },
        "complexity_diversity_ratio": 0.3333333333333333
      }
    },
    "test_case_analysis": {
      "hardest_cases": {
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 25,
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 13
      },
      "first_failing_tests": {
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 25,
        "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]": 13
      }
    },
    "feedback_impact": {
      "depths": {
        "1": {
          "attempts": 9,
          "improvements": 1,
          "solved": 0
        },
        "2": {
          "attempts": 27,
          "improvements": 0,
          "solved": 0
        }
      },
      "error_types": {
        "assertion_failure": {
          "attempts": 11,
          "improvements": 1
        },
        "name_error": {
          "attempts": 1,
          "improvements": 0
        }
      },
      "test_case_improvements": {
        "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]": 1
      },
      "error_transitions": {
        "assertion_failure->assertion_failure": 32,
        "assertion_failure->name_error": 1,
        "name_error->assertion_failure": 3
      }
    },
    "code_eval_metrics": {
      "depth_statistics": {
        "min_depth": 0,
        "max_depth": 2,
        "avg_depth": 1.6153846153846154,
        "solutions_per_depth": {
          "0": 3,
          "1": 9,
          "2": 27
        },
        "passing_solutions_per_depth": {
          "0": 0,
          "1": 0,
          "2": 0
        }
      },
      "pass_at_k": {
        "pass@1": 0.0,
        "pass@3": 0.0,
        "pass@5": 0.0,
        "pass@10": 0.0
      },
      "solutions_evaluated": 40
    },
    "summary": {
      "efficiency": {
        "solving_rate": 0.0,
        "branch_success_rate": 0.0,
        "test_success_rate": 0.0
      },
      "test_results": {
        "total": 39,
        "passed": 0,
        "failed": 39,
        "timeouts": 0,
        "import_errors": 0,
        "other_errors": 0,
        "unique_import_failures": []
      },
      "error_recovery": {
        "total_attempts": 12,
        "total_improvements": 1,
        "recovery_rate": 0.08333333333333333
      },
      "top_errors": [
        [
          "assertion_failure",
          11
        ],
        [
          "name_error",
          1
        ]
      ],
      "hardest_test_cases": [
        [
          "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
          25
        ],
        [
          "nums = [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
          13
        ]
      ],
      "termination_reasons": {
        "depth_limit": 0,
        "adaptive_threshold": 0,
        "import_failures": 0,
        "early_stopping": 0,
        "iteration_limit": 1
      }
    }
  },
  "processing_time": 1381.3034660816193,
  "code_eval_results": {
    "pass_at_k": {
      "pass@1": 0.0,
      "pass@3": 0.0,
      "pass@5": 0.0,
      "pass@10": 0.0
    },
    "detailed_results": {
      "0": [
        [
          0,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 0
          }
        ],
        [
          1,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 1
          }
        ],
        [
          2,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 2
          }
        ],
        [
          3,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 3
          }
        ],
        [
          4,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 4
          }
        ],
        [
          5,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 5
          }
        ],
        [
          6,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 6
          }
        ],
        [
          7,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 7
          }
        ],
        [
          8,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 8
          }
        ],
        [
          9,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'Solution' is not defined",
            "completion_id": 9
          }
        ],
        [
          10,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 10
          }
        ],
        [
          11,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 11
          }
        ],
        [
          12,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 12
          }
        ],
        [
          13,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 13
          }
        ],
        [
          14,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 14
          }
        ],
        [
          15,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 15
          }
        ],
        [
          16,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 16
          }
        ],
        [
          17,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 17
          }
        ],
        [
          18,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 18
          }
        ],
        [
          19,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 19
          }
        ],
        [
          20,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 20
          }
        ],
        [
          21,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 21
          }
        ],
        [
          22,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 22
          }
        ],
        [
          23,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 23
          }
        ],
        [
          24,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 24
          }
        ],
        [
          25,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 25
          }
        ],
        [
          26,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 26
          }
        ],
        [
          27,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 27
          }
        ],
        [
          28,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 28
          }
        ],
        [
          29,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 29
          }
        ],
        [
          30,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 30
          }
        ],
        [
          31,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 31
          }
        ],
        [
          32,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 32
          }
        ],
        [
          33,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 33
          }
        ],
        [
          34,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 34
          }
        ],
        [
          35,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 35
          }
        ],
        [
          36,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 36
          }
        ],
        [
          37,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 37
          }
        ],
        [
          38,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: ",
            "completion_id": 38
          }
        ],
        [
          39,
          {
            "task_id": 0,
            "passed": false,
            "result": "failed: name 'pairwise' is not defined",
            "completion_id": 39
          }
        ]
      ]
    },
    "solutions_evaluated": 40,
    "test_cases": 1
  }
}